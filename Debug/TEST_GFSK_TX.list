
TEST_GFSK_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a58c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800a6cc  0800a6cc  0000b6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9cc  0800a9cc  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9cc  0800a9cc  0000b9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9d4  0800a9d4  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9d4  0800a9d4  0000b9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d8  0800a9d8  0000b9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a9dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000060  0800aa3c  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800aa3c  0000c604  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f875  00000000  00000000  0000c08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004372  00000000  00000000  0002b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db8  00000000  00000000  0002fc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016c7  00000000  00000000  00031a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e69  00000000  00000000  000330f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed45  00000000  00000000  00053f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c414d  00000000  00000000  00072ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008184  00000000  00000000  00136e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0013efbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a6b4 	.word	0x0800a6b4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800a6b4 	.word	0x0800a6b4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <delay_us+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000520:	e002      	b.n	8000528 <delay_us+0x18>
		delay_counter_disp++;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <delay_us+0x30>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	d8f6      	bhi.n	8000522 <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000168 	.word	0x20000168

08000544 <myPrintf>:

void myPrintf(const char *fmt, ...) {
 8000544:	b40f      	push	{r0, r1, r2, r3}
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	2164      	movs	r1, #100	@ 0x64
 8000558:	480a      	ldr	r0, [pc, #40]	@ (8000584 <myPrintf+0x40>)
 800055a:	f009 fc1d 	bl	8009d98 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800055e:	4809      	ldr	r0, [pc, #36]	@ (8000584 <myPrintf+0x40>)
 8000560:	f000 f814 	bl	800058c <bufferSize>
 8000564:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	b29a      	uxth	r2, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	4905      	ldr	r1, [pc, #20]	@ (8000584 <myPrintf+0x40>)
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <myPrintf+0x44>)
 8000572:	f003 fe3d 	bl	80041f0 <HAL_UART_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000580:	b004      	add	sp, #16
 8000582:	4770      	bx	lr
 8000584:	2000007c 	.word	0x2000007c
 8000588:	20000248 	.word	0x20000248

0800058c <bufferSize>:

int bufferSize(char *buffer) {
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000598:	e002      	b.n	80005a0 <bufferSize+0x14>
		i++;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1f6      	bne.n	800059a <bufferSize+0xe>
	return i;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005dc:	68fb      	ldr	r3, [r7, #12]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <HAL_UART_RxCpltCallback+0x20>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d102      	bne.n	80005fe <HAL_UART_RxCpltCallback+0x16>
		TX_FLAG = 1;
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <HAL_UART_RxCpltCallback+0x24>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	20000248 	.word	0x20000248
 800060c:	200002eb 	.word	0x200002eb

08000610 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000616:	f000 fdc1 	bl	800119c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061a:	f000 f8bf 	bl	800079c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061e:	f000 fa69 	bl	8000af4 <MX_GPIO_Init>
	MX_SubGHz_Phy_Init();
 8000622:	f009 f808 	bl	8009636 <MX_SubGHz_Phy_Init>
	MX_TIM1_Init();
 8000626:	f000 f92b 	bl	8000880 <MX_TIM1_Init>
	MX_TIM2_Init();
 800062a:	f000 f97d 	bl	8000928 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800062e:	f000 f9c9 	bl	80009c4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000632:	f000 fa13 	bl	8000a5c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000636:	484c      	ldr	r0, [pc, #304]	@ (8000768 <main+0x158>)
 8000638:	f003 f99c 	bl	8003974 <HAL_TIM_Base_Start>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 800063c:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <main+0x15c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = 6;
 8000642:	4b4a      	ldr	r3, [pc, #296]	@ (800076c <main+0x15c>)
 8000644:	2206      	movs	r2, #6
 8000646:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000648:	4b48      	ldr	r3, [pc, #288]	@ (800076c <main+0x15c>)
 800064a:	2208      	movs	r2, #8
 800064c:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800064e:	4b47      	ldr	r3, [pc, #284]	@ (800076c <main+0x15c>)
 8000650:	2204      	movs	r2, #4
 8000652:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000654:	4b45      	ldr	r3, [pc, #276]	@ (800076c <main+0x15c>)
 8000656:	2218      	movs	r2, #24
 8000658:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800065a:	4b44      	ldr	r3, [pc, #272]	@ (800076c <main+0x15c>)
 800065c:	2200      	movs	r2, #0
 800065e:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000660:	4b42      	ldr	r3, [pc, #264]	@ (800076c <main+0x15c>)
 8000662:	2200      	movs	r2, #0
 8000664:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000666:	4b41      	ldr	r3, [pc, #260]	@ (800076c <main+0x15c>)
 8000668:	22f2      	movs	r2, #242	@ 0xf2
 800066a:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800066c:	4b3f      	ldr	r3, [pc, #252]	@ (800076c <main+0x15c>)
 800066e:	2201      	movs	r2, #1
 8000670:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000672:	4b3f      	ldr	r3, [pc, #252]	@ (8000770 <main+0x160>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000678:	4b3d      	ldr	r3, [pc, #244]	@ (8000770 <main+0x160>)
 800067a:	220d      	movs	r2, #13
 800067c:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR;
 800067e:	4b3c      	ldr	r3, [pc, #240]	@ (8000770 <main+0x160>)
 8000680:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000684:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV;
 8000686:	4b3a      	ldr	r3, [pc, #232]	@ (8000770 <main+0x160>)
 8000688:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800068c:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800068e:	4b38      	ldr	r3, [pc, #224]	@ (8000770 <main+0x160>)
 8000690:	220b      	movs	r2, #11
 8000692:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000694:	4837      	ldr	r0, [pc, #220]	@ (8000774 <main+0x164>)
 8000696:	f007 fd85 	bl	80081a4 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800069a:	2100      	movs	r1, #0
 800069c:	2000      	movs	r0, #0
 800069e:	f008 fbed 	bl	8008e7c <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(rx_cmd, PAYLOAD_LENGTH);
 80006a2:	2106      	movs	r1, #6
 80006a4:	4834      	ldr	r0, [pc, #208]	@ (8000778 <main+0x168>)
 80006a6:	f007 fdcf 	bl	8008248 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 80006aa:	4830      	ldr	r0, [pc, #192]	@ (800076c <main+0x15c>)
 80006ac:	f008 fb48 	bl	8008d40 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 80006b0:	4a32      	ldr	r2, [pc, #200]	@ (800077c <main+0x16c>)
 80006b2:	463b      	mov	r3, r7
 80006b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80006bc:	463b      	mov	r3, r7
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 fe07 	bl	80082d2 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 80006c4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80006c8:	f007 fe52 	bl	8008370 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80006cc:	482c      	ldr	r0, [pc, #176]	@ (8000780 <main+0x170>)
 80006ce:	f008 f92b 	bl	8008928 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80006d2:	2301      	movs	r3, #1
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	2002      	movs	r0, #2
 80006da:	f008 f8a7 	bl	800882c <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME); // Set to RFO_LP for low power
 80006de:	2206      	movs	r2, #6
 80006e0:	210e      	movs	r1, #14
 80006e2:	2001      	movs	r0, #1
 80006e4:	f008 f98c 	bl	8008a00 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 80006e8:	4821      	ldr	r0, [pc, #132]	@ (8000770 <main+0x160>)
 80006ea:	f008 fa57 	bl	8008b9c <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 80006ee:	2300      	movs	r3, #0
 80006f0:	2200      	movs	r2, #0
 80006f2:	f240 210f 	movw	r1, #527	@ 0x20f
 80006f6:	f240 200f 	movw	r0, #527	@ 0x20f
 80006fa:	f008 f8b9 	bl	8008870 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	HAL_UART_Receive_IT(&huart2, rxCMD, 6);
 80006fe:	2206      	movs	r2, #6
 8000700:	4920      	ldr	r1, [pc, #128]	@ (8000784 <main+0x174>)
 8000702:	4821      	ldr	r0, [pc, #132]	@ (8000788 <main+0x178>)
 8000704:	f003 fdfa 	bl	80042fc <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800070e:	481f      	ldr	r0, [pc, #124]	@ (800078c <main+0x17c>)
 8000710:	f001 f8d8 	bl	80018c4 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000714:	481e      	ldr	r0, [pc, #120]	@ (8000790 <main+0x180>)
 8000716:	f7ff fefb 	bl	8000510 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000720:	481a      	ldr	r0, [pc, #104]	@ (800078c <main+0x17c>)
 8000722:	f001 f8cf 	bl	80018c4 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000726:	481a      	ldr	r0, [pc, #104]	@ (8000790 <main+0x180>)
 8000728:	f7ff fef2 	bl	8000510 <delay_us>

		if (TX_FLAG) {
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <main+0x184>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d011      	beq.n	8000758 <main+0x148>
			SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000734:	4812      	ldr	r0, [pc, #72]	@ (8000780 <main+0x170>)
 8000736:	f008 f8f7 	bl	8008928 <SUBGRF_SetRfFrequency>
			//SUBGRF_SetSwitch(RFO_HP, RFSWITCH_TX); /*Set RF switch*/
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 800073a:	2101      	movs	r1, #1
 800073c:	2001      	movs	r0, #1
 800073e:	f008 fd3b 	bl	80091b8 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(rxCMD, 6, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2106      	movs	r1, #6
 8000746:	480f      	ldr	r0, [pc, #60]	@ (8000784 <main+0x174>)
 8000748:	f007 fdb0 	bl	80082ac <SUBGRF_SendPayload>
			counter++;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <main+0x188>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <main+0x188>)
 8000756:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2, rxCMD, 6);
 8000758:	2206      	movs	r2, #6
 800075a:	490a      	ldr	r1, [pc, #40]	@ (8000784 <main+0x174>)
 800075c:	480a      	ldr	r0, [pc, #40]	@ (8000788 <main+0x178>)
 800075e:	f003 fdcd 	bl	80042fc <HAL_UART_Receive_IT>

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000762:	f008 ff70 	bl	8009646 <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000766:	e7cf      	b.n	8000708 <main+0xf8>
 8000768:	20000168 	.word	0x20000168
 800076c:	200000e0 	.word	0x200000e0
 8000770:	200000f4 	.word	0x200000f4
 8000774:	08000ba9 	.word	0x08000ba9
 8000778:	200002e4 	.word	0x200002e4
 800077c:	0800a6cc 	.word	0x0800a6cc
 8000780:	17fbc158 	.word	0x17fbc158
 8000784:	200002dc 	.word	0x200002dc
 8000788:	20000248 	.word	0x20000248
 800078c:	48000400 	.word	0x48000400
 8000790:	000f4240 	.word	0x000f4240
 8000794:	200002eb 	.word	0x200002eb
 8000798:	200002ea 	.word	0x200002ea

0800079c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b09a      	sub	sp, #104	@ 0x68
 80007a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2248      	movs	r2, #72	@ 0x48
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 fb02 	bl	8009db4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c2:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <SystemClock_Config+0xbc>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007ca:	4a23      	ldr	r2, [pc, #140]	@ (8000858 <SystemClock_Config+0xbc>)
 80007cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <SystemClock_Config+0xbc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 80007e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f0:	2303      	movs	r3, #3
 80007f2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007f4:	2310      	movs	r3, #16
 80007f6:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 80007f8:	2306      	movs	r3, #6
 80007fa:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000800:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000802:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000806:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000808:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800080c:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fb40 	bl	8001e98 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x86>
		Error_Handler();
 800081e:	f000 fa3b 	bl	8000c98 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000822:	234f      	movs	r3, #79	@ 0x4f
 8000824:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2303      	movs	r3, #3
 8000828:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 feac 	bl	800259c <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xb2>
		Error_Handler();
 800084a:	f000 fa25 	bl	8000c98 <Error_Handler>
	}
}
 800084e:	bf00      	nop
 8000850:	3768      	adds	r7, #104	@ 0x68
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	58000400 	.word	0x58000400

0800085c <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_SUBGHZ_Init+0x20>)
 8000862:	2210      	movs	r2, #16
 8000864:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_SUBGHZ_Init+0x20>)
 8000868:	f002 fc0c 	bl	8003084 <HAL_SUBGHZ_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000872:	f000 fa11 	bl	8000c98 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000110 	.word	0x20000110

08000880 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008a0:	4a20      	ldr	r2, [pc, #128]	@ (8000924 <MX_TIM1_Init+0xa4>)
 80008a2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008a6:	222f      	movs	r2, #47	@ 0x2f
 80008a8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80008ca:	4815      	ldr	r0, [pc, #84]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008cc:	f002 fffa 	bl	80038c4 <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x5a>
		Error_Handler();
 80008d6:	f000 f9df 	bl	8000c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008de:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <MX_TIM1_Init+0xa0>)
 80008e8:	f003 f9a7 	bl	8003c3a <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80008f2:	f000 f9d1 	bl	8000c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	@ (8000920 <MX_TIM1_Init+0xa0>)
 8000908:	f003 fb88 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000912:	f000 f9c1 	bl	8000c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000011c 	.word	0x2000011c
 8000924:	40012c00 	.word	0x40012c00

08000928 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000950:	222f      	movs	r2, #47	@ 0x2f
 8000952:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_TIM2_Init+0x94>)
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <MX_TIM2_Init+0x98>)
 800095e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_TIM2_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <MX_TIM2_Init+0x94>)
 800096e:	f002 ffa9 	bl	80038c4 <HAL_TIM_Base_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x54>
		Error_Handler();
 8000978:	f000 f98e 	bl	8000c98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000980:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_TIM2_Init+0x94>)
 800098a:	f003 f956 	bl	8003c3a <HAL_TIM_ConfigClockSource>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000994:	f000 f980 	bl	8000c98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_TIM2_Init+0x94>)
 80009a6:	f003 fb39 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80009b0:	f000 f972 	bl	8000c98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000168 	.word	0x20000168
 80009c0:	000f4240 	.word	0x000f4240

080009c4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <MX_USART1_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a0e:	f003 fb9f 	bl	8004150 <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000a18:	f000 f93e 	bl	8000c98 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a20:	f005 fb5b 	bl	80060da <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000a2a:	f000 f935 	bl	8000c98 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a32:	f005 fb90 	bl	8006156 <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000a3c:	f000 f92c 	bl	8000c98 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_USART1_UART_Init+0x90>)
 8000a42:	f005 fb12 	bl	800606a <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8000a4c:	f000 f924 	bl	8000c98 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200001b4 	.word	0x200001b4
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <MX_USART2_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000aa6:	f003 fb53 	bl	8004150 <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000ab0:	f000 f8f2 	bl	8000c98 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000ab8:	f005 fb0f 	bl	80060da <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000ac2:	f000 f8e9 	bl	8000c98 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000aca:	f005 fb44 	bl	8006156 <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000ad4:	f000 f8e0 	bl	8000c98 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000ada:	f005 fac6 	bl	800606a <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000ae4:	f000 f8d8 	bl	8000c98 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000248 	.word	0x20000248
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fd55 	bl	80005b8 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f7ff fd52 	bl	80005b8 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	2004      	movs	r0, #4
 8000b16:	f7ff fd4f 	bl	80005b8 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000b20:	481f      	ldr	r0, [pc, #124]	@ (8000ba0 <MX_GPIO_Init+0xac>)
 8000b22:	f000 fecf 	bl	80018c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000b26:	2200      	movs	r2, #0
 8000b28:	2138      	movs	r1, #56	@ 0x38
 8000b2a:	481e      	ldr	r0, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0xb0>)
 8000b2c:	f000 feca 	bl	80018c4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000b30:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000b34:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4816      	ldr	r0, [pc, #88]	@ (8000ba0 <MX_GPIO_Init+0xac>)
 8000b48:	f000 fd5c 	bl	8001604 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000b4c:	2338      	movs	r3, #56	@ 0x38
 8000b4e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4810      	ldr	r0, [pc, #64]	@ (8000ba4 <MX_GPIO_Init+0xb0>)
 8000b62:	f000 fd4f 	bl	8001604 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000b66:	2303      	movs	r3, #3
 8000b68:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f000 fd42 	bl	8001604 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000b80:	2340      	movs	r3, #64	@ 0x40
 8000b82:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b88:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4619      	mov	r1, r3
 8000b92:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_GPIO_Init+0xb0>)
 8000b94:	f000 fd36 	bl	8001604 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48000800 	.word	0x48000800

08000ba8 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */

void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_TX_DONE) {
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d136      	bne.n	8000c26 <DioIrqHndlr+0x7e>
		TX_FLAG = 0;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c68 <DioIrqHndlr+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		myPrintf("\n\r Test Command Transmitted Successful:  \r");
 8000bbe:	482b      	ldr	r0, [pc, #172]	@ (8000c6c <DioIrqHndlr+0xc4>)
 8000bc0:	f7ff fcc0 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(rxCMD); i++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e00a      	b.n	8000be0 <DioIrqHndlr+0x38>
			myPrintf(" %02x", rxCMD[i]);
 8000bca:	4a29      	ldr	r2, [pc, #164]	@ (8000c70 <DioIrqHndlr+0xc8>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4827      	ldr	r0, [pc, #156]	@ (8000c74 <DioIrqHndlr+0xcc>)
 8000bd6:	f7ff fcb5 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(rxCMD); i++) {
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d9f1      	bls.n	8000bca <DioIrqHndlr+0x22>
		}
		myPrintf("\n\n");
 8000be6:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <DioIrqHndlr+0xd0>)
 8000be8:	f7ff fcac 	bl	8000544 <myPrintf>

		SUBGRF_SetRfFrequency(FREQ_401_MHZ);
 8000bec:	4823      	ldr	r0, [pc, #140]	@ (8000c7c <DioIrqHndlr+0xd4>)
 8000bee:	f007 fe9b 	bl	8008928 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f008 fadf 	bl	80091b8 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8000bfa:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000bfe:	f007 fcbf 	bl	8008580 <SUBGRF_SetRxBoosted>

		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c08:	481d      	ldr	r0, [pc, #116]	@ (8000c80 <DioIrqHndlr+0xd8>)
 8000c0a:	f000 fe5b 	bl	80018c4 <HAL_GPIO_WritePin>
		delay_us(1000000);  // 500ms delay
 8000c0e:	481d      	ldr	r0, [pc, #116]	@ (8000c84 <DioIrqHndlr+0xdc>)
 8000c10:	f7ff fc7e 	bl	8000510 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c1a:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <DioIrqHndlr+0xd8>)
 8000c1c:	f000 fe52 	bl	80018c4 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000c20:	4818      	ldr	r0, [pc, #96]	@ (8000c84 <DioIrqHndlr+0xdc>)
 8000c22:	f7ff fc75 	bl	8000510 <delay_us>
	}
	if (radioIrq == IRQ_RX_DONE) {
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d118      	bne.n	8000c5e <DioIrqHndlr+0xb6>
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 8000c2c:	2206      	movs	r2, #6
 8000c2e:	4916      	ldr	r1, [pc, #88]	@ (8000c88 <DioIrqHndlr+0xe0>)
 8000c30:	4816      	ldr	r0, [pc, #88]	@ (8000c8c <DioIrqHndlr+0xe4>)
 8000c32:	f007 fb19 	bl	8008268 <SUBGRF_GetPayload>
		myPrintf("\nGFSK Received\r\n");
 8000c36:	4816      	ldr	r0, [pc, #88]	@ (8000c90 <DioIrqHndlr+0xe8>)
 8000c38:	f7ff fc84 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	e00a      	b.n	8000c58 <DioIrqHndlr+0xb0>
			myPrintf(" %x", rx_cmd[i]);
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <DioIrqHndlr+0xe4>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4811      	ldr	r0, [pc, #68]	@ (8000c94 <DioIrqHndlr+0xec>)
 8000c4e:	f7ff fc79 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b05      	cmp	r3, #5
 8000c5c:	d9f1      	bls.n	8000c42 <DioIrqHndlr+0x9a>
		}
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200002eb 	.word	0x200002eb
 8000c6c:	0800a6d4 	.word	0x0800a6d4
 8000c70:	200002dc 	.word	0x200002dc
 8000c74:	0800a700 	.word	0x0800a700
 8000c78:	0800a708 	.word	0x0800a708
 8000c7c:	17ec7f18 	.word	0x17ec7f18
 8000c80:	48000400 	.word	0x48000400
 8000c84:	000f4240 	.word	0x000f4240
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	200002e4 	.word	0x200002e4
 8000c90:	0800a70c 	.word	0x0800a70c
 8000c94:	0800a720 	.word	0x0800a720

08000c98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <LL_AHB2_GRP1_EnableClock>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ce2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d28:	68fb      	ldr	r3, [r7, #12]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d40:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d58:	68fb      	ldr	r3, [r7, #12]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ffdb 	bl	8000d34 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2032      	movs	r0, #50	@ 0x32
 8000d84:	f000 fb4d 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000d88:	2032      	movs	r0, #50	@ 0x32
 8000d8a:	f000 fb64 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <HAL_TIM_Base_MspInit+0x44>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10c      	bne.n	8000dc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000dae:	f7ff ffa9 	bl	8000d04 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2018      	movs	r0, #24
 8000db8:	f000 fb33 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dbc:	2018      	movs	r0, #24
 8000dbe:	f000 fb4a 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dc2:	e007      	b.n	8000dd4 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dcc:	d102      	bne.n	8000dd4 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff ff80 	bl	8000cd4 <LL_APB1_GRP1_EnableClock>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b096      	sub	sp, #88	@ 0x58
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2238      	movs	r2, #56	@ 0x38
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f008 ffd7 	bl	8009db4 <memset>
  if(huart->Instance==USART1)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a36      	ldr	r2, [pc, #216]	@ (8000ee4 <HAL_UART_MspInit+0x104>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d130      	bne.n	8000e72 <HAL_UART_MspInit+0x92>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e14:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000e18:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 ff7c 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e2a:	f7ff ff35 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e32:	f7ff ff67 	bl	8000d04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff ff34 	bl	8000ca4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000e3c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e40:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f000 fbd2 	bl	8001604 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2024      	movs	r0, #36	@ 0x24
 8000e66:	f000 fadc 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e6a:	2024      	movs	r0, #36	@ 0x24
 8000e6c:	f000 faf3 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e70:	e033      	b.n	8000eda <HAL_UART_MspInit+0xfa>
  else if(huart->Instance==USART2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee8 <HAL_UART_MspInit+0x108>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d12e      	bne.n	8000eda <HAL_UART_MspInit+0xfa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e80:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000e84:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 ff46 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_MspInit+0xba>
      Error_Handler();
 8000e96:	f7ff feff 	bl	8000c98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000e9e:	f7ff ff19 	bl	8000cd4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fefe 	bl	8000ca4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec6:	f000 fb9d 	bl	8001604 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2025      	movs	r0, #37	@ 0x25
 8000ed0:	f000 faa7 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed4:	2025      	movs	r0, #37	@ 0x25
 8000ed6:	f000 fabe 	bl	8001456 <HAL_NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3758      	adds	r7, #88	@ 0x58
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40004400 	.word	0x40004400

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f988 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <TIM1_UP_IRQHandler+0x10>)
 8000f4a:	f002 fd57 	bl	80039fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000011c 	.word	0x2000011c

08000f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <USART1_IRQHandler+0x10>)
 8000f5e:	f003 fa19 	bl	8004394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001b4 	.word	0x200001b4

08000f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <USART2_IRQHandler+0x10>)
 8000f72:	f003 fa0f 	bl	8004394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000248 	.word	0x20000248

08000f80 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000f86:	f002 faff 	bl	8003588 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000110 	.word	0x20000110

08000f94 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_GetTick+0x24>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000fb2:	f000 f892 	bl	80010da <TIMER_IF_GetTimerValue>
 8000fb6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200002ec 	.word	0x200002ec

08000fc8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f8af 	bl	8001136 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	@ (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f008 fed8 	bl	8009dc4 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20010000 	.word	0x20010000
 8001040:	00000400 	.word	0x00000400
 8001044:	200002f0 	.word	0x200002f0
 8001048:	20000608 	.word	0x20000608

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001062:	79fb      	ldrb	r3, [r7, #7]
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001090:	79fb      	ldrb	r3, [r7, #7]
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80010a0:	4b02      	ldr	r3, [pc, #8]	@ (80010ac <TIMER_IF_SetTimerContext+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	200002f4 	.word	0x200002f4

080010b0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80010b4:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <TIMER_IF_GetTimerContext+0x10>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	200002f4 	.word	0x200002f4

080010c4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001106:	b480      	push	{r7}
 8001108:	b085      	sub	sp, #20
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800114a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800114c:	f7ff ff7e 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopForever+0x6>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopForever+0xe>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopForever+0x16>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001176:	f008 fe2b 	bl	8009dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117a:	f7ff fa49 	bl	8000610 <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   r0, =_estack
 8001180:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800118c:	0800a9dc 	.word	0x0800a9dc
  ldr r2, =_sbss
 8001190:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001194:	20000604 	.word	0x20000604

08001198 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 f930 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011ac:	f001 fbd8 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a09      	ldr	r2, [pc, #36]	@ (80011d8 <HAL_Init+0x3c>)
 80011b4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f810 	bl	80011dc <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	e001      	b.n	80011cc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c8:	f7ff fdcc 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d024      	beq.n	800123a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f0:	f001 fbb6 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_InitTick+0x6c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	fbb3 f3f1 	udiv	r3, r3, r1
 8001204:	fbb2 f3f3 	udiv	r3, r2, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f932 	bl	8001472 <HAL_SYSTICK_Config>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10f      	bne.n	8001234 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	d809      	bhi.n	800122e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121a:	2200      	movs	r2, #0
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	f000 f8fe 	bl	8001422 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_InitTick+0x70>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e007      	b.n	800123e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e004      	b.n	800123e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000000c 	.word	0x2000000c
 800124c:	20000008 	.word	0x20000008

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	@ (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	2000000c 	.word	0x2000000c
 8001270:	200002f8 	.word	0x200002f8

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4906      	ldr	r1, [pc, #24]	@ (800130c <__NVIC_EnableIRQ+0x34>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f7ff ff90 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff2d 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff44 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff92 	bl	8001364 <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff61 	bl	8001310 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff37 	bl	80012d8 <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa4 	bl	80013c8 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e04f      	b.n	800153c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e040      	b.n	800153c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 020e 	bic.w	r2, r2, #14
 80014c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f003 021c 	and.w	r2, r3, #28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001506:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00c      	beq.n	800152a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800151e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001528:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d005      	beq.n	800156a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2204      	movs	r2, #4
 8001562:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e047      	b.n	80015fa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f003 021c 	and.w	r2, r3, #28
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	4798      	blx	r3
    }
  }
  return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e140      	b.n	8001896 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8132 	beq.w	8001890 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d005      	beq.n	8001644 <HAL_GPIO_Init+0x40>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d130      	bne.n	80016a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167a:	2201      	movs	r2, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	f003 0201 	and.w	r2, r3, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d017      	beq.n	80016e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d123      	bne.n	8001736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0203 	and.w	r2, r3, #3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 808c 	beq.w	8001890 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001778:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_GPIO_Init+0x2b0>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	2207      	movs	r2, #7
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1bc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a44      	ldr	r2, [pc, #272]	@ (80018b8 <HAL_GPIO_Init+0x2b4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1b8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a43      	ldr	r2, [pc, #268]	@ (80018bc <HAL_GPIO_Init+0x2b8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1b4>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e004      	b.n	80017c2 <HAL_GPIO_Init+0x1be>
 80017b8:	2307      	movs	r3, #7
 80017ba:	e002      	b.n	80017c2 <HAL_GPIO_Init+0x1be>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_GPIO_Init+0x1be>
 80017c0:	2300      	movs	r3, #0
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	f002 0203 	and.w	r2, r2, #3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4093      	lsls	r3, r2
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d2:	4938      	ldr	r1, [pc, #224]	@ (80018b4 <HAL_GPIO_Init+0x2b0>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001804:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800180a:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182e:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001834:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800183a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800185a:	4a19      	ldr	r2, [pc, #100]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 8001864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001868:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_GPIO_Init+0x2bc>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f aeb7 	bne.w	8001614 <HAL_GPIO_Init+0x10>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	58000800 	.word	0x58000800

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <HAL_PWR_EnableBkUpAccess+0x18>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a03      	ldr	r2, [pc, #12]	@ (800190c <HAL_PWR_EnableBkUpAccess+0x18>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	58000400 	.word	0x58000400

08001910 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_PWREx_GetVoltageRange+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	58000400 	.word	0x58000400

08001928 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001938:	d101      	bne.n	800193e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	58000400 	.word	0x58000400

0800194c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800195a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001996:	d101      	bne.n	800199c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80019f0:	d101      	bne.n	80019f6 <LL_RCC_HSE_IsReady+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_RCC_HSE_IsReady+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4a:	d101      	bne.n	8001a50 <LL_RCC_HSI_IsReady+0x18>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <LL_RCC_HSI_IsReady+0x1a>
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d101      	bne.n	8001a9a <LL_RCC_LSE_IsReady+0x18>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_RCC_LSE_IsReady+0x1a>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d101      	bne.n	8001afc <LL_RCC_LSI_IsReady+0x18>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <LL_RCC_LSI_IsReady+0x1a>
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6013      	str	r3, [r2, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d101      	bne.n	8001b54 <LL_RCC_MSI_IsReady+0x16>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <LL_RCC_MSI_IsReady+0x18>
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d101      	bne.n	8001b74 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 0203 	bic.w	r2, r3, #3
 8001be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c70:	f023 020f 	bic.w	r2, r3, #15
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d7e:	d101      	bne.n	8001d84 <LL_RCC_PLL_IsReady+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_RCC_PLL_IsReady+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfa:	d101      	bne.n	8001e00 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e1e:	d101      	bne.n	8001e24 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e42:	d101      	bne.n	8001e48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e64:	d101      	bne.n	8001e6a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e86:	d101      	bne.n	8001e8c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e36f      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eaa:	f7ff fea6 	bl	8001bfa <LL_RCC_GetSysClkSource>
 8001eae:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	f7ff ff8f 	bl	8001dd2 <LL_RCC_PLL_GetMainSource>
 8001eb4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80c4 	beq.w	800204c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3e>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d176      	bne.n	8001fbe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d173      	bne.n	8001fbe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e353      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_OscConfig+0x68>
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001efe:	e006      	b.n	8001f0e <HAL_RCC_OscConfig+0x76>
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d222      	bcs.n	8001f58 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fd5a 	bl	80029d0 <RCC_SetFlashLatencyFromMSIRange>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e331      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fe2b 	bl	8001bac <LL_RCC_MSI_SetCalibTrimming>
 8001f56:	e021      	b.n	8001f9c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe12 	bl	8001bac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fd1f 	bl	80029d0 <RCC_SetFlashLatencyFromMSIRange>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e2f6      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f9c:	f000 fce0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4aa7      	ldr	r2, [pc, #668]	@ (8002240 <HAL_RCC_OscConfig+0x3a8>)
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001fa6:	4ba7      	ldr	r3, [pc, #668]	@ (8002244 <HAL_RCC_OscConfig+0x3ac>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f916 	bl	80011dc <HAL_InitTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d047      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	e2e5      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d02c      	beq.n	8002020 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fc6:	f7ff fd9e 	bl	8001b06 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fca:	f7fe ffe9 	bl	8000fa0 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd2:	f7fe ffe5 	bl	8000fa0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e2d2      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fe4:	f7ff fdab 	bl	8001b3e <LL_RCC_MSI_IsReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f1      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fdc7 	bl	8001bac <LL_RCC_MSI_SetCalibTrimming>
 800201e:	e015      	b.n	800204c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002020:	f7ff fd7f 	bl	8001b22 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002024:	f7fe ffbc 	bl	8000fa0 <HAL_GetTick>
 8002028:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202c:	f7fe ffb8 	bl	8000fa0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e2a5      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800203e:	f7ff fd7e 	bl	8001b3e <LL_RCC_MSI_IsReady>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f1      	bne.n	800202c <HAL_RCC_OscConfig+0x194>
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800204a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d058      	beq.n	800210a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d005      	beq.n	800206a <HAL_RCC_OscConfig+0x1d2>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d108      	bne.n	8002076 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d14b      	bne.n	800210a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e289      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002094:	d102      	bne.n	800209c <HAL_RCC_OscConfig+0x204>
 8002096:	f7ff fc86 	bl	80019a6 <LL_RCC_HSE_Enable>
 800209a:	e00d      	b.n	80020b8 <HAL_RCC_OscConfig+0x220>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80020a4:	d104      	bne.n	80020b0 <HAL_RCC_OscConfig+0x218>
 80020a6:	f7ff fc51 	bl	800194c <LL_RCC_HSE_EnableTcxo>
 80020aa:	f7ff fc7c 	bl	80019a6 <LL_RCC_HSE_Enable>
 80020ae:	e003      	b.n	80020b8 <HAL_RCC_OscConfig+0x220>
 80020b0:	f7ff fc87 	bl	80019c2 <LL_RCC_HSE_Disable>
 80020b4:	f7ff fc58 	bl	8001968 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d012      	beq.n	80020e6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff6e 	bl	8000fa0 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c8:	f7fe ff6a 	bl	8000fa0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	@ 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e257      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80020da:	f7ff fc80 	bl	80019de <LL_RCC_HSE_IsReady>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f1      	beq.n	80020c8 <HAL_RCC_OscConfig+0x230>
 80020e4:	e011      	b.n	800210a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe ff5b 	bl	8000fa0 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ee:	f7fe ff57 	bl	8000fa0 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	@ 0x64
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e244      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002100:	f7ff fc6d 	bl	80019de <LL_RCC_HSE_IsReady>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f1      	bne.n	80020ee <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d046      	beq.n	80021a4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x290>
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d10e      	bne.n	8002140 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e22a      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fc8e 	bl	8001a5a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800213e:	e031      	b.n	80021a4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d019      	beq.n	800217c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	f7ff fc5a 	bl	8001a00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe ff28 	bl	8000fa0 <HAL_GetTick>
 8002150:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7fe ff24 	bl	8000fa0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e211      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002166:	f7ff fc67 	bl	8001a38 <LL_RCC_HSI_IsReady>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f1      	beq.n	8002154 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fc70 	bl	8001a5a <LL_RCC_HSI_SetCalibTrimming>
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	f7ff fc4e 	bl	8001a1c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe ff0e 	bl	8000fa0 <HAL_GetTick>
 8002184:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe ff0a 	bl	8000fa0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1f7      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800219a:	f7ff fc4d 	bl	8001a38 <LL_RCC_HSI_IsReady>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f1      	bne.n	8002188 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d06e      	beq.n	800228e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d056      	beq.n	8002266 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d031      	beq.n	8002234 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e1d0      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d013      	beq.n	800221a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80021f2:	f7ff fc67 	bl	8001ac4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021f6:	f7fe fed3 	bl	8000fa0 <HAL_GetTick>
 80021fa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe fecf 	bl	8000fa0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b11      	cmp	r3, #17
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1bc      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002210:	f7ff fc68 	bl	8001ae4 <LL_RCC_LSI_IsReady>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f1      	bne.n	80021fe <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002222:	f023 0210 	bic.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002234:	f7ff fc36 	bl	8001aa4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7fe feb2 	bl	8000fa0 <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800223e:	e00c      	b.n	800225a <HAL_RCC_OscConfig+0x3c2>
 8002240:	20000004 	.word	0x20000004
 8002244:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe feaa 	bl	8000fa0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b11      	cmp	r3, #17
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e197      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800225a:	f7ff fc43 	bl	8001ae4 <LL_RCC_LSI_IsReady>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f1      	beq.n	8002248 <HAL_RCC_OscConfig+0x3b0>
 8002264:	e013      	b.n	800228e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002266:	f7ff fc2d 	bl	8001ac4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7fe fe99 	bl	8000fa0 <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002272:	f7fe fe95 	bl	8000fa0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b11      	cmp	r3, #17
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e182      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002284:	f7ff fc2e 	bl	8001ae4 <LL_RCC_LSI_IsReady>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f1      	bne.n	8002272 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80d8 	beq.w	800244c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800229c:	f7ff fb44 	bl	8001928 <LL_PWR_IsEnabledBkUpAccess>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022a6:	f7ff fb25 	bl	80018f4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fe79 	bl	8000fa0 <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe fe75 	bl	8000fa0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e162      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022c4:	f7ff fb30 	bl	8001928 <LL_PWR_IsEnabledBkUpAccess>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f1      	beq.n	80022b2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d07b      	beq.n	80023ce <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b85      	cmp	r3, #133	@ 0x85
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d109      	bne.n	80022fa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7fe fe51 	bl	8000fa0 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fe fe43 	bl	8000fa0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e12e      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800232c:	f7ff fba9 	bl	8001a82 <LL_RCC_LSE_IsReady>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ef      	beq.n	8002316 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b81      	cmp	r3, #129	@ 0x81
 800233c:	d003      	beq.n	8002346 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b85      	cmp	r3, #133	@ 0x85
 8002344:	d121      	bne.n	800238a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe fe2b 	bl	8000fa0 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800234c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002354:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fe1d 	bl	8000fa0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e108      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ec      	beq.n	8002362 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002388:	e060      	b.n	800244c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe fe09 	bl	8000fa0 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800239c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fdfb 	bl	8000fa0 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0e6      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ec      	bne.n	80023a6 <HAL_RCC_OscConfig+0x50e>
 80023cc:	e03e      	b.n	800244c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fde7 	bl	8000fa0 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fdd9 	bl	8000fa0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0c4      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ec      	bne.n	80023ea <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe fdc6 	bl	8000fa0 <HAL_GetTick>
 8002414:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7fe fdb8 	bl	8000fa0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e0a3      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002442:	f7ff fb1e 	bl	8001a82 <LL_RCC_LSE_IsReady>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ef      	bne.n	800242c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8099 	beq.w	8002588 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d06c      	beq.n	8002536 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002460:	2b02      	cmp	r3, #2
 8002462:	d14b      	bne.n	80024fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	f7ff fc74 	bl	8001d50 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fd9a 	bl	8000fa0 <HAL_GetTick>
 800246c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fd96 	bl	8000fa0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b0a      	cmp	r3, #10
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e083      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002482:	f7ff fc73 	bl	8001d6c <LL_RCC_PLL_IsReady>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f1      	bne.n	8002470 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x6fc>)
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024a4:	0212      	lsls	r2, r2, #8
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024b8:	430a      	orrs	r2, r1
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024be:	4313      	orrs	r3, r2
 80024c0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c2:	f7ff fc37 	bl	8001d34 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fd63 	bl	8000fa0 <HAL_GetTick>
 80024da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fd5f 	bl	8000fa0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e04c      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80024f0:	f7ff fc3c 	bl	8001d6c <LL_RCC_PLL_IsReady>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f1      	beq.n	80024de <HAL_RCC_OscConfig+0x646>
 80024fa:	e045      	b.n	8002588 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	f7ff fc28 	bl	8001d50 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fd4e 	bl	8000fa0 <HAL_GetTick>
 8002504:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fd4a 	bl	8000fa0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b0a      	cmp	r3, #10
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e037      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800251a:	f7ff fc27 	bl	8001d6c <LL_RCC_PLL_IsReady>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f1      	bne.n	8002508 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252e:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_RCC_OscConfig+0x700>)
 8002530:	4013      	ands	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
 8002534:	e028      	b.n	8002588 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e023      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002554:	429a      	cmp	r2, r3
 8002556:	d115      	bne.n	8002584 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	429a      	cmp	r2, r3
 8002564:	d10e      	bne.n	8002584 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	429a      	cmp	r2, r3
 8002574:	d106      	bne.n	8002584 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	11c1808c 	.word	0x11c1808c
 8002598:	eefefffc 	.word	0xeefefffc

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e12c      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b98      	ldr	r3, [pc, #608]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d91b      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b95      	ldr	r3, [pc, #596]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4993      	ldr	r1, [pc, #588]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ce:	f7fe fce7 	bl	8000fa0 <HAL_GetTick>
 80025d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025d6:	f7fe fce3 	bl	8000fa0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e110      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d1ef      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fb02 	bl	8001c10 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800260c:	f7fe fcc8 	bl	8000fa0 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002614:	f7fe fcc4 	bl	8000fa0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0f1      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002626:	f7ff fbdf 	bl	8001de8 <LL_RCC_IsActiveFlag_HPRE>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f1      	beq.n	8002614 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d016      	beq.n	800266a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff faf8 	bl	8001c36 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002646:	f7fe fcab 	bl	8000fa0 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800264e:	f7fe fca7 	bl	8000fa0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0d4      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002660:	f7ff fbd3 	bl	8001e0a <LL_RCC_IsActiveFlag_C2HPRE>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f1      	beq.n	800264e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff faf0 	bl	8001c60 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002680:	f7fe fc8e 	bl	8000fa0 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002688:	f7fe fc8a 	bl	8000fa0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e0b7      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800269a:	f7ff fbc8 	bl	8001e2e <LL_RCC_IsActiveFlag_SHDHPRE>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f1      	beq.n	8002688 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d016      	beq.n	80026de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fae9 	bl	8001c8c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026ba:	f7fe fc71 	bl	8000fa0 <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026c2:	f7fe fc6d 	bl	8000fa0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e09a      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026d4:	f7ff fbbd 	bl	8001e52 <LL_RCC_IsActiveFlag_PPRE1>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f1      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d017      	beq.n	800271a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fade 	bl	8001cb2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fc53 	bl	8000fa0 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026fe:	f7fe fc4f 	bl	8000fa0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e07c      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002710:	f7ff fbb0 	bl	8001e74 <LL_RCC_IsActiveFlag_PPRE2>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f1      	beq.n	80026fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d043      	beq.n	80027ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d106      	bne.n	800273c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800272e:	f7ff f956 	bl	80019de <LL_RCC_HSE_IsReady>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11e      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e066      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d106      	bne.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002744:	f7ff fb12 	bl	8001d6c <LL_RCC_PLL_IsReady>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e05b      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800275a:	f7ff f9f0 	bl	8001b3e <LL_RCC_MSI_IsReady>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e050      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002768:	f7ff f966 	bl	8001a38 <LL_RCC_HSI_IsReady>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e049      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fa2a 	bl	8001bd4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fc0e 	bl	8000fa0 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fc0a 	bl	8000fa0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e035      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	f7ff fa2c 	bl	8001bfa <LL_RCC_GetSysClkSource>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d1ec      	bne.n	8002788 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ae:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d21b      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027bc:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 0207 	bic.w	r2, r3, #7
 80027c4:	4913      	ldr	r1, [pc, #76]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fbe8 	bl	8000fa0 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027d4:	f7fe fbe4 	bl	8000fa0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e011      	b.n	800280a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_ClockConfig+0x278>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1ef      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027f4:	f000 f8b4 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a07      	ldr	r2, [pc, #28]	@ (8002818 <HAL_RCC_ClockConfig+0x27c>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_RCC_ClockConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fcea 	bl	80011dc <HAL_InitTick>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	58004000 	.word	0x58004000
 8002818:	20000004 	.word	0x20000004
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282e:	f7ff f9e4 	bl	8001bfa <LL_RCC_GetSysClkSource>
 8002832:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002834:	f7ff facd 	bl	8001dd2 <LL_RCC_PLL_GetMainSource>
 8002838:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x2c>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d139      	bne.n	80028ba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d136      	bne.n	80028ba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800284c:	f7ff f987 	bl	8001b5e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d115      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x62>
 8002856:	f7ff f982 	bl	8001b5e <LL_RCC_MSI_IsEnabledRangeSelect>
 800285a:	4603      	mov	r3, r0
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x4e>
 8002860:	f7ff f98d 	bl	8001b7e <LL_RCC_MSI_GetRange>
 8002864:	4603      	mov	r3, r0
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	e005      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x5a>
 800286e:	f7ff f991 	bl	8001b94 <LL_RCC_MSI_GetRangeAfterStandby>
 8002872:	4603      	mov	r3, r0
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	4a36      	ldr	r2, [pc, #216]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x134>)
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	e014      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x8c>
 8002882:	f7ff f96c 	bl	8001b5e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002886:	4603      	mov	r3, r0
 8002888:	2b01      	cmp	r3, #1
 800288a:	d106      	bne.n	800289a <HAL_RCC_GetSysClockFreq+0x7a>
 800288c:	f7ff f977 	bl	8001b7e <LL_RCC_MSI_GetRange>
 8002890:	4603      	mov	r3, r0
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	e005      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x86>
 800289a:	f7ff f97b 	bl	8001b94 <LL_RCC_MSI_GetRangeAfterStandby>
 800289e:	4603      	mov	r3, r0
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002954 <HAL_RCC_GetSysClockFreq+0x134>)
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d115      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028b8:	e012      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d102      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x138>)
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e00c      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d109      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028cc:	f7ff f85a 	bl	8001984 <LL_RCC_HSE_IsEnabledDiv2>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x138>)
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e001      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <HAL_RCC_GetSysClockFreq+0x13c>)
 80028de:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	f7ff f98b 	bl	8001bfa <LL_RCC_GetSysClkSource>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d12f      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80028ea:	f7ff fa72 	bl	8001dd2 <LL_RCC_PLL_GetMainSource>
 80028ee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0xde>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d003      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0xe4>
 80028fc:	e00d      	b.n	800291a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80028fe:	4b16      	ldr	r3, [pc, #88]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x138>)
 8002900:	60fb      	str	r3, [r7, #12]
        break;
 8002902:	e00d      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002904:	f7ff f83e 	bl	8001984 <LL_RCC_HSE_IsEnabledDiv2>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800290e:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x138>)
 8002910:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002912:	e005      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002916:	60fb      	str	r3, [r7, #12]
        break;
 8002918:	e002      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	60fb      	str	r3, [r7, #12]
        break;
 800291e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002920:	f7ff fa35 	bl	8001d8e <LL_RCC_PLL_GetN>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	fb03 f402 	mul.w	r4, r3, r2
 800292c:	f7ff fa46 	bl	8001dbc <LL_RCC_PLL_GetDivider>
 8002930:	4603      	mov	r3, r0
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	3301      	adds	r3, #1
 8002936:	fbb4 f4f3 	udiv	r4, r4, r3
 800293a:	f7ff fa34 	bl	8001da6 <LL_RCC_PLL_GetR>
 800293e:	4603      	mov	r3, r0
 8002940:	0f5b      	lsrs	r3, r3, #29
 8002942:	3301      	adds	r3, #1
 8002944:	fbb4 f3f3 	udiv	r3, r4, r3
 8002948:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800294a:	697b      	ldr	r3, [r7, #20]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}
 8002954:	0800a7c4 	.word	0x0800a7c4
 8002958:	00f42400 	.word	0x00f42400
 800295c:	01e84800 	.word	0x01e84800

08002960 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b598      	push	{r3, r4, r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002964:	f7ff ff5c 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8002968:	4604      	mov	r4, r0
 800296a:	f7ff f9b5 	bl	8001cd8 <LL_RCC_GetAHBPrescaler>
 800296e:	4603      	mov	r3, r0
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4a03      	ldr	r2, [pc, #12]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x24>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd98      	pop	{r3, r4, r7, pc}
 8002984:	0800a764 	.word	0x0800a764

08002988 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b598      	push	{r3, r4, r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800298c:	f7ff ffe8 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002990:	4604      	mov	r4, r0
 8002992:	f7ff f9b9 	bl	8001d08 <LL_RCC_GetAPB1Prescaler>
 8002996:	4603      	mov	r3, r0
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	4a03      	ldr	r2, [pc, #12]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd98      	pop	{r3, r4, r7, pc}
 80029a8:	0800a7a4 	.word	0x0800a7a4

080029ac <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b598      	push	{r3, r4, r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029b0:	f7ff ffd6 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029b4:	4604      	mov	r4, r0
 80029b6:	f7ff f9b2 	bl	8001d1e <LL_RCC_GetAPB2Prescaler>
 80029ba:	4603      	mov	r3, r0
 80029bc:	0adb      	lsrs	r3, r3, #11
 80029be:	4a03      	ldr	r2, [pc, #12]	@ (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd98      	pop	{r3, r4, r7, pc}
 80029cc:	0800a7a4 	.word	0x0800a7a4

080029d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80029e8:	f7ff f981 	bl	8001cee <LL_RCC_GetAHB3Prescaler>
 80029ec:	4603      	mov	r3, r0
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9c      	lsrs	r4, r3, #18
 8002a0c:	f7fe ff80 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4620      	mov	r0, r4
 8002a16:	f000 f80b 	bl	8002a30 <RCC_SetFlashLatency>
 8002a1a:	4603      	mov	r3, r0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	0800a7c4 	.word	0x0800a7c4
 8002a28:	0800a764 	.word	0x0800a764
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08e      	sub	sp, #56	@ 0x38
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b24 <RCC_SetFlashLatency+0xf4>)
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a44:	6018      	str	r0, [r3, #0]
 8002a46:	3304      	adds	r3, #4
 8002a48:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002a4a:	4a37      	ldr	r2, [pc, #220]	@ (8002b28 <RCC_SetFlashLatency+0xf8>)
 8002a4c:	f107 0318 	add.w	r3, r7, #24
 8002a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a54:	6018      	str	r0, [r3, #0]
 8002a56:	3304      	adds	r3, #4
 8002a58:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002a5a:	4a34      	ldr	r2, [pc, #208]	@ (8002b2c <RCC_SetFlashLatency+0xfc>)
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a70:	d11b      	bne.n	8002aaa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a76:	e014      	b.n	8002aa2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	3338      	adds	r3, #56	@ 0x38
 8002a7e:	443b      	add	r3, r7
 8002a80:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d807      	bhi.n	8002a9c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	3338      	adds	r3, #56	@ 0x38
 8002a92:	443b      	add	r3, r7
 8002a94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a9a:	e021      	b.n	8002ae0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d9e7      	bls.n	8002a78 <RCC_SetFlashLatency+0x48>
 8002aa8:	e01a      	b.n	8002ae0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aae:	e014      	b.n	8002ada <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	3338      	adds	r3, #56	@ 0x38
 8002ab6:	443b      	add	r3, r7
 8002ab8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d807      	bhi.n	8002ad4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	3338      	adds	r3, #56	@ 0x38
 8002aca:	443b      	add	r3, r7
 8002acc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ad2:	e005      	b.n	8002ae0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d9e7      	bls.n	8002ab0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <RCC_SetFlashLatency+0x100>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 0207 	bic.w	r2, r3, #7
 8002ae8:	4911      	ldr	r1, [pc, #68]	@ (8002b30 <RCC_SetFlashLatency+0x100>)
 8002aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002af0:	f7fe fa56 	bl	8000fa0 <HAL_GetTick>
 8002af4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002af6:	e008      	b.n	8002b0a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002af8:	f7fe fa52 	bl	8000fa0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e007      	b.n	8002b1a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <RCC_SetFlashLatency+0x100>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1ef      	bne.n	8002af8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3738      	adds	r7, #56	@ 0x38
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	0800a724 	.word	0x0800a724
 8002b28:	0800a72c 	.word	0x0800a72c
 8002b2c:	0800a734 	.word	0x0800a734
 8002b30:	58004000 	.word	0x58004000

08002b34 <LL_RCC_LSE_IsReady>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d101      	bne.n	8002b4c <LL_RCC_LSE_IsReady+0x18>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <LL_RCC_LSE_IsReady+0x1a>
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <LL_RCC_SetUSARTClockSource>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_RCC_SetI2SClockSource>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <LL_RCC_SetLPUARTClockSource>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002bc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_SetI2CClockSource>:
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_SetLPTIMClockSource>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_SetRNGClockSource>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c54:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <LL_RCC_SetADCClockSource>:
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_SetRTCClockSource>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_GetRTCClockSource>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_ForceBackupDomainReset>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002d28:	2300      	movs	r3, #0
 8002d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d058      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002d3c:	f7fe fdda 	bl	80018f4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d40:	f7fe f92e 	bl	8000fa0 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d46:	e009      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe f92a 	bl	8000fa0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d902      	bls.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	74fb      	strb	r3, [r7, #19]
        break;
 8002d5a:	e006      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d68:	d1ee      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d13c      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002d70:	f7ff ffa7 	bl	8002cc2 <LL_RCC_GetRTCClockSource>
 8002d74:	4602      	mov	r2, r0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d00f      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d8c:	f7ff ffa5 	bl	8002cda <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	f7ff ffb3 	bl	8002cfa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d014      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f8fa 	bl	8000fa0 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f8f6 	bl	8000fa0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	74fb      	strb	r3, [r7, #19]
            break;
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002dc8:	f7ff feb4 	bl	8002b34 <LL_RCC_LSE_IsReady>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff5b 	bl	8002c98 <LL_RCC_SetRTCClockSource>
 8002de2:	e004      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
 8002de8:	e001      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d004      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fea9 	bl	8002b56 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fe9e 	bl	8002b56 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fec0 	bl	8002bb0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fee6 	bl	8002c12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fedb 	bl	8002c12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fed0 	bl	8002c12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fea9 	bl	8002bda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fe9e 	bl	8002bda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d004      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fe93 	bl	8002bda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d011      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fe5e 	bl	8002b86 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ee2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fea5 	bl	8002c44 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f10:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d011      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fea3 	bl	8002c6e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f30:	d107      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f40:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002f42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58000400 	.word	0x58000400

08002f50 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002f60:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	58000400 	.word	0x58000400

08002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a04      	ldr	r2, [pc, #16]	@ (8002f94 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	58000400 	.word	0x58000400

08002f98 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	58000400 	.word	0x58000400

08002fb8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002fbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fc2:	619a      	str	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	58000400 	.word	0x58000400

08002fd0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d101      	bne.n	8002fe4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	58000400 	.word	0x58000400

08002ff4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d101      	bne.n	8003008 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	58000400 	.word	0x58000400

08003018 <LL_RCC_RF_DisableReset>:
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003028:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800302c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <LL_RCC_IsRFUnderReset>:
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800304c:	d101      	bne.n	8003052 <LL_RCC_IsRFUnderReset+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_RCC_IsRFUnderReset+0x1c>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003064:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <LL_EXTI_EnableIT_32_63+0x24>)
 8003066:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800306a:	4905      	ldr	r1, [pc, #20]	@ (8003080 <LL_EXTI_EnableIT_32_63+0x24>)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	58000800 	.word	0x58000800

08003084 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
    return status;
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	e052      	b.n	8003140 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	799b      	ldrb	r3, [r3, #6]
 80030a2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80030a4:	7bbb      	ldrb	r3, [r7, #14]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SUBGHZ_Init+0x2c>
 80030aa:	7bbb      	ldrb	r3, [r7, #14]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d109      	bne.n	80030c4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fe5a 	bl	8000d70 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80030bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80030c0:	f7ff ffcc 	bl	800305c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80030c4:	7bbb      	ldrb	r3, [r7, #14]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d126      	bne.n	8003118 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80030d0:	f7ff ffa2 	bl	8003018 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <HAL_SUBGHZ_Init+0xc4>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	0cdb      	lsrs	r3, r3, #19
 80030e2:	2264      	movs	r2, #100	@ 0x64
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	609a      	str	r2, [r3, #8]
        break;
 80030fa:	e007      	b.n	800310c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3b01      	subs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003102:	f7ff ff99 	bl	8003038 <LL_RCC_IsRFUnderReset>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ee      	bne.n	80030ea <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800310c:	f7ff ff34 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003110:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003114:	f7ff ff1c 	bl	8002f50 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003118:	f7ff ff4e 	bl	8002fb8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 faac 	bl	8003684 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	719a      	strb	r2, [r3, #6]

  return status;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	460b      	mov	r3, r1
 800315a:	817b      	strh	r3, [r7, #10]
 800315c:	4613      	mov	r3, r2
 800315e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	799b      	ldrb	r3, [r3, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d14a      	bne.n	8003200 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	795b      	ldrb	r3, [r3, #5]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003172:	2302      	movs	r3, #2
 8003174:	e045      	b.n	8003202 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2202      	movs	r2, #2
 8003180:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fb4c 	bl	8003820 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003188:	f7ff ff06 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800318c:	210d      	movs	r1, #13
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa98 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003194:	897b      	ldrh	r3, [r7, #10]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa90 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80031a4:	897b      	ldrh	r3, [r7, #10]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fa8a 	bl	80036c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	82bb      	strh	r3, [r7, #20]
 80031b4:	e00a      	b.n	80031cc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80031b6:	8abb      	ldrh	r3, [r7, #20]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fa7f 	bl	80036c4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80031c6:	8abb      	ldrh	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	82bb      	strh	r3, [r7, #20]
 80031cc:	8aba      	ldrh	r2, [r7, #20]
 80031ce:	893b      	ldrh	r3, [r7, #8]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3f0      	bcc.n	80031b6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80031d4:	f7ff fed0 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb45 	bl	8003868 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
 80031ea:	e001      	b.n	80031f0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	715a      	strb	r2, [r3, #5]

    return status;
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	e000      	b.n	8003202 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
  }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b088      	sub	sp, #32
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	461a      	mov	r2, r3
 8003216:	460b      	mov	r3, r1
 8003218:	817b      	strh	r3, [r7, #10]
 800321a:	4613      	mov	r3, r2
 800321c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	799b      	ldrb	r3, [r3, #6]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d14a      	bne.n	80032c2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	795b      	ldrb	r3, [r3, #5]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003234:	2302      	movs	r3, #2
 8003236:	e045      	b.n	80032c4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 faee 	bl	8003820 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003244:	f7ff fea8 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003248:	211d      	movs	r1, #29
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fa3a 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	b29b      	uxth	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa32 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fa2c 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800326c:	2100      	movs	r1, #0
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fa28 	bl	80036c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	82fb      	strh	r3, [r7, #22]
 8003278:	e009      	b.n	800328e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 fa77 	bl	8003770 <SUBGHZSPI_Receive>
      pData++;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3301      	adds	r3, #1
 8003286:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003288:	8afb      	ldrh	r3, [r7, #22]
 800328a:	3301      	adds	r3, #1
 800328c:	82fb      	strh	r3, [r7, #22]
 800328e:	8afa      	ldrh	r2, [r7, #22]
 8003290:	893b      	ldrh	r3, [r7, #8]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3f1      	bcc.n	800327a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003296:	f7ff fe6f 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fae4 	bl	8003868 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e001      	b.n	80032b2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	715a      	strb	r2, [r3, #5]

    return status;
 80032be:	7ffb      	ldrb	r3, [r7, #31]
 80032c0:	e000      	b.n	80032c4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	461a      	mov	r2, r3
 80032d8:	460b      	mov	r3, r1
 80032da:	72fb      	strb	r3, [r7, #11]
 80032dc:	4613      	mov	r3, r2
 80032de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	799b      	ldrb	r3, [r3, #6]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d14a      	bne.n	8003380 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	795b      	ldrb	r3, [r3, #5]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e045      	b.n	8003382 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fa8f 	bl	8003820 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	2b84      	cmp	r3, #132	@ 0x84
 8003306:	d002      	beq.n	800330e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	2b94      	cmp	r3, #148	@ 0x94
 800330c:	d103      	bne.n	8003316 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	711a      	strb	r2, [r3, #4]
 8003314:	e002      	b.n	800331c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800331c:	f7ff fe3c 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003320:	7afb      	ldrb	r3, [r7, #11]
 8003322:	4619      	mov	r1, r3
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f9cd 	bl	80036c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	82bb      	strh	r3, [r7, #20]
 800332e:	e00a      	b.n	8003346 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003330:	8abb      	ldrh	r3, [r7, #20]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	4619      	mov	r1, r3
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f9c2 	bl	80036c4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003340:	8abb      	ldrh	r3, [r7, #20]
 8003342:	3301      	adds	r3, #1
 8003344:	82bb      	strh	r3, [r7, #20]
 8003346:	8aba      	ldrh	r2, [r7, #20]
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d3f0      	bcc.n	8003330 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800334e:	f7ff fe13 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	2b84      	cmp	r3, #132	@ 0x84
 8003356:	d002      	beq.n	800335e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fa85 	bl	8003868 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
 800336a:	e001      	b.n	8003370 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	715a      	strb	r2, [r3, #5]

    return status;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	e000      	b.n	8003382 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b088      	sub	sp, #32
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	461a      	mov	r2, r3
 8003396:	460b      	mov	r3, r1
 8003398:	72fb      	strb	r3, [r7, #11]
 800339a:	4613      	mov	r3, r2
 800339c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	799b      	ldrb	r3, [r3, #6]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d13d      	bne.n	8003428 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	795b      	ldrb	r3, [r3, #5]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e038      	b.n	800342a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa2e 	bl	8003820 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80033c4:	f7ff fde8 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80033c8:	7afb      	ldrb	r3, [r7, #11]
 80033ca:	4619      	mov	r1, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f979 	bl	80036c4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80033d2:	2100      	movs	r1, #0
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f975 	bl	80036c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	82fb      	strh	r3, [r7, #22]
 80033de:	e009      	b.n	80033f4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f9c4 	bl	8003770 <SUBGHZSPI_Receive>
      pData++;
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	3301      	adds	r3, #1
 80033ec:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80033ee:	8afb      	ldrh	r3, [r7, #22]
 80033f0:	3301      	adds	r3, #1
 80033f2:	82fb      	strh	r3, [r7, #22]
 80033f4:	8afa      	ldrh	r2, [r7, #22]
 80033f6:	893b      	ldrh	r3, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3f1      	bcc.n	80033e0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80033fc:	f7ff fdbc 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fa31 	bl	8003868 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e001      	b.n	8003418 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	715a      	strb	r2, [r3, #5]

    return status;
 8003424:	7ffb      	ldrb	r3, [r7, #31]
 8003426:	e000      	b.n	800342a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	461a      	mov	r2, r3
 800343e:	460b      	mov	r3, r1
 8003440:	72fb      	strb	r3, [r7, #11]
 8003442:	4613      	mov	r3, r2
 8003444:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	799b      	ldrb	r3, [r3, #6]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d13e      	bne.n	80034ce <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	795b      	ldrb	r3, [r3, #5]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003458:	2302      	movs	r3, #2
 800345a:	e039      	b.n	80034d0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f9dc 	bl	8003820 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003468:	f7ff fd96 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800346c:	210e      	movs	r1, #14
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f928 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003474:	7afb      	ldrb	r3, [r7, #11]
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f923 	bl	80036c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	82bb      	strh	r3, [r7, #20]
 8003482:	e00a      	b.n	800349a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003484:	8abb      	ldrh	r3, [r7, #20]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f918 	bl	80036c4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003494:	8abb      	ldrh	r3, [r7, #20]
 8003496:	3301      	adds	r3, #1
 8003498:	82bb      	strh	r3, [r7, #20]
 800349a:	8aba      	ldrh	r2, [r7, #20]
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3f0      	bcc.n	8003484 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034a2:	f7ff fd69 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f9de 	bl	8003868 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
 80034b8:	e001      	b.n	80034be <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	715a      	strb	r2, [r3, #5]

    return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	e000      	b.n	80034d0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	461a      	mov	r2, r3
 80034e4:	460b      	mov	r3, r1
 80034e6:	72fb      	strb	r3, [r7, #11]
 80034e8:	4613      	mov	r3, r2
 80034ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	799b      	ldrb	r3, [r3, #6]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d141      	bne.n	800357e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	795b      	ldrb	r3, [r3, #5]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003502:	2302      	movs	r3, #2
 8003504:	e03c      	b.n	8003580 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f987 	bl	8003820 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003512:	f7ff fd41 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003516:	211e      	movs	r1, #30
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f8d3 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	4619      	mov	r1, r3
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f8ce 	bl	80036c4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003528:	2100      	movs	r1, #0
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f8ca 	bl	80036c4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	82fb      	strh	r3, [r7, #22]
 8003534:	e009      	b.n	800354a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003536:	69b9      	ldr	r1, [r7, #24]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f919 	bl	8003770 <SUBGHZSPI_Receive>
      pData++;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	3301      	adds	r3, #1
 8003542:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003544:	8afb      	ldrh	r3, [r7, #22]
 8003546:	3301      	adds	r3, #1
 8003548:	82fb      	strh	r3, [r7, #22]
 800354a:	8afa      	ldrh	r2, [r7, #22]
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	429a      	cmp	r2, r3
 8003550:	d3f1      	bcc.n	8003536 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003552:	f7ff fd11 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f986 	bl	8003868 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e001      	b.n	800356e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	715a      	strb	r2, [r3, #5]

    return status;
 800357a:	7ffb      	ldrb	r3, [r7, #31]
 800357c:	e000      	b.n	8003580 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003590:	2300      	movs	r3, #0
 8003592:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003594:	f107 020c 	add.w	r2, r7, #12
 8003598:	2302      	movs	r3, #2
 800359a:	2112      	movs	r1, #18
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fef4 	bl	800338a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80035a2:	7b3b      	ldrb	r3, [r7, #12]
 80035a4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80035a6:	89fb      	ldrh	r3, [r7, #14]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	b21a      	sxth	r2, r3
 80035ac:	7b7b      	ldrb	r3, [r7, #13]
 80035ae:	b21b      	sxth	r3, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80035b6:	f107 020c 	add.w	r2, r7, #12
 80035ba:	2302      	movs	r3, #2
 80035bc:	2102      	movs	r1, #2
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fe84 	bl	80032cc <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80035c4:	89fb      	ldrh	r3, [r7, #14]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f005 fe56 	bl	8009280 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f005 fe5c 	bl	800929c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80035e4:	89fb      	ldrh	r3, [r7, #14]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f005 feac 	bl	800934c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80035f4:	89fb      	ldrh	r3, [r7, #14]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f005 feb2 	bl	8009368 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003604:	89fb      	ldrh	r3, [r7, #14]
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f005 feb8 	bl	8009384 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003614:	89fb      	ldrh	r3, [r7, #14]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f005 fe86 	bl	8009330 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 fe42 	bl	80092b8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003634:	89fb      	ldrh	r3, [r7, #14]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800363e:	89fb      	ldrh	r3, [r7, #14]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003648:	2101      	movs	r1, #1
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f005 fe42 	bl	80092d4 <HAL_SUBGHZ_CADStatusCallback>
 8003650:	e003      	b.n	800365a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003652:	2100      	movs	r1, #0
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f005 fe3d 	bl	80092d4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f005 fe53 	bl	8009310 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800366a:	89fb      	ldrh	r3, [r7, #14]
 800366c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f005 fe93 	bl	80093a0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <SUBGHZSPI_Init+0x3c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0b      	ldr	r2, [pc, #44]	@ (80036c0 <SUBGHZSPI_Init+0x3c>)
 8003692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003696:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003698:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <SUBGHZSPI_Init+0x3c>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80036a0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80036a2:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <SUBGHZSPI_Init+0x3c>)
 80036a4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80036a8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80036aa:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <SUBGHZSPI_Init+0x3c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <SUBGHZSPI_Init+0x3c>)
 80036b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036b4:	6013      	str	r3, [r2, #0]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	58010000 	.word	0x58010000

080036c4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80036d4:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <SUBGHZSPI_Transmit+0xa0>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	0cdb      	lsrs	r3, r3, #19
 80036e2:	2264      	movs	r2, #100	@ 0x64
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	609a      	str	r2, [r3, #8]
      break;
 80036fa:	e008      	b.n	800370e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3b01      	subs	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003702:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <SUBGHZSPI_Transmit+0xa4>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d1ed      	bne.n	80036ea <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800370e:	4b17      	ldr	r3, [pc, #92]	@ (800376c <SUBGHZSPI_Transmit+0xa8>)
 8003710:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003718:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <SUBGHZSPI_Transmit+0xa0>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	0cdb      	lsrs	r3, r3, #19
 8003726:	2264      	movs	r2, #100	@ 0x64
 8003728:	fb02 f303 	mul.w	r3, r2, r3
 800372c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d105      	bne.n	8003740 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	609a      	str	r2, [r3, #8]
      break;
 800373e:	e008      	b.n	8003752 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3b01      	subs	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003746:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <SUBGHZSPI_Transmit+0xa4>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d1ed      	bne.n	800372e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <SUBGHZSPI_Transmit+0xa4>)
 8003754:	68db      	ldr	r3, [r3, #12]

  return status;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000004 	.word	0x20000004
 8003768:	58010000 	.word	0x58010000
 800376c:	5801000c 	.word	0x5801000c

08003770 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800377e:	4b25      	ldr	r3, [pc, #148]	@ (8003814 <SUBGHZSPI_Receive+0xa4>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	0cdb      	lsrs	r3, r3, #19
 800378c:	2264      	movs	r2, #100	@ 0x64
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	609a      	str	r2, [r3, #8]
      break;
 80037a4:	e008      	b.n	80037b8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <SUBGHZSPI_Receive+0xa8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d1ed      	bne.n	8003794 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80037b8:	4b18      	ldr	r3, [pc, #96]	@ (800381c <SUBGHZSPI_Receive+0xac>)
 80037ba:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	22ff      	movs	r2, #255	@ 0xff
 80037c0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80037c2:	4b14      	ldr	r3, [pc, #80]	@ (8003814 <SUBGHZSPI_Receive+0xa4>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4613      	mov	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	0cdb      	lsrs	r3, r3, #19
 80037d0:	2264      	movs	r2, #100	@ 0x64
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	609a      	str	r2, [r3, #8]
      break;
 80037e8:	e008      	b.n	80037fc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80037f0:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <SUBGHZSPI_Receive+0xa8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d1ed      	bne.n	80037d8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <SUBGHZSPI_Receive+0xa8>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	701a      	strb	r2, [r3, #0]

  return status;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
}
 8003808:	4618      	mov	r0, r3
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000004 	.word	0x20000004
 8003818:	58010000 	.word	0x58010000
 800381c:	5801000c 	.word	0x5801000c

08003820 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d111      	bne.n	8003854 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <SUBGHZ_CheckDeviceReady+0x44>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003840:	f7ff fbaa 	bl	8002f98 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3b01      	subs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f9      	bne.n	8003844 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003850:	f7ff fb92 	bl	8002f78 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f807 	bl	8003868 <SUBGHZ_WaitOnBusy>
 800385a:	4603      	mov	r3, r0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000004 	.word	0x20000004

08003868 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <SUBGHZ_WaitOnBusy+0x58>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	0d1b      	lsrs	r3, r3, #20
 8003882:	2264      	movs	r2, #100	@ 0x64
 8003884:	fb02 f303 	mul.w	r3, r2, r3
 8003888:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800388a:	f7ff fbb3 	bl	8002ff4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800388e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	609a      	str	r2, [r3, #8]
      break;
 80038a0:	e009      	b.n	80038b6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80038a8:	f7ff fb92 	bl	8002fd0 <LL_PWR_IsActiveFlag_RFBUSYS>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d0e9      	beq.n	800388a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000004 	.word	0x20000004

080038c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e049      	b.n	800396a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd fa54 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 fa90 	bl	8003e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e02e      	b.n	80039ea <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a16      	ldr	r2, [pc, #88]	@ (80039f4 <HAL_TIM_Base_Start+0x80>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_TIM_Base_Start+0x34>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a6:	d115      	bne.n	80039d4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <HAL_TIM_Base_Start+0x84>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d015      	beq.n	80039e6 <HAL_TIM_Base_Start+0x72>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c0:	d011      	beq.n	80039e6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	e008      	b.n	80039e6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e000      	b.n	80039e8 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	00010007 	.word	0x00010007

080039fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0202 	mvn.w	r2, #2
 8003a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9d6 	bl	8003df0 <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f9c9 	bl	8003dde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f9d8 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0204 	mvn.w	r2, #4
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9ac 	bl	8003df0 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f99f 	bl	8003dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9ae 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d122      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d11b      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0208 	mvn.w	r2, #8
 8003ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f982 	bl	8003df0 <HAL_TIM_IC_CaptureCallback>
 8003aec:	e005      	b.n	8003afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f975 	bl	8003dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f984 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0310 	and.w	r3, r3, #16
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0210 	mvn.w	r2, #16
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f958 	bl	8003df0 <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f94b 	bl	8003dde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f95a 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10e      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0201 	mvn.w	r2, #1
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f926 	bl	8003dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8a:	2b80      	cmp	r3, #128	@ 0x80
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b98:	2b80      	cmp	r3, #128	@ 0x80
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa9f 	bl	80040ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bba:	d10e      	bne.n	8003bda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc6:	2b80      	cmp	r3, #128	@ 0x80
 8003bc8:	d107      	bne.n	8003bda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa91 	bl	80040fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d10e      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d107      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f907 	bl	8003e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0220 	mvn.w	r2, #32
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fa53 	bl	80040d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_ConfigClockSource+0x1c>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0b6      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x18a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003c74:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c80:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c92:	d03e      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0xd8>
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c98:	f200 8087 	bhi.w	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca0:	f000 8086 	beq.w	8003db0 <HAL_TIM_ConfigClockSource+0x176>
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca8:	d87f      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003caa:	2b70      	cmp	r3, #112	@ 0x70
 8003cac:	d01a      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xaa>
 8003cae:	2b70      	cmp	r3, #112	@ 0x70
 8003cb0:	d87b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cb2:	2b60      	cmp	r3, #96	@ 0x60
 8003cb4:	d050      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0x11e>
 8003cb6:	2b60      	cmp	r3, #96	@ 0x60
 8003cb8:	d877      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cba:	2b50      	cmp	r3, #80	@ 0x50
 8003cbc:	d03c      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xfe>
 8003cbe:	2b50      	cmp	r3, #80	@ 0x50
 8003cc0:	d873      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cc2:	2b40      	cmp	r3, #64	@ 0x40
 8003cc4:	d058      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0x13e>
 8003cc6:	2b40      	cmp	r3, #64	@ 0x40
 8003cc8:	d86f      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cca:	2b30      	cmp	r3, #48	@ 0x30
 8003ccc:	d064      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003cce:	2b30      	cmp	r3, #48	@ 0x30
 8003cd0:	d86b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d060      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d867      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d05c      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d05a      	beq.n	8003d98 <HAL_TIM_ConfigClockSource+0x15e>
 8003ce2:	e062      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	f000 f973 	bl	8003fde <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
      break;
 8003d10:	e04f      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	f000 f95c 	bl	8003fde <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e03c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 f8d1 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2150      	movs	r1, #80	@ 0x50
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f928 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e02c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d64:	461a      	mov	r2, r3
 8003d66:	f000 f8ef 	bl	8003f48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2160      	movs	r1, #96	@ 0x60
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f918 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003d76:	e01c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d84:	461a      	mov	r2, r3
 8003d86:	f000 f8b1 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2140      	movs	r1, #64	@ 0x40
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f908 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003d96:	e00c      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 f8ff 	bl	8003fa6 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e003      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003db0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
	...

08003e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a29      	ldr	r2, [pc, #164]	@ (8003ee0 <TIM_Base_SetConfig+0xb8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0x20>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e46:	d108      	bne.n	8003e5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a20      	ldr	r2, [pc, #128]	@ (8003ee0 <TIM_Base_SetConfig+0xb8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00b      	beq.n	8003e7a <TIM_Base_SetConfig+0x52>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e68:	d007      	beq.n	8003e7a <TIM_Base_SetConfig+0x52>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <TIM_Base_SetConfig+0xbc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_Base_SetConfig+0x52>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <TIM_Base_SetConfig+0xc0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d108      	bne.n	8003e8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8003ee0 <TIM_Base_SetConfig+0xb8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0xa0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee4 <TIM_Base_SetConfig+0xbc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0xa0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <TIM_Base_SetConfig+0xc0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d103      	bne.n	8003ed0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800

08003eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 030a 	bic.w	r3, r3, #10
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f023 0210 	bic.w	r2, r3, #16
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	031b      	lsls	r3, r3, #12
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f043 0307 	orr.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	021a      	lsls	r2, r3, #8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	431a      	orrs	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4313      	orrs	r3, r2
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	609a      	str	r2, [r3, #8]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e04a      	b.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004064:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a11      	ldr	r2, [pc, #68]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409c:	d10c      	bne.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40012c00 	.word	0x40012c00

080040d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <LL_RCC_GetUSARTClockSource>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800411a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	401a      	ands	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	4313      	orrs	r3, r2
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <LL_RCC_GetLPUARTClockSource>:
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4013      	ands	r3, r2
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e042      	b.n	80041e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fc fe33 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2224      	movs	r2, #36	@ 0x24
 800417e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fc40 	bl	8004a18 <UART_SetConfig>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e022      	b.n	80041e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fea8 	bl	8004f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 ff2e 	bl	8005042 <UART_CheckIdleState>
 80041e6:	4603      	mov	r3, r0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	@ 0x28
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	2b20      	cmp	r3, #32
 8004208:	d173      	bne.n	80042f2 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_Transmit+0x26>
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06c      	b.n	80042f4 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2221      	movs	r2, #33	@ 0x21
 8004226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800422a:	f7fc feb9 	bl	8000fa0 <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	88fa      	ldrh	r2, [r7, #6]
 800423c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004248:	d108      	bne.n	800425c <HAL_UART_Transmit+0x6c>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e003      	b.n	8004264 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004264:	e02c      	b.n	80042c0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	2180      	movs	r1, #128	@ 0x80
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 ff34 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e039      	b.n	80042f4 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	3302      	adds	r3, #2
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	e007      	b.n	80042ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1cc      	bne.n	8004266 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	2140      	movs	r1, #64	@ 0x40
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 ff01 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e006      	b.n	80042f4 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	@ 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004310:	2b20      	cmp	r3, #32
 8004312:	d137      	bne.n	8004384 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_UART_Receive_IT+0x24>
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e030      	b.n	8004386 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <HAL_UART_Receive_IT+0x94>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d01f      	beq.n	8004374 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d018      	beq.n	8004374 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	613b      	str	r3, [r7, #16]
   return(result);
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004364:	69f9      	ldr	r1, [r7, #28]
 8004366:	6a3a      	ldr	r2, [r7, #32]
 8004368:	e841 2300 	strex	r3, r2, [r1]
 800436c:	61bb      	str	r3, [r7, #24]
   return(result);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1e6      	bne.n	8004342 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	461a      	mov	r2, r3
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 ff78 	bl	8005270 <UART_Start_Receive_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	e000      	b.n	8004386 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3728      	adds	r7, #40	@ 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40008000 	.word	0x40008000

08004394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0ba      	sub	sp, #232	@ 0xe8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80043be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80043c2:	4013      	ands	r3, r2
 80043c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80043c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11b      	bne.n	8004408 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 82e3 	beq.w	80049c4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
      }
      return;
 8004406:	e2dd      	b.n	80049c4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8123 	beq.w	8004658 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004412:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004416:	4b8d      	ldr	r3, [pc, #564]	@ (800464c <HAL_UART_IRQHandler+0x2b8>)
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800441e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004422:	4b8b      	ldr	r3, [pc, #556]	@ (8004650 <HAL_UART_IRQHandler+0x2bc>)
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8116 	beq.w	8004658 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d011      	beq.n	800445c <HAL_UART_IRQHandler+0xc8>
 8004438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2201      	movs	r2, #1
 800444a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004452:	f043 0201 	orr.w	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d011      	beq.n	800448c <HAL_UART_IRQHandler+0xf8>
 8004468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2202      	movs	r2, #2
 800447a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	f043 0204 	orr.w	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <HAL_UART_IRQHandler+0x128>
 8004498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00b      	beq.n	80044bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2204      	movs	r2, #4
 80044aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	f043 0202 	orr.w	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d017      	beq.n	80044f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80044d8:	4b5c      	ldr	r3, [pc, #368]	@ (800464c <HAL_UART_IRQHandler+0x2b8>)
 80044da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2208      	movs	r2, #8
 80044e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ee:	f043 0208 	orr.w	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <HAL_UART_IRQHandler+0x196>
 8004504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004508:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00c      	beq.n	800452a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8249 	beq.w	80049c8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d013      	beq.n	800456a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457e:	2b40      	cmp	r3, #64	@ 0x40
 8004580:	d005      	beq.n	800458e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800458a:	2b00      	cmp	r3, #0
 800458c:	d054      	beq.n	8004638 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 ff8e 	bl	80054b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d146      	bne.n	8004630 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1d9      	bne.n	80045a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d017      	beq.n	8004628 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fe:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <HAL_UART_IRQHandler+0x2c0>)
 8004600:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004608:	4618      	mov	r0, r3
 800460a:	f7fc ff9c 	bl	8001546 <HAL_DMA_Abort_IT>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d019      	beq.n	8004648 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004622:	4610      	mov	r0, r2
 8004624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004626:	e00f      	b.n	8004648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f9e0 	bl	80049ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462e:	e00b      	b.n	8004648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9dc 	bl	80049ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	e007      	b.n	8004648 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f9d8 	bl	80049ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004646:	e1bf      	b.n	80049c8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	bf00      	nop
    return;
 800464a:	e1bd      	b.n	80049c8 <HAL_UART_IRQHandler+0x634>
 800464c:	10000001 	.word	0x10000001
 8004650:	04000120 	.word	0x04000120
 8004654:	0800557b 	.word	0x0800557b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800465c:	2b01      	cmp	r3, #1
 800465e:	f040 8153 	bne.w	8004908 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 814c 	beq.w	8004908 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8145 	beq.w	8004908 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2210      	movs	r2, #16
 8004684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	f040 80bb 	bne.w	800480c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 818f 	beq.w	80049cc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f080 8187 	bcs.w	80049cc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 8087 	bne.w	80047ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004706:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800470a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004712:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800471e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1da      	bne.n	80046dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800474a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800474e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004752:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800475c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e1      	bne.n	8004726 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3308      	adds	r3, #8
 8004768:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004772:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800478c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e3      	bne.n	8004762 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b8:	f023 0310 	bic.w	r3, r3, #16
 80047bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e4      	bne.n	80047a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc fe50 	bl	800148a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	b29b      	uxth	r3, r3
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8fb 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800480a:	e0df      	b.n	80049cc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004818:	b29b      	uxth	r3, r3
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80d1 	beq.w	80049d0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800482e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80cc 	beq.w	80049d0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800484c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800485a:	647b      	str	r3, [r7, #68]	@ 0x44
 800485c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004862:	e841 2300 	strex	r3, r2, [r1]
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1e4      	bne.n	8004838 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	623b      	str	r3, [r7, #32]
   return(result);
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004896:	633a      	str	r2, [r7, #48]	@ 0x30
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800489c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e1      	bne.n	800486e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0310 	bic.w	r3, r3, #16
 80048d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	617b      	str	r3, [r7, #20]
   return(result);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e4      	bne.n	80048be <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f87d 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004906:	e063      	b.n	80049d0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <HAL_UART_IRQHandler+0x59e>
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f001 fb82 	bl	8006034 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004930:	e051      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800493e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800494a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800494e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800495a:	2b00      	cmp	r3, #0
 800495c:	d03a      	beq.n	80049d4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
    }
    return;
 8004966:	e035      	b.n	80049d4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_UART_IRQHandler+0x5f4>
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fe10 	bl	80055a6 <UART_EndTransmit_IT>
    return;
 8004986:	e026      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <HAL_UART_IRQHandler+0x614>
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004998:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 fb59 	bl	8006058 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049a6:	e016      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <HAL_UART_IRQHandler+0x642>
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da0c      	bge.n	80049d6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f001 fb42 	bl	8006046 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049c2:	e008      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
      return;
 80049c4:	bf00      	nop
 80049c6:	e006      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
    return;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
      return;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
      return;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <HAL_UART_IRQHandler+0x642>
    return;
 80049d4:	bf00      	nop
  }
}
 80049d6:	37e8      	adds	r7, #232	@ 0xe8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
	...

08004a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a1c:	b08c      	sub	sp, #48	@ 0x30
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b94      	ldr	r3, [pc, #592]	@ (8004c98 <UART_SetConfig+0x280>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a89      	ldr	r2, [pc, #548]	@ (8004c9c <UART_SetConfig+0x284>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a80:	4313      	orrs	r3, r2
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	f023 010f 	bic.w	r1, r3, #15
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a7a      	ldr	r2, [pc, #488]	@ (8004ca0 <UART_SetConfig+0x288>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d127      	bne.n	8004b0c <UART_SetConfig+0xf4>
 8004abc:	2003      	movs	r0, #3
 8004abe:	f7ff fb26 	bl	800410e <LL_RCC_GetUSARTClockSource>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d81b      	bhi.n	8004b04 <UART_SetConfig+0xec>
 8004acc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <UART_SetConfig+0xbc>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af5 	.word	0x08004af5
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aea:	e080      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af2:	e07c      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afa:	e078      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b02:	e074      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b0a:	e070      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a64      	ldr	r2, [pc, #400]	@ (8004ca4 <UART_SetConfig+0x28c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d138      	bne.n	8004b88 <UART_SetConfig+0x170>
 8004b16:	200c      	movs	r0, #12
 8004b18:	f7ff faf9 	bl	800410e <LL_RCC_GetUSARTClockSource>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d82c      	bhi.n	8004b80 <UART_SetConfig+0x168>
 8004b26:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <UART_SetConfig+0x114>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b61 	.word	0x08004b61
 8004b30:	08004b81 	.word	0x08004b81
 8004b34:	08004b81 	.word	0x08004b81
 8004b38:	08004b81 	.word	0x08004b81
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b81 	.word	0x08004b81
 8004b44:	08004b81 	.word	0x08004b81
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b69 	.word	0x08004b69
 8004b50:	08004b81 	.word	0x08004b81
 8004b54:	08004b81 	.word	0x08004b81
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b79 	.word	0x08004b79
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b66:	e042      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6e:	e03e      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b70:	2304      	movs	r3, #4
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b76:	e03a      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b78:	2308      	movs	r3, #8
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	e036      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b80:	2310      	movs	r3, #16
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b86:	e032      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a43      	ldr	r2, [pc, #268]	@ (8004c9c <UART_SetConfig+0x284>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d12a      	bne.n	8004be8 <UART_SetConfig+0x1d0>
 8004b92:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004b96:	f7ff facc 	bl	8004132 <LL_RCC_GetLPUARTClockSource>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba0:	d01a      	beq.n	8004bd8 <UART_SetConfig+0x1c0>
 8004ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba6:	d81b      	bhi.n	8004be0 <UART_SetConfig+0x1c8>
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bac:	d00c      	beq.n	8004bc8 <UART_SetConfig+0x1b0>
 8004bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb2:	d815      	bhi.n	8004be0 <UART_SetConfig+0x1c8>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <UART_SetConfig+0x1a8>
 8004bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bbc:	d008      	beq.n	8004bd0 <UART_SetConfig+0x1b8>
 8004bbe:	e00f      	b.n	8004be0 <UART_SetConfig+0x1c8>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	e012      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bce:	e00e      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd6:	e00a      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bde:	e006      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004be0:	2310      	movs	r3, #16
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be6:	e002      	b.n	8004bee <UART_SetConfig+0x1d6>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <UART_SetConfig+0x284>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	f040 80a4 	bne.w	8004d42 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d823      	bhi.n	8004c4a <UART_SetConfig+0x232>
 8004c02:	a201      	add	r2, pc, #4	@ (adr r2, 8004c08 <UART_SetConfig+0x1f0>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c3b 	.word	0x08004c3b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c4b 	.word	0x08004c4b
 8004c24:	08004c4b 	.word	0x08004c4b
 8004c28:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f7fd feac 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8004c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c32:	e010      	b.n	8004c56 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca8 <UART_SetConfig+0x290>)
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c38:	e00d      	b.n	8004c56 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fd fdf1 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8004c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c40:	e009      	b.n	8004c56 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c48:	e005      	b.n	8004c56 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8137 	beq.w	8004ecc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	4a12      	ldr	r2, [pc, #72]	@ (8004cac <UART_SetConfig+0x294>)
 8004c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d305      	bcc.n	8004c8e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c94:	e11a      	b.n	8004ecc <UART_SetConfig+0x4b4>
 8004c96:	bf00      	nop
 8004c98:	cfff69f3 	.word	0xcfff69f3
 8004c9c:	40008000 	.word	0x40008000
 8004ca0:	40013800 	.word	0x40013800
 8004ca4:	40004400 	.word	0x40004400
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	0800a830 	.word	0x0800a830
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	60fa      	str	r2, [r7, #12]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8004ef8 <UART_SetConfig+0x4e0>)
 8004cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cd2:	f7fb faa5 	bl	8000220 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	020b      	lsls	r3, r1, #8
 8004ce8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cec:	0202      	lsls	r2, r0, #8
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	6849      	ldr	r1, [r1, #4]
 8004cf2:	0849      	lsrs	r1, r1, #1
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	eb12 0804 	adds.w	r8, r2, r4
 8004cfe:	eb43 0905 	adc.w	r9, r3, r5
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	469a      	mov	sl, r3
 8004d0a:	4693      	mov	fp, r2
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	465b      	mov	r3, fp
 8004d10:	4640      	mov	r0, r8
 8004d12:	4649      	mov	r1, r9
 8004d14:	f7fb fa84 	bl	8000220 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d26:	d308      	bcc.n	8004d3a <UART_SetConfig+0x322>
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d2e:	d204      	bcs.n	8004d3a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e0c8      	b.n	8004ecc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d40:	e0c4      	b.n	8004ecc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4a:	d167      	bne.n	8004e1c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004d4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d828      	bhi.n	8004da6 <UART_SetConfig+0x38e>
 8004d54:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <UART_SetConfig+0x344>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d89 	.word	0x08004d89
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004da7 	.word	0x08004da7
 8004d6c:	08004d97 	.word	0x08004d97
 8004d70:	08004da7 	.word	0x08004da7
 8004d74:	08004da7 	.word	0x08004da7
 8004d78:	08004da7 	.word	0x08004da7
 8004d7c:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fd fe02 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8004d84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d86:	e014      	b.n	8004db2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fd fe10 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8004d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d8e:	e010      	b.n	8004db2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b5a      	ldr	r3, [pc, #360]	@ (8004efc <UART_SetConfig+0x4e4>)
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d94:	e00d      	b.n	8004db2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fd fd43 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8004d9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9c:	e009      	b.n	8004db2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004da4:	e005      	b.n	8004db2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8089 	beq.w	8004ecc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef8 <UART_SetConfig+0x4e0>)
 8004dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dcc:	005a      	lsls	r2, r3, #1
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	441a      	add	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d916      	bls.n	8004e14 <UART_SetConfig+0x3fc>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dec:	d212      	bcs.n	8004e14 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f023 030f 	bic.w	r3, r3, #15
 8004df6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	085b      	lsrs	r3, r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	8bfb      	ldrh	r3, [r7, #30]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	8bfa      	ldrh	r2, [r7, #30]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e05b      	b.n	8004ecc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e1a:	e057      	b.n	8004ecc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d828      	bhi.n	8004e76 <UART_SetConfig+0x45e>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <UART_SetConfig+0x414>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e61 	.word	0x08004e61
 8004e38:	08004e77 	.word	0x08004e77
 8004e3c:	08004e67 	.word	0x08004e67
 8004e40:	08004e77 	.word	0x08004e77
 8004e44:	08004e77 	.word	0x08004e77
 8004e48:	08004e77 	.word	0x08004e77
 8004e4c:	08004e6f 	.word	0x08004e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e50:	f7fd fd9a 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8004e54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e56:	e014      	b.n	8004e82 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e58:	f7fd fda8 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8004e5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e5e:	e010      	b.n	8004e82 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e60:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <UART_SetConfig+0x4e4>)
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e64:	e00d      	b.n	8004e82 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e66:	f7fd fcdb 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 8004e6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e6c:	e009      	b.n	8004e82 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e74:	e005      	b.n	8004e82 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e80:	bf00      	nop
    }

    if (pclk != 0U)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d021      	beq.n	8004ecc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ef8 <UART_SetConfig+0x4e0>)
 8004e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e92:	461a      	mov	r2, r3
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	441a      	add	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	2b0f      	cmp	r3, #15
 8004eb0:	d909      	bls.n	8004ec6 <UART_SetConfig+0x4ae>
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb8:	d205      	bcs.n	8004ec6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e002      	b.n	8004ecc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004ee8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3730      	adds	r7, #48	@ 0x30
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef6:	bf00      	nop
 8004ef8:	0800a830 	.word	0x0800a830
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01a      	beq.n	8005016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffe:	d10a      	bne.n	8005016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af02      	add	r7, sp, #8
 8005048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005052:	f7fb ffa5 	bl	8000fa0 <HAL_GetTick>
 8005056:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b08      	cmp	r3, #8
 8005064:	d10e      	bne.n	8005084 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005066:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f832 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e028      	b.n	80050d6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d10e      	bne.n	80050b0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005092:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f81c 	bl	80050de <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e012      	b.n	80050d6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b09c      	sub	sp, #112	@ 0x70
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	4613      	mov	r3, r2
 80050ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ee:	e0a9      	b.n	8005244 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	f000 80a5 	beq.w	8005244 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fb ff51 	bl	8000fa0 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <UART_WaitOnFlagUntilTimeout+0x32>
 800510a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800510c:	2b00      	cmp	r3, #0
 800510e:	d140      	bne.n	8005192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800511e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005120:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005124:	667b      	str	r3, [r7, #100]	@ 0x64
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800512e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005130:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005134:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800513c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e6      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	663b      	str	r3, [r7, #96]	@ 0x60
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005162:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005164:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e069      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d051      	beq.n	8005244 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ae:	d149      	bne.n	8005244 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80051ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80051da:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	613b      	str	r3, [r7, #16]
   return(result);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3308      	adds	r3, #8
 800520a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800520c:	623a      	str	r2, [r7, #32]
 800520e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	61bb      	str	r3, [r7, #24]
   return(result);
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e010      	b.n	8005266 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	429a      	cmp	r2, r3
 8005260:	f43f af46 	beq.w	80050f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3770      	adds	r7, #112	@ 0x70
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005270:	b480      	push	{r7}
 8005272:	b0a3      	sub	sp, #140	@ 0x8c
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a2:	d10e      	bne.n	80052c2 <UART_Start_Receive_IT+0x52>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <UART_Start_Receive_IT+0x48>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80052b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052b6:	e02d      	b.n	8005314 <UART_Start_Receive_IT+0xa4>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	22ff      	movs	r2, #255	@ 0xff
 80052bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052c0:	e028      	b.n	8005314 <UART_Start_Receive_IT+0xa4>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10d      	bne.n	80052e6 <UART_Start_Receive_IT+0x76>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <UART_Start_Receive_IT+0x6c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	22ff      	movs	r2, #255	@ 0xff
 80052d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052da:	e01b      	b.n	8005314 <UART_Start_Receive_IT+0xa4>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	227f      	movs	r2, #127	@ 0x7f
 80052e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80052e4:	e016      	b.n	8005314 <UART_Start_Receive_IT+0xa4>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ee:	d10d      	bne.n	800530c <UART_Start_Receive_IT+0x9c>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <UART_Start_Receive_IT+0x92>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	227f      	movs	r2, #127	@ 0x7f
 80052fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005300:	e008      	b.n	8005314 <UART_Start_Receive_IT+0xa4>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	223f      	movs	r2, #63	@ 0x3f
 8005306:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800530a:	e003      	b.n	8005314 <UART_Start_Receive_IT+0xa4>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2222      	movs	r2, #34	@ 0x22
 8005320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005334:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005348:	673a      	str	r2, [r7, #112]	@ 0x70
 800534a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800534e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e3      	bne.n	8005324 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005364:	d14f      	bne.n	8005406 <UART_Start_Receive_IT+0x196>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	429a      	cmp	r2, r3
 8005370:	d349      	bcc.n	8005406 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537a:	d107      	bne.n	800538c <UART_Start_Receive_IT+0x11c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a46      	ldr	r2, [pc, #280]	@ (80054a0 <UART_Start_Receive_IT+0x230>)
 8005388:	675a      	str	r2, [r3, #116]	@ 0x74
 800538a:	e002      	b.n	8005392 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a45      	ldr	r2, [pc, #276]	@ (80054a4 <UART_Start_Receive_IT+0x234>)
 8005390:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01a      	beq.n	80053d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80053ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e4      	bne.n	800539a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3308      	adds	r3, #8
 80053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80053f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80053f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_Start_Receive_IT+0x160>
 8005404:	e046      	b.n	8005494 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540e:	d107      	bne.n	8005420 <UART_Start_Receive_IT+0x1b0>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a23      	ldr	r2, [pc, #140]	@ (80054a8 <UART_Start_Receive_IT+0x238>)
 800541c:	675a      	str	r2, [r3, #116]	@ 0x74
 800541e:	e002      	b.n	8005426 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a22      	ldr	r2, [pc, #136]	@ (80054ac <UART_Start_Receive_IT+0x23c>)
 8005424:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d019      	beq.n	8005462 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005442:	677b      	str	r3, [r7, #116]	@ 0x74
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544c:	637b      	str	r3, [r7, #52]	@ 0x34
 800544e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e6      	bne.n	800542e <UART_Start_Receive_IT+0x1be>
 8005460:	e018      	b.n	8005494 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f043 0320 	orr.w	r3, r3, #32
 8005476:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	61bb      	str	r3, [r7, #24]
   return(result);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	378c      	adds	r7, #140	@ 0x8c
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	08005ccd 	.word	0x08005ccd
 80054a4:	0800596d 	.word	0x0800596d
 80054a8:	080057b5 	.word	0x080057b5
 80054ac:	080055fd 	.word	0x080055fd

080054b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b095      	sub	sp, #84	@ 0x54
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80054d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e6      	bne.n	80054b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3308      	adds	r3, #8
 800550c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800550e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e3      	bne.n	80054ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d118      	bne.n	800555c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005570:	bf00      	nop
 8005572:	3754      	adds	r7, #84	@ 0x54
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff fa28 	bl	80049ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b088      	sub	sp, #32
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6979      	ldr	r1, [r7, #20]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	613b      	str	r3, [r7, #16]
   return(result);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff f9f4 	bl	80049dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055f4:	bf00      	nop
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b09c      	sub	sp, #112	@ 0x70
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800560a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005614:	2b22      	cmp	r3, #34	@ 0x22
 8005616:	f040 80be 	bne.w	8005796 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005624:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005628:	b2d9      	uxtb	r1, r3
 800562a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800562e:	b2da      	uxtb	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	400a      	ands	r2, r1
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 80a1 	bne.w	80057a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005682:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005684:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005688:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3308      	adds	r3, #8
 80056b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80056b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e5      	bne.n	8005696 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a33      	ldr	r2, [pc, #204]	@ (80057b0 <UART_RxISR_8BIT+0x1b4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d01f      	beq.n	8005728 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d018      	beq.n	8005728 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	623b      	str	r3, [r7, #32]
   return(result);
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800570a:	663b      	str	r3, [r7, #96]	@ 0x60
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005714:	633b      	str	r3, [r7, #48]	@ 0x30
 8005716:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800571a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e6      	bne.n	80056f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d12e      	bne.n	800578e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	60fb      	str	r3, [r7, #12]
   return(result);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0310 	bic.w	r3, r3, #16
 800574a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	69b9      	ldr	r1, [r7, #24]
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	617b      	str	r3, [r7, #20]
   return(result);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e6      	bne.n	8005736 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b10      	cmp	r3, #16
 8005774:	d103      	bne.n	800577e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2210      	movs	r2, #16
 800577c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff f93a 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800578c:	e00b      	b.n	80057a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fa ff2a 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 8005794:	e007      	b.n	80057a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699a      	ldr	r2, [r3, #24]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0208 	orr.w	r2, r2, #8
 80057a4:	619a      	str	r2, [r3, #24]
}
 80057a6:	bf00      	nop
 80057a8:	3770      	adds	r7, #112	@ 0x70
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40008000 	.word	0x40008000

080057b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b09c      	sub	sp, #112	@ 0x70
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80057c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057cc:	2b22      	cmp	r3, #34	@ 0x22
 80057ce:	f040 80be 	bne.w	800594e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80057e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80057e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057ea:	4013      	ands	r3, r2
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	f040 80a1 	bne.w	800595e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800582a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005830:	667b      	str	r3, [r7, #100]	@ 0x64
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800583a:	657b      	str	r3, [r7, #84]	@ 0x54
 800583c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005840:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e6      	bne.n	800581c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	663b      	str	r3, [r7, #96]	@ 0x60
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800586e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a33      	ldr	r2, [pc, #204]	@ (8005968 <UART_RxISR_16BIT+0x1b4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d01f      	beq.n	80058e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e6      	bne.n	80058ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d12e      	bne.n	8005946 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f023 0310 	bic.w	r3, r3, #16
 8005902:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6979      	ldr	r1, [r7, #20]
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	613b      	str	r3, [r7, #16]
   return(result);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b10      	cmp	r3, #16
 800592c:	d103      	bne.n	8005936 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2210      	movs	r2, #16
 8005934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff f85e 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005944:	e00b      	b.n	800595e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fa fe4e 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 800594c:	e007      	b.n	800595e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0208 	orr.w	r2, r2, #8
 800595c:	619a      	str	r2, [r3, #24]
}
 800595e:	bf00      	nop
 8005960:	3770      	adds	r7, #112	@ 0x70
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40008000 	.word	0x40008000

0800596c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b0ac      	sub	sp, #176	@ 0xb0
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800597a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a2:	2b22      	cmp	r3, #34	@ 0x22
 80059a4:	f040 8182 	bne.w	8005cac <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80059ae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059b2:	e125      	b.n	8005c00 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80059c2:	b2d9      	uxtb	r1, r3
 80059c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	400a      	ands	r2, r1
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d053      	beq.n	8005aae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d011      	beq.n	8005a36 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2c:	f043 0201 	orr.w	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d011      	beq.n	8005a66 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2202      	movs	r2, #2
 8005a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a5c:	f043 0204 	orr.w	r2, r3, #4
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d011      	beq.n	8005a96 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2204      	movs	r2, #4
 8005a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	f043 0202 	orr.w	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d006      	beq.n	8005aae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7fe ffa4 	bl	80049ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 80a2 	bne.w	8005c00 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ae0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005ae4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005aec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e4      	bne.n	8005abc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b1a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005b1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005b20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005b28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e1      	bne.n	8005af2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a5f      	ldr	r2, [pc, #380]	@ (8005cc4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d021      	beq.n	8005b90 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01a      	beq.n	8005b90 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b7e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e4      	bne.n	8005b5a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d130      	bne.n	8005bfa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f023 0310 	bic.w	r3, r3, #16
 8005bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e4      	bne.n	8005b9e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d103      	bne.n	8005bea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2210      	movs	r2, #16
 8005be8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fe ff04 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
 8005bf8:	e002      	b.n	8005c00 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fa fcf4 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c00:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d006      	beq.n	8005c16 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005c08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f aecf 	bne.w	80059b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d049      	beq.n	8005cbc <UART_RxISR_8BIT_FIFOEN+0x350>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005c2e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d242      	bcs.n	8005cbc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e3      	bne.n	8005c36 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a15      	ldr	r2, [pc, #84]	@ (8005cc8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005c72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f043 0320 	orr.w	r3, r3, #32
 8005c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6979      	ldr	r1, [r7, #20]
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e4      	bne.n	8005c74 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005caa:	e007      	b.n	8005cbc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0208 	orr.w	r2, r2, #8
 8005cba:	619a      	str	r2, [r3, #24]
}
 8005cbc:	bf00      	nop
 8005cbe:	37b0      	adds	r7, #176	@ 0xb0
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40008000 	.word	0x40008000
 8005cc8:	080055fd 	.word	0x080055fd

08005ccc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b0ae      	sub	sp, #184	@ 0xb8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005cda:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d02:	2b22      	cmp	r3, #34	@ 0x22
 8005d04:	f040 8186 	bne.w	8006014 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d0e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d12:	e129      	b.n	8005f68 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d26:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005d2a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005d2e:	4013      	ands	r3, r2
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d3c:	1c9a      	adds	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d053      	beq.n	8005e12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d011      	beq.n	8005d9a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2201      	movs	r2, #1
 8005d88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d90:	f043 0201 	orr.w	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d011      	beq.n	8005dca <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005da6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2202      	movs	r2, #2
 8005db8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc0:	f043 0204 	orr.w	r2, r3, #4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d011      	beq.n	8005dfa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2204      	movs	r2, #4
 8005de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df0:	f043 0202 	orr.w	r2, r3, #2
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fe fdf2 	bl	80049ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 80a4 	bne.w	8005f68 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e46:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e2      	bne.n	8005e20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005e82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e1      	bne.n	8005e5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5f      	ldr	r2, [pc, #380]	@ (800602c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d021      	beq.n	8005ef8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01a      	beq.n	8005ef8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eca:	e853 3f00 	ldrex	r3, [r3]
 8005ece:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005eea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e4      	bne.n	8005ec2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d130      	bne.n	8005f62 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e4      	bne.n	8005f06 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0310 	and.w	r3, r3, #16
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d103      	bne.n	8005f52 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fe fd50 	bl	8004a00 <HAL_UARTEx_RxEventCallback>
 8005f60:	e002      	b.n	8005f68 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fa fb40 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d006      	beq.n	8005f7e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005f70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f47f aecb 	bne.w	8005d14 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f84:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f88:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d049      	beq.n	8006024 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005f96:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d242      	bcs.n	8006024 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	623b      	str	r3, [r7, #32]
   return(result);
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005fda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f043 0320 	orr.w	r3, r3, #32
 8005ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	617b      	str	r3, [r7, #20]
   return(result);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e4      	bne.n	8005fdc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006012:	e007      	b.n	8006024 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0208 	orr.w	r2, r2, #8
 8006022:	619a      	str	r2, [r3, #24]
}
 8006024:	bf00      	nop
 8006026:	37b8      	adds	r7, #184	@ 0xb8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40008000 	.word	0x40008000
 8006030:	080057b5 	.word	0x080057b5

08006034 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr

0800606a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_UARTEx_DisableFifoMode+0x16>
 800607c:	2302      	movs	r3, #2
 800607e:	e027      	b.n	80060d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr

080060da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e02d      	b.n	800614e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2224      	movs	r2, #36	@ 0x24
 80060fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f850 	bl	80061d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800616a:	2302      	movs	r3, #2
 800616c:	e02d      	b.n	80061ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2224      	movs	r2, #36	@ 0x24
 800617a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f812 	bl	80061d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f4:	e031      	b.n	800625a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f6:	2308      	movs	r3, #8
 80061f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061fa:	2308      	movs	r3, #8
 80061fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0e5b      	lsrs	r3, r3, #25
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0f5b      	lsrs	r3, r3, #29
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	7b3a      	ldrb	r2, [r7, #12]
 8006222:	4910      	ldr	r1, [pc, #64]	@ (8006264 <UARTEx_SetNbDataToProcess+0x90>)
 8006224:	5c8a      	ldrb	r2, [r1, r2]
 8006226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800622a:	7b3a      	ldrb	r2, [r7, #12]
 800622c:	490e      	ldr	r1, [pc, #56]	@ (8006268 <UARTEx_SetNbDataToProcess+0x94>)
 800622e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006230:	fb93 f3f2 	sdiv	r3, r3, r2
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	7b7a      	ldrb	r2, [r7, #13]
 8006240:	4908      	ldr	r1, [pc, #32]	@ (8006264 <UARTEx_SetNbDataToProcess+0x90>)
 8006242:	5c8a      	ldrb	r2, [r1, r2]
 8006244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006248:	7b7a      	ldrb	r2, [r7, #13]
 800624a:	4907      	ldr	r1, [pc, #28]	@ (8006268 <UARTEx_SetNbDataToProcess+0x94>)
 800624c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	0800a848 	.word	0x0800a848
 8006268:	0800a850 	.word	0x0800a850

0800626c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006274:	4a24      	ldr	r2, [pc, #144]	@ (8006308 <RadioInit+0x9c>)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800627a:	4b24      	ldr	r3, [pc, #144]	@ (800630c <RadioInit+0xa0>)
 800627c:	2200      	movs	r2, #0
 800627e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006280:	4b22      	ldr	r3, [pc, #136]	@ (800630c <RadioInit+0xa0>)
 8006282:	2200      	movs	r2, #0
 8006284:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006286:	4b21      	ldr	r3, [pc, #132]	@ (800630c <RadioInit+0xa0>)
 8006288:	2200      	movs	r2, #0
 800628a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800628c:	4b1f      	ldr	r3, [pc, #124]	@ (800630c <RadioInit+0xa0>)
 800628e:	2200      	movs	r2, #0
 8006290:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8006292:	481f      	ldr	r0, [pc, #124]	@ (8006310 <RadioInit+0xa4>)
 8006294:	f001 ff86 	bl	80081a4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8006298:	4b1c      	ldr	r3, [pc, #112]	@ (800630c <RadioInit+0xa0>)
 800629a:	2200      	movs	r2, #0
 800629c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800629e:	4b1b      	ldr	r3, [pc, #108]	@ (800630c <RadioInit+0xa0>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80062a4:	f002 fa1a 	bl	80086dc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80062a8:	2100      	movs	r1, #0
 80062aa:	2000      	movs	r0, #0
 80062ac:	f002 fde6 	bl	8008e7c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80062b0:	2204      	movs	r2, #4
 80062b2:	2100      	movs	r1, #0
 80062b4:	2001      	movs	r0, #1
 80062b6:	f002 fba3 	bl	8008a00 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80062ba:	2300      	movs	r3, #0
 80062bc:	2200      	movs	r2, #0
 80062be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80062c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80062c6:	f002 fad3 	bl	8008870 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80062ca:	f000 fe91 	bl	8006ff0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80062ce:	2300      	movs	r3, #0
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4b10      	ldr	r3, [pc, #64]	@ (8006314 <RadioInit+0xa8>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	f04f 31ff 	mov.w	r1, #4294967295
 80062da:	480f      	ldr	r0, [pc, #60]	@ (8006318 <RadioInit+0xac>)
 80062dc:	f003 fb30 	bl	8009940 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80062e0:	2300      	movs	r3, #0
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <RadioInit+0xb0>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	f04f 31ff 	mov.w	r1, #4294967295
 80062ec:	480c      	ldr	r0, [pc, #48]	@ (8006320 <RadioInit+0xb4>)
 80062ee:	f003 fb27 	bl	8009940 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80062f2:	4809      	ldr	r0, [pc, #36]	@ (8006318 <RadioInit+0xac>)
 80062f4:	f003 fbc8 	bl	8009a88 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80062f8:	4809      	ldr	r0, [pc, #36]	@ (8006320 <RadioInit+0xb4>)
 80062fa:	f003 fbc5 	bl	8009a88 <UTIL_TIMER_Stop>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200003fc 	.word	0x200003fc
 800630c:	20000400 	.word	0x20000400
 8006310:	080073e5 	.word	0x080073e5
 8006314:	0800736d 	.word	0x0800736d
 8006318:	2000045c 	.word	0x2000045c
 800631c:	08007381 	.word	0x08007381
 8006320:	20000474 	.word	0x20000474

08006324 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006328:	f001 ff84 	bl	8008234 <SUBGRF_GetOperatingMode>
 800632c:	4603      	mov	r3, r0
 800632e:	2b07      	cmp	r3, #7
 8006330:	d00a      	beq.n	8006348 <RadioGetStatus+0x24>
 8006332:	2b07      	cmp	r3, #7
 8006334:	dc0a      	bgt.n	800634c <RadioGetStatus+0x28>
 8006336:	2b04      	cmp	r3, #4
 8006338:	d002      	beq.n	8006340 <RadioGetStatus+0x1c>
 800633a:	2b05      	cmp	r3, #5
 800633c:	d002      	beq.n	8006344 <RadioGetStatus+0x20>
 800633e:	e005      	b.n	800634c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006340:	2302      	movs	r3, #2
 8006342:	e004      	b.n	800634e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006344:	2301      	movs	r3, #1
 8006346:	e002      	b.n	800634e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006348:	2303      	movs	r3, #3
 800634a:	e000      	b.n	800634e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800634c:	2300      	movs	r3, #0
    }
}
 800634e:	4618      	mov	r0, r3
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800635e:	4a2a      	ldr	r2, [pc, #168]	@ (8006408 <RadioSetModem+0xb4>)
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	4618      	mov	r0, r3
 8006368:	f003 f95b 	bl	8009622 <RFW_SetRadioModem>
    switch( modem )
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b05      	cmp	r3, #5
 8006370:	d80e      	bhi.n	8006390 <RadioSetModem+0x3c>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <RadioSetModem+0x24>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	0800639f 	.word	0x0800639f
 800637c:	080063ad 	.word	0x080063ad
 8006380:	08006391 	.word	0x08006391
 8006384:	080063d3 	.word	0x080063d3
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063ef 	.word	0x080063ef
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8006390:	2003      	movs	r0, #3
 8006392:	f002 fb0f 	bl	80089b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006396:	4b1c      	ldr	r3, [pc, #112]	@ (8006408 <RadioSetModem+0xb4>)
 8006398:	2200      	movs	r2, #0
 800639a:	735a      	strb	r2, [r3, #13]
        break;
 800639c:	e02f      	b.n	80063fe <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800639e:	2000      	movs	r0, #0
 80063a0:	f002 fb08 	bl	80089b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80063a4:	4b18      	ldr	r3, [pc, #96]	@ (8006408 <RadioSetModem+0xb4>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	735a      	strb	r2, [r3, #13]
        break;
 80063aa:	e028      	b.n	80063fe <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80063ac:	2001      	movs	r0, #1
 80063ae:	f002 fb01 	bl	80089b4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80063b2:	4b15      	ldr	r3, [pc, #84]	@ (8006408 <RadioSetModem+0xb4>)
 80063b4:	7b5a      	ldrb	r2, [r3, #13]
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <RadioSetModem+0xb4>)
 80063b8:	7b1b      	ldrb	r3, [r3, #12]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d01e      	beq.n	80063fc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80063be:	4b12      	ldr	r3, [pc, #72]	@ (8006408 <RadioSetModem+0xb4>)
 80063c0:	7b1a      	ldrb	r2, [r3, #12]
 80063c2:	4b11      	ldr	r3, [pc, #68]	@ (8006408 <RadioSetModem+0xb4>)
 80063c4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80063c6:	4b10      	ldr	r3, [pc, #64]	@ (8006408 <RadioSetModem+0xb4>)
 80063c8:	7b5b      	ldrb	r3, [r3, #13]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 ff98 	bl	8007300 <RadioSetPublicNetwork>
        }
        break;
 80063d0:	e014      	b.n	80063fc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80063d2:	2002      	movs	r0, #2
 80063d4:	f002 faee 	bl	80089b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80063d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <RadioSetModem+0xb4>)
 80063da:	2200      	movs	r2, #0
 80063dc:	735a      	strb	r2, [r3, #13]
        break;
 80063de:	e00e      	b.n	80063fe <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80063e0:	2002      	movs	r0, #2
 80063e2:	f002 fae7 	bl	80089b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80063e6:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <RadioSetModem+0xb4>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	735a      	strb	r2, [r3, #13]
        break;
 80063ec:	e007      	b.n	80063fe <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80063ee:	2000      	movs	r0, #0
 80063f0:	f002 fae0 	bl	80089b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80063f4:	4b04      	ldr	r3, [pc, #16]	@ (8006408 <RadioSetModem+0xb4>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	735a      	strb	r2, [r3, #13]
        break;
 80063fa:	e000      	b.n	80063fe <RadioSetModem+0xaa>
        break;
 80063fc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80063fe:	bf00      	nop
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000400 	.word	0x20000400

0800640c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f002 fa87 	bl	8008928 <SUBGRF_SetRfFrequency>
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b090      	sub	sp, #64	@ 0x40
 8006426:	af0a      	add	r7, sp, #40	@ 0x28
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800643e:	f000 fdea 	bl	8007016 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006442:	2000      	movs	r0, #0
 8006444:	f7ff ff86 	bl	8006354 <RadioSetModem>

    RadioSetChannel( freq );
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f7ff ffdf 	bl	800640c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800644e:	2301      	movs	r3, #1
 8006450:	9309      	str	r3, [sp, #36]	@ 0x24
 8006452:	2300      	movs	r3, #0
 8006454:	9308      	str	r3, [sp, #32]
 8006456:	2300      	movs	r3, #0
 8006458:	9307      	str	r3, [sp, #28]
 800645a:	2300      	movs	r3, #0
 800645c:	9306      	str	r3, [sp, #24]
 800645e:	2300      	movs	r3, #0
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	2300      	movs	r3, #0
 8006464:	9304      	str	r3, [sp, #16]
 8006466:	2300      	movs	r3, #0
 8006468:	9303      	str	r3, [sp, #12]
 800646a:	2300      	movs	r3, #0
 800646c:	9302      	str	r3, [sp, #8]
 800646e:	2303      	movs	r3, #3
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	2300      	movs	r3, #0
 8006478:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	2000      	movs	r0, #0
 8006480:	f000 f83c 	bl	80064fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006484:	2000      	movs	r0, #0
 8006486:	f000 fdcd 	bl	8007024 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800648a:	f000 ff67 	bl	800735c <RadioGetWakeupTime>
 800648e:	4603      	mov	r3, r0
 8006490:	4618      	mov	r0, r3
 8006492:	f7fa fd99 	bl	8000fc8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006496:	f003 fb91 	bl	8009bbc <UTIL_TIMER_GetCurrentTime>
 800649a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800649c:	e00d      	b.n	80064ba <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800649e:	2000      	movs	r0, #0
 80064a0:	f000 feae 	bl	8007200 <RadioRssi>
 80064a4:	4603      	mov	r3, r0
 80064a6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80064a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80064ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	dd02      	ble.n	80064ba <RadioIsChannelFree+0x98>
        {
            status = false;
 80064b4:	2300      	movs	r3, #0
 80064b6:	75fb      	strb	r3, [r7, #23]
            break;
 80064b8:	e006      	b.n	80064c8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f003 fb90 	bl	8009be0 <UTIL_TIMER_GetElapsedTime>
 80064c0:	4602      	mov	r2, r0
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d8ea      	bhi.n	800649e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80064c8:	f000 fda5 	bl	8007016 <RadioStandby>

    return status;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80064e0:	2300      	movs	r3, #0
 80064e2:	2200      	movs	r2, #0
 80064e4:	2100      	movs	r1, #0
 80064e6:	2000      	movs	r0, #0
 80064e8:	f002 f9c2 	bl	8008870 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80064ec:	f001 ff73 	bl	80083d6 <SUBGRF_GetRandom>
 80064f0:	6078      	str	r0, [r7, #4]

    return rnd;
 80064f2:	687b      	ldr	r3, [r7, #4]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	461a      	mov	r2, r3
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]
 800650c:	4613      	mov	r3, r2
 800650e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006510:	4ab9      	ldr	r2, [pc, #740]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006512:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8006516:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006518:	f003 f841 	bl	800959e <RFW_DeInit>
    if( rxContinuous == true )
 800651c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8006528:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006530:	4ab2      	ldr	r2, [pc, #712]	@ (80067fc <RadioSetRxConfig+0x300>)
 8006532:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006536:	7013      	strb	r3, [r2, #0]
 8006538:	e002      	b.n	8006540 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800653a:	4bb0      	ldr	r3, [pc, #704]	@ (80067fc <RadioSetRxConfig+0x300>)
 800653c:	22ff      	movs	r2, #255	@ 0xff
 800653e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b05      	cmp	r3, #5
 8006544:	d009      	beq.n	800655a <RadioSetRxConfig+0x5e>
 8006546:	2b05      	cmp	r3, #5
 8006548:	f300 81d7 	bgt.w	80068fa <RadioSetRxConfig+0x3fe>
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80bf 	beq.w	80066d0 <RadioSetRxConfig+0x1d4>
 8006552:	2b01      	cmp	r3, #1
 8006554:	f000 8124 	beq.w	80067a0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006558:	e1cf      	b.n	80068fa <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800655a:	2001      	movs	r0, #1
 800655c:	f002 f880 	bl	8008660 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006560:	4ba5      	ldr	r3, [pc, #660]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006568:	4aa3      	ldr	r2, [pc, #652]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800656e:	4ba2      	ldr	r3, [pc, #648]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006570:	2209      	movs	r2, #9
 8006572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006576:	4ba0      	ldr	r3, [pc, #640]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006578:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800657c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800657e:	68b8      	ldr	r0, [r7, #8]
 8006580:	f002 ff40 	bl	8009404 <SUBGRF_GetFskBandwidthRegValue>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	4b9b      	ldr	r3, [pc, #620]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800658a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800658e:	4b9a      	ldr	r3, [pc, #616]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006590:	2200      	movs	r2, #0
 8006592:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006594:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	b29a      	uxth	r2, r3
 800659a:	4b97      	ldr	r3, [pc, #604]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800659c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800659e:	4b96      	ldr	r3, [pc, #600]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80065a4:	4b94      	ldr	r3, [pc, #592]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065a6:	2210      	movs	r2, #16
 80065a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80065aa:	4b93      	ldr	r3, [pc, #588]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80065b0:	4b91      	ldr	r3, [pc, #580]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80065b6:	4b91      	ldr	r3, [pc, #580]	@ (80067fc <RadioSetRxConfig+0x300>)
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	4b8f      	ldr	r3, [pc, #572]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80065be:	4b8e      	ldr	r3, [pc, #568]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80065c4:	4b8c      	ldr	r3, [pc, #560]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80065ca:	2005      	movs	r0, #5
 80065cc:	f7ff fec2 	bl	8006354 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80065d0:	488b      	ldr	r0, [pc, #556]	@ (8006800 <RadioSetRxConfig+0x304>)
 80065d2:	f002 fae3 	bl	8008b9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80065d6:	488b      	ldr	r0, [pc, #556]	@ (8006804 <RadioSetRxConfig+0x308>)
 80065d8:	f002 fbb2 	bl	8008d40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80065dc:	4a8a      	ldr	r2, [pc, #552]	@ (8006808 <RadioSetRxConfig+0x30c>)
 80065de:	f107 031c 	add.w	r3, r7, #28
 80065e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80065ea:	f107 031c 	add.w	r3, r7, #28
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 fe6f 	bl	80082d2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80065f4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80065f8:	f001 feba 	bl	8008370 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80065fc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8006600:	f000 fe1c 	bl	800723c <RadioRead>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800660a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800660e:	f023 0310 	bic.w	r3, r3, #16
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800661a:	4619      	mov	r1, r3
 800661c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8006620:	f000 fdfa 	bl	8007218 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006624:	2104      	movs	r1, #4
 8006626:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800662a:	f000 fdf5 	bl	8007218 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800662e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8006632:	f000 fe03 	bl	800723c <RadioRead>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800663c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006640:	f023 031c 	bic.w	r3, r3, #28
 8006644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800664c:	f043 0308 	orr.w	r3, r3, #8
 8006650:	b2db      	uxtb	r3, r3
 8006652:	4619      	mov	r1, r3
 8006654:	f640 009b 	movw	r0, #2203	@ 0x89b
 8006658:	f000 fdde 	bl	8007218 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800665c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8006660:	f000 fdec 	bl	800723c <RadioRead>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800666a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800666e:	f023 0318 	bic.w	r3, r3, #24
 8006672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8006676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800667a:	f043 0318 	orr.w	r3, r3, #24
 800667e:	b2db      	uxtb	r3, r3
 8006680:	4619      	mov	r1, r3
 8006682:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8006686:	f000 fdc7 	bl	8007218 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800668a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800668e:	f000 fdd5 	bl	800723c <RadioRead>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800669c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80066a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066a8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80066b4:	f000 fdb0 	bl	8007218 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80066b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80066ba:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	4a4b      	ldr	r2, [pc, #300]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80066cc:	6093      	str	r3, [r2, #8]
            break;
 80066ce:	e115      	b.n	80068fc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80066d0:	2000      	movs	r0, #0
 80066d2:	f001 ffc5 	bl	8008660 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80066d6:	4b48      	ldr	r3, [pc, #288]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80066de:	4a46      	ldr	r2, [pc, #280]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80066e4:	4b44      	ldr	r3, [pc, #272]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80066e6:	220b      	movs	r2, #11
 80066e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80066ec:	68b8      	ldr	r0, [r7, #8]
 80066ee:	f002 fe89 	bl	8009404 <SUBGRF_GetFskBandwidthRegValue>
 80066f2:	4603      	mov	r3, r0
 80066f4:	461a      	mov	r2, r3
 80066f6:	4b40      	ldr	r3, [pc, #256]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80066f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80066fc:	4b3e      	ldr	r3, [pc, #248]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80066fe:	2200      	movs	r2, #0
 8006700:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006702:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	b29a      	uxth	r2, r3
 8006708:	4b3b      	ldr	r3, [pc, #236]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800670a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800670c:	4b3a      	ldr	r3, [pc, #232]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800670e:	2204      	movs	r2, #4
 8006710:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006712:	4b39      	ldr	r3, [pc, #228]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006714:	2218      	movs	r2, #24
 8006716:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006718:	4b37      	ldr	r3, [pc, #220]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800671a:	2200      	movs	r2, #0
 800671c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800671e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006722:	f083 0301 	eor.w	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	4b33      	ldr	r3, [pc, #204]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800672c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800672e:	4b33      	ldr	r3, [pc, #204]	@ (80067fc <RadioSetRxConfig+0x300>)
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006734:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006736:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800673e:	4b2e      	ldr	r3, [pc, #184]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006740:	22f2      	movs	r2, #242	@ 0xf2
 8006742:	75da      	strb	r2, [r3, #23]
 8006744:	e002      	b.n	800674c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006746:	4b2c      	ldr	r3, [pc, #176]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 8006748:	2201      	movs	r2, #1
 800674a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800674c:	4b2a      	ldr	r3, [pc, #168]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800674e:	2201      	movs	r2, #1
 8006750:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006752:	f000 fc60 	bl	8007016 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006756:	2000      	movs	r0, #0
 8006758:	f7ff fdfc 	bl	8006354 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800675c:	4828      	ldr	r0, [pc, #160]	@ (8006800 <RadioSetRxConfig+0x304>)
 800675e:	f002 fa1d 	bl	8008b9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006762:	4828      	ldr	r0, [pc, #160]	@ (8006804 <RadioSetRxConfig+0x308>)
 8006764:	f002 faec 	bl	8008d40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006768:	4a28      	ldr	r2, [pc, #160]	@ (800680c <RadioSetRxConfig+0x310>)
 800676a:	f107 0314 	add.w	r3, r7, #20
 800676e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006772:	e883 0003 	stmia.w	r3, {r0, r1}
 8006776:	f107 0314 	add.w	r3, r7, #20
 800677a:	4618      	mov	r0, r3
 800677c:	f001 fda9 	bl	80082d2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006780:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8006784:	f001 fdf4 	bl	8008370 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006788:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800678a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	4a17      	ldr	r2, [pc, #92]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 800679c:	6093      	str	r3, [r2, #8]
            break;
 800679e:	e0ad      	b.n	80068fc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80067a0:	2000      	movs	r0, #0
 80067a2:	f001 ff5d 	bl	8008660 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80067a6:	4b14      	ldr	r3, [pc, #80]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	4b11      	ldr	r3, [pc, #68]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80067b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80067b8:	4a15      	ldr	r2, [pc, #84]	@ (8006810 <RadioSetRxConfig+0x314>)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4413      	add	r3, r2
 80067be:	781a      	ldrb	r2, [r3, #0]
 80067c0:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80067c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80067c6:	4a0c      	ldr	r2, [pc, #48]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d105      	bne.n	80067e0 <RadioSetRxConfig+0x2e4>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b0b      	cmp	r3, #11
 80067d8:	d008      	beq.n	80067ec <RadioSetRxConfig+0x2f0>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b0c      	cmp	r3, #12
 80067de:	d005      	beq.n	80067ec <RadioSetRxConfig+0x2f0>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d116      	bne.n	8006814 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b0c      	cmp	r3, #12
 80067ea:	d113      	bne.n	8006814 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80067ec:	4b02      	ldr	r3, [pc, #8]	@ (80067f8 <RadioSetRxConfig+0x2fc>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80067f4:	e012      	b.n	800681c <RadioSetRxConfig+0x320>
 80067f6:	bf00      	nop
 80067f8:	20000400 	.word	0x20000400
 80067fc:	2000000d 	.word	0x2000000d
 8006800:	20000438 	.word	0x20000438
 8006804:	2000040e 	.word	0x2000040e
 8006808:	0800a740 	.word	0x0800a740
 800680c:	0800a748 	.word	0x0800a748
 8006810:	0800a8e4 	.word	0x0800a8e4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006814:	4b3b      	ldr	r3, [pc, #236]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800681c:	4b39      	ldr	r3, [pc, #228]	@ (8006904 <RadioSetRxConfig+0x408>)
 800681e:	2201      	movs	r2, #1
 8006820:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006822:	4b38      	ldr	r3, [pc, #224]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006824:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006828:	2b05      	cmp	r3, #5
 800682a:	d004      	beq.n	8006836 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800682c:	4b35      	ldr	r3, [pc, #212]	@ (8006904 <RadioSetRxConfig+0x408>)
 800682e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006832:	2b06      	cmp	r3, #6
 8006834:	d10a      	bne.n	800684c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8006836:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006838:	2b0b      	cmp	r3, #11
 800683a:	d803      	bhi.n	8006844 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800683c:	4b31      	ldr	r3, [pc, #196]	@ (8006904 <RadioSetRxConfig+0x408>)
 800683e:	220c      	movs	r2, #12
 8006840:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006842:	e006      	b.n	8006852 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006844:	4a2f      	ldr	r2, [pc, #188]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006846:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006848:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800684a:	e002      	b.n	8006852 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800684c:	4a2d      	ldr	r2, [pc, #180]	@ (8006904 <RadioSetRxConfig+0x408>)
 800684e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006850:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006852:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8006856:	4b2b      	ldr	r3, [pc, #172]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006858:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800685a:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <RadioSetRxConfig+0x40c>)
 800685c:	781a      	ldrb	r2, [r3, #0]
 800685e:	4b29      	ldr	r3, [pc, #164]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006860:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006862:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8006866:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006868:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800686c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8006870:	4b24      	ldr	r3, [pc, #144]	@ (8006904 <RadioSetRxConfig+0x408>)
 8006872:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8006876:	f000 fbce 	bl	8007016 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800687a:	2001      	movs	r0, #1
 800687c:	f7ff fd6a 	bl	8006354 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006880:	4822      	ldr	r0, [pc, #136]	@ (800690c <RadioSetRxConfig+0x410>)
 8006882:	f002 f98b 	bl	8008b9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006886:	4822      	ldr	r0, [pc, #136]	@ (8006910 <RadioSetRxConfig+0x414>)
 8006888:	f002 fa5a 	bl	8008d40 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800688c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800688e:	b2db      	uxtb	r3, r3
 8006890:	4618      	mov	r0, r3
 8006892:	f001 fef4 	bl	800867e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8006896:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800689a:	f002 fbad 	bl	8008ff8 <SUBGRF_ReadRegister>
 800689e:	4603      	mov	r3, r0
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	4619      	mov	r1, r3
 80068a8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80068ac:	f002 fb90 	bl	8008fd0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80068b0:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <RadioSetRxConfig+0x408>)
 80068b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d10d      	bne.n	80068d6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80068ba:	f240 7036 	movw	r0, #1846	@ 0x736
 80068be:	f002 fb9b 	bl	8008ff8 <SUBGRF_ReadRegister>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f023 0304 	bic.w	r3, r3, #4
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	f240 7036 	movw	r0, #1846	@ 0x736
 80068d0:	f002 fb7e 	bl	8008fd0 <SUBGRF_WriteRegister>
 80068d4:	e00c      	b.n	80068f0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80068d6:	f240 7036 	movw	r0, #1846	@ 0x736
 80068da:	f002 fb8d 	bl	8008ff8 <SUBGRF_ReadRegister>
 80068de:	4603      	mov	r3, r0
 80068e0:	f043 0304 	orr.w	r3, r3, #4
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	4619      	mov	r1, r3
 80068e8:	f240 7036 	movw	r0, #1846	@ 0x736
 80068ec:	f002 fb70 	bl	8008fd0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80068f0:	4b04      	ldr	r3, [pc, #16]	@ (8006904 <RadioSetRxConfig+0x408>)
 80068f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068f6:	609a      	str	r2, [r3, #8]
            break;
 80068f8:	e000      	b.n	80068fc <RadioSetRxConfig+0x400>
            break;
 80068fa:	bf00      	nop
    }
}
 80068fc:	bf00      	nop
 80068fe:	3728      	adds	r7, #40	@ 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000400 	.word	0x20000400
 8006908:	2000000d 	.word	0x2000000d
 800690c:	20000438 	.word	0x20000438
 8006910:	2000040e 	.word	0x2000040e

08006914 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60ba      	str	r2, [r7, #8]
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	460b      	mov	r3, r1
 8006924:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8006926:	f002 fe3a 	bl	800959e <RFW_DeInit>
    switch( modem )
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2b04      	cmp	r3, #4
 800692e:	f000 80c7 	beq.w	8006ac0 <RadioSetTxConfig+0x1ac>
 8006932:	2b04      	cmp	r3, #4
 8006934:	f300 80d6 	bgt.w	8006ae4 <RadioSetTxConfig+0x1d0>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <RadioSetTxConfig+0x2e>
 800693c:	2b01      	cmp	r3, #1
 800693e:	d059      	beq.n	80069f4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006940:	e0d0      	b.n	8006ae4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006942:	4b77      	ldr	r3, [pc, #476]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800694a:	4a75      	ldr	r2, [pc, #468]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006950:	4b73      	ldr	r3, [pc, #460]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006952:	220b      	movs	r2, #11
 8006954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 fd53 	bl	8009404 <SUBGRF_GetFskBandwidthRegValue>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	4b6f      	ldr	r3, [pc, #444]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006968:	4a6d      	ldr	r2, [pc, #436]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800696e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006970:	2200      	movs	r2, #0
 8006972:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006974:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	b29a      	uxth	r2, r3
 800697a:	4b69      	ldr	r3, [pc, #420]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 800697c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800697e:	4b68      	ldr	r3, [pc, #416]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006980:	2204      	movs	r2, #4
 8006982:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006984:	4b66      	ldr	r3, [pc, #408]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006986:	2218      	movs	r2, #24
 8006988:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800698a:	4b65      	ldr	r3, [pc, #404]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 800698c:	2200      	movs	r2, #0
 800698e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006990:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006994:	f083 0301 	eor.w	r3, r3, #1
 8006998:	b2db      	uxtb	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	4b60      	ldr	r3, [pc, #384]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 800699e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80069a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80069a8:	4b5d      	ldr	r3, [pc, #372]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 80069aa:	22f2      	movs	r2, #242	@ 0xf2
 80069ac:	75da      	strb	r2, [r3, #23]
 80069ae:	e002      	b.n	80069b6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80069b0:	4b5b      	ldr	r3, [pc, #364]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80069b6:	4b5a      	ldr	r3, [pc, #360]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 80069b8:	2201      	movs	r2, #1
 80069ba:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80069bc:	f000 fb2b 	bl	8007016 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80069c0:	2000      	movs	r0, #0
 80069c2:	f7ff fcc7 	bl	8006354 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80069c6:	4857      	ldr	r0, [pc, #348]	@ (8006b24 <RadioSetTxConfig+0x210>)
 80069c8:	f002 f8e8 	bl	8008b9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80069cc:	4856      	ldr	r0, [pc, #344]	@ (8006b28 <RadioSetTxConfig+0x214>)
 80069ce:	f002 f9b7 	bl	8008d40 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80069d2:	4a56      	ldr	r2, [pc, #344]	@ (8006b2c <RadioSetTxConfig+0x218>)
 80069d4:	f107 0310 	add.w	r3, r7, #16
 80069d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80069e0:	f107 0310 	add.w	r3, r7, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fc74 	bl	80082d2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80069ea:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80069ee:	f001 fcbf 	bl	8008370 <SUBGRF_SetWhiteningSeed>
            break;
 80069f2:	e078      	b.n	8006ae6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80069f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	4b47      	ldr	r3, [pc, #284]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006a06:	4a4a      	ldr	r2, [pc, #296]	@ (8006b30 <RadioSetTxConfig+0x21c>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	4b44      	ldr	r3, [pc, #272]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006a14:	4a42      	ldr	r2, [pc, #264]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a1a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d105      	bne.n	8006a30 <RadioSetTxConfig+0x11c>
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2b0b      	cmp	r3, #11
 8006a28:	d008      	beq.n	8006a3c <RadioSetTxConfig+0x128>
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	2b0c      	cmp	r3, #12
 8006a2e:	d005      	beq.n	8006a3c <RadioSetTxConfig+0x128>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	2b0c      	cmp	r3, #12
 8006a3a:	d104      	bne.n	8006a46 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006a3c:	4b38      	ldr	r3, [pc, #224]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006a44:	e003      	b.n	8006a4e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006a46:	4b36      	ldr	r3, [pc, #216]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006a4e:	4b34      	ldr	r3, [pc, #208]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006a54:	4b32      	ldr	r3, [pc, #200]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d004      	beq.n	8006a68 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006a5e:	4b30      	ldr	r3, [pc, #192]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006a64:	2b06      	cmp	r3, #6
 8006a66:	d10a      	bne.n	8006a7e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8006a68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a6a:	2b0b      	cmp	r3, #11
 8006a6c:	d803      	bhi.n	8006a76 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a70:	220c      	movs	r2, #12
 8006a72:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006a74:	e006      	b.n	8006a84 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006a76:	4a2a      	ldr	r2, [pc, #168]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a7a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006a7c:	e002      	b.n	8006a84 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006a7e:	4a28      	ldr	r2, [pc, #160]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a82:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006a84:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006a88:	4b25      	ldr	r3, [pc, #148]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a8a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006a8c:	4b29      	ldr	r3, [pc, #164]	@ (8006b34 <RadioSetTxConfig+0x220>)
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	4b23      	ldr	r3, [pc, #140]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a92:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006a94:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006a98:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006a9a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006a9e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8006aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006aa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8006aa8:	f000 fab5 	bl	8007016 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006aac:	2001      	movs	r0, #1
 8006aae:	f7ff fc51 	bl	8006354 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006ab2:	481c      	ldr	r0, [pc, #112]	@ (8006b24 <RadioSetTxConfig+0x210>)
 8006ab4:	f002 f872 	bl	8008b9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ab8:	481b      	ldr	r0, [pc, #108]	@ (8006b28 <RadioSetTxConfig+0x214>)
 8006aba:	f002 f941 	bl	8008d40 <SUBGRF_SetPacketParams>
            break;
 8006abe:	e012      	b.n	8006ae6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006ac0:	2004      	movs	r0, #4
 8006ac2:	f7ff fc47 	bl	8006354 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006ac6:	4b16      	ldr	r3, [pc, #88]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006ace:	4a14      	ldr	r2, [pc, #80]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006ad4:	4b12      	ldr	r3, [pc, #72]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006ad6:	2216      	movs	r2, #22
 8006ad8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006adc:	4811      	ldr	r0, [pc, #68]	@ (8006b24 <RadioSetTxConfig+0x210>)
 8006ade:	f002 f85d 	bl	8008b9c <SUBGRF_SetModulationParams>
            break;
 8006ae2:	e000      	b.n	8006ae6 <RadioSetTxConfig+0x1d2>
            break;
 8006ae4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 fb8c 	bl	8009208 <SUBGRF_SetRfTxPower>
 8006af0:	4603      	mov	r3, r0
 8006af2:	461a      	mov	r2, r3
 8006af4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006af6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006afa:	210e      	movs	r1, #14
 8006afc:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006b00:	f002 fa66 	bl	8008fd0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006b04:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006b06:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 fd5b 	bl	80095c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006b10:	4a03      	ldr	r2, [pc, #12]	@ (8006b20 <RadioSetTxConfig+0x20c>)
 8006b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b14:	6053      	str	r3, [r2, #4]
}
 8006b16:	bf00      	nop
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000400 	.word	0x20000400
 8006b24:	20000438 	.word	0x20000438
 8006b28:	2000040e 	.word	0x2000040e
 8006b2c:	0800a748 	.word	0x0800a748
 8006b30:	0800a8e4 	.word	0x0800a8e4
 8006b34:	2000000d 	.word	0x2000000d

08006b38 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
    return true;
 8006b40:	2301      	movs	r3, #1
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b0a      	cmp	r3, #10
 8006b5e:	d83e      	bhi.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
 8006b60:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <RadioGetLoRaBandwidthInHz+0x1c>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b95 	.word	0x08006b95
 8006b6c:	08006ba5 	.word	0x08006ba5
 8006b70:	08006bb5 	.word	0x08006bb5
 8006b74:	08006bc5 	.word	0x08006bc5
 8006b78:	08006bcd 	.word	0x08006bcd
 8006b7c:	08006bd3 	.word	0x08006bd3
 8006b80:	08006bd9 	.word	0x08006bd9
 8006b84:	08006bdf 	.word	0x08006bdf
 8006b88:	08006b9d 	.word	0x08006b9d
 8006b8c:	08006bad 	.word	0x08006bad
 8006b90:	08006bbd 	.word	0x08006bbd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006b94:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8006b98:	60fb      	str	r3, [r7, #12]
        break;
 8006b9a:	e020      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006b9c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8006ba0:	60fb      	str	r3, [r7, #12]
        break;
 8006ba2:	e01c      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006ba4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8006ba8:	60fb      	str	r3, [r7, #12]
        break;
 8006baa:	e018      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006bac:	f245 1361 	movw	r3, #20833	@ 0x5161
 8006bb0:	60fb      	str	r3, [r7, #12]
        break;
 8006bb2:	e014      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006bb4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8006bb8:	60fb      	str	r3, [r7, #12]
        break;
 8006bba:	e010      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006bbc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8006bc0:	60fb      	str	r3, [r7, #12]
        break;
 8006bc2:	e00c      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006bc4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006bc8:	60fb      	str	r3, [r7, #12]
        break;
 8006bca:	e008      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006bcc:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <RadioGetLoRaBandwidthInHz+0xa0>)
 8006bce:	60fb      	str	r3, [r7, #12]
        break;
 8006bd0:	e005      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8006bd2:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8006bd4:	60fb      	str	r3, [r7, #12]
        break;
 8006bd6:	e002      	b.n	8006bde <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006bd8:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <RadioGetLoRaBandwidthInHz+0xa8>)
 8006bda:	60fb      	str	r3, [r7, #12]
        break;
 8006bdc:	bf00      	nop
    }

    return bandwidthInHz;
 8006bde:	68fb      	ldr	r3, [r7, #12]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	0001e848 	.word	0x0001e848
 8006bf0:	0003d090 	.word	0x0003d090
 8006bf4:	0007a120 	.word	0x0007a120

08006bf8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	461a      	mov	r2, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	70fb      	strb	r3, [r7, #3]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	803b      	strh	r3, [r7, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8006c12:	883b      	ldrh	r3, [r7, #0]
 8006c14:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006c16:	78ba      	ldrb	r2, [r7, #2]
 8006c18:	f082 0201 	eor.w	r2, r2, #1
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	d001      	beq.n	8006c26 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006c22:	2208      	movs	r2, #8
 8006c24:	e000      	b.n	8006c28 <RadioGetGfskTimeOnAirNumerator+0x30>
 8006c26:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006c28:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006c2a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006c2e:	7c3b      	ldrb	r3, [r7, #16]
 8006c30:	7d39      	ldrb	r1, [r7, #20]
 8006c32:	2900      	cmp	r1, #0
 8006c34:	d001      	beq.n	8006c3a <RadioGetGfskTimeOnAirNumerator+0x42>
 8006c36:	2102      	movs	r1, #2
 8006c38:	e000      	b.n	8006c3c <RadioGetGfskTimeOnAirNumerator+0x44>
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	440b      	add	r3, r1
 8006c3e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006c40:	4413      	add	r3, r2
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr

08006c4c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b08b      	sub	sp, #44	@ 0x2c
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4611      	mov	r1, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	71fb      	strb	r3, [r7, #7]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	3304      	adds	r3, #4
 8006c66:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b05      	cmp	r3, #5
 8006c72:	d002      	beq.n	8006c7a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d104      	bne.n	8006c84 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8006c7a:	88bb      	ldrh	r3, [r7, #4]
 8006c7c:	2b0b      	cmp	r3, #11
 8006c7e:	d801      	bhi.n	8006c84 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006c80:	230c      	movs	r3, #12
 8006c82:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b0b      	cmp	r3, #11
 8006c8e:	d008      	beq.n	8006ca2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b0c      	cmp	r3, #12
 8006c94:	d005      	beq.n	8006ca2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d105      	bne.n	8006ca8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b0c      	cmp	r3, #12
 8006ca0:	d102      	bne.n	8006ca8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006ca8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006cac:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006cae:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	d001      	beq.n	8006cba <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	e000      	b.n	8006cbc <RadioGetLoRaTimeOnAirNumerator+0x70>
 8006cba:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006cbc:	4413      	add	r3, r2
 8006cbe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006cc4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006cc6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	d001      	beq.n	8006cd2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	e000      	b.n	8006cd4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8006cd2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006cd4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006cd6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b06      	cmp	r3, #6
 8006cdc:	d803      	bhi.n	8006ce6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	623b      	str	r3, [r7, #32]
 8006ce4:	e00e      	b.n	8006d04 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3b02      	subs	r3, #2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	623b      	str	r3, [r7, #32]
 8006cfc:	e002      	b.n	8006d04 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da01      	bge.n	8006d0e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	4413      	add	r3, r2
 8006d14:	1e5a      	subs	r2, r3, #1
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	fb03 f202 	mul.w	r2, r3, r2
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	4413      	add	r3, r2
    int32_t intermediate =
 8006d26:	330c      	adds	r3, #12
 8006d28:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b06      	cmp	r3, #6
 8006d2e:	d802      	bhi.n	8006d36 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	3302      	adds	r3, #2
 8006d34:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	3b02      	subs	r3, #2
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	372c      	adds	r7, #44	@ 0x2c
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr
	...

08006d50 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af04      	add	r7, sp, #16
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	4613      	mov	r3, r2
 8006d62:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <RadioTimeOnAir+0x28>
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d017      	beq.n	8006da6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8006d76:	e035      	b.n	8006de4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006d78:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8006d7c:	8c3a      	ldrh	r2, [r7, #32]
 8006d7e:	7bb9      	ldrb	r1, [r7, #14]
 8006d80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff ff32 	bl	8006bf8 <RadioGetGfskTimeOnAirNumerator>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	613b      	str	r3, [r7, #16]
        break;
 8006da4:	e01e      	b.n	8006de4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006da6:	8c39      	ldrh	r1, [r7, #32]
 8006da8:	7bba      	ldrb	r2, [r7, #14]
 8006daa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	f7ff ff43 	bl	8006c4c <RadioGetLoRaTimeOnAirNumerator>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
 8006dd0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006dfc <RadioTimeOnAir+0xac>)
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff feb6 	bl	8006b4c <RadioGetLoRaBandwidthInHz>
 8006de0:	6138      	str	r0, [r7, #16]
        break;
 8006de2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4413      	add	r3, r2
 8006dea:	1e5a      	subs	r2, r3, #1
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	0800a8e4 	.word	0x0800a8e4

08006e00 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f240 2101 	movw	r1, #513	@ 0x201
 8006e14:	f240 2001 	movw	r0, #513	@ 0x201
 8006e18:	f001 fd2a 	bl	8008870 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006e1c:	4b70      	ldr	r3, [pc, #448]	@ (8006fe0 <RadioSend+0x1e0>)
 8006e1e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006e22:	2101      	movs	r1, #1
 8006e24:	4618      	mov	r0, r3
 8006e26:	f002 f9c7 	bl	80091b8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8006e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006fe0 <RadioSend+0x1e0>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d112      	bne.n	8006e58 <RadioSend+0x58>
 8006e32:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe0 <RadioSend+0x1e0>)
 8006e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e38:	2b06      	cmp	r3, #6
 8006e3a:	d10d      	bne.n	8006e58 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006e3c:	f640 0089 	movw	r0, #2185	@ 0x889
 8006e40:	f002 f8da 	bl	8008ff8 <SUBGRF_ReadRegister>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f023 0304 	bic.w	r3, r3, #4
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	f640 0089 	movw	r0, #2185	@ 0x889
 8006e52:	f002 f8bd 	bl	8008fd0 <SUBGRF_WriteRegister>
 8006e56:	e00c      	b.n	8006e72 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006e58:	f640 0089 	movw	r0, #2185	@ 0x889
 8006e5c:	f002 f8cc 	bl	8008ff8 <SUBGRF_ReadRegister>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f043 0304 	orr.w	r3, r3, #4
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f640 0089 	movw	r0, #2185	@ 0x889
 8006e6e:	f002 f8af 	bl	8008fd0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8006e72:	4b5b      	ldr	r3, [pc, #364]	@ (8006fe0 <RadioSend+0x1e0>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	f200 80a2 	bhi.w	8006fc0 <RadioSend+0x1c0>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <RadioSend+0x84>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb3 	.word	0x08006eb3
 8006e88:	08006e99 	.word	0x08006e99
 8006e8c:	08006eb3 	.word	0x08006eb3
 8006e90:	08006f09 	.word	0x08006f09
 8006e94:	08006f29 	.word	0x08006f29
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006e98:	4a51      	ldr	r2, [pc, #324]	@ (8006fe0 <RadioSend+0x1e0>)
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e9e:	4851      	ldr	r0, [pc, #324]	@ (8006fe4 <RadioSend+0x1e4>)
 8006ea0:	f001 ff4e 	bl	8008d40 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f9fe 	bl	80082ac <SUBGRF_SendPayload>
            break;
 8006eb0:	e087      	b.n	8006fc2 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8006eb2:	f002 fb7a 	bl	80095aa <RFW_Is_Init>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d118      	bne.n	8006eee <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006ebc:	f107 020d 	add.w	r2, r7, #13
 8006ec0:	78fb      	ldrb	r3, [r7, #3]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f002 fb88 	bl	80095da <RFW_TransmitInit>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006ed0:	7b7a      	ldrb	r2, [r7, #13]
 8006ed2:	4b43      	ldr	r3, [pc, #268]	@ (8006fe0 <RadioSend+0x1e0>)
 8006ed4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ed6:	4843      	ldr	r0, [pc, #268]	@ (8006fe4 <RadioSend+0x1e4>)
 8006ed8:	f001 ff32 	bl	8008d40 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8006edc:	7b7b      	ldrb	r3, [r7, #13]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f9e2 	bl	80082ac <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006ee8:	e06b      	b.n	8006fc2 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e073      	b.n	8006fd6 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006eee:	4a3c      	ldr	r2, [pc, #240]	@ (8006fe0 <RadioSend+0x1e0>)
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006ef4:	483b      	ldr	r0, [pc, #236]	@ (8006fe4 <RadioSend+0x1e4>)
 8006ef6:	f001 ff23 	bl	8008d40 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8006efa:	78fb      	ldrb	r3, [r7, #3]
 8006efc:	2200      	movs	r2, #0
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 f9d3 	bl	80082ac <SUBGRF_SendPayload>
            break;
 8006f06:	e05c      	b.n	8006fc2 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006f08:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <RadioSend+0x1e0>)
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006f0e:	4a34      	ldr	r2, [pc, #208]	@ (8006fe0 <RadioSend+0x1e0>)
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f14:	4833      	ldr	r0, [pc, #204]	@ (8006fe4 <RadioSend+0x1e4>)
 8006f16:	f001 ff13 	bl	8008d40 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f9c3 	bl	80082ac <SUBGRF_SendPayload>
            break;
 8006f26:	e04c      	b.n	8006fc2 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	482e      	ldr	r0, [pc, #184]	@ (8006fe8 <RadioSend+0x1e8>)
 8006f30:	f000 fc96 	bl	8007860 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006f34:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe0 <RadioSend+0x1e0>)
 8006f36:	2202      	movs	r2, #2
 8006f38:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	4b27      	ldr	r3, [pc, #156]	@ (8006fe0 <RadioSend+0x1e0>)
 8006f42:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f44:	4827      	ldr	r0, [pc, #156]	@ (8006fe4 <RadioSend+0x1e4>)
 8006f46:	f001 fefb 	bl	8008d40 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	20f1      	movs	r0, #241	@ 0xf1
 8006f4e:	f000 f963 	bl	8007218 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8006f52:	2100      	movs	r1, #0
 8006f54:	20f0      	movs	r0, #240	@ 0xf0
 8006f56:	f000 f95f 	bl	8007218 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006f5a:	4b21      	ldr	r3, [pc, #132]	@ (8006fe0 <RadioSend+0x1e0>)
 8006f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5e:	2b64      	cmp	r3, #100	@ 0x64
 8006f60:	d108      	bne.n	8006f74 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8006f62:	2170      	movs	r1, #112	@ 0x70
 8006f64:	20f3      	movs	r0, #243	@ 0xf3
 8006f66:	f000 f957 	bl	8007218 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8006f6a:	211d      	movs	r1, #29
 8006f6c:	20f2      	movs	r0, #242	@ 0xf2
 8006f6e:	f000 f953 	bl	8007218 <RadioWrite>
 8006f72:	e007      	b.n	8006f84 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8006f74:	21e1      	movs	r1, #225	@ 0xe1
 8006f76:	20f3      	movs	r0, #243	@ 0xf3
 8006f78:	f000 f94e 	bl	8007218 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8006f7c:	2104      	movs	r1, #4
 8006f7e:	20f2      	movs	r0, #242	@ 0xf2
 8006f80:	f000 f94a 	bl	8007218 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	20f4      	movs	r0, #244	@ 0xf4
 8006f9c:	f000 f93c 	bl	8007218 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8006fa0:	89fb      	ldrh	r3, [r7, #14]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	20f5      	movs	r0, #245	@ 0xf5
 8006fa8:	f000 f936 	bl	8007218 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	480b      	ldr	r0, [pc, #44]	@ (8006fe8 <RadioSend+0x1e8>)
 8006fba:	f001 f977 	bl	80082ac <SUBGRF_SendPayload>
            break;
 8006fbe:	e000      	b.n	8006fc2 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006fc0:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <RadioSend+0x1e0>)
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4808      	ldr	r0, [pc, #32]	@ (8006fec <RadioSend+0x1ec>)
 8006fca:	f002 fdcd 	bl	8009b68 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8006fce:	4807      	ldr	r0, [pc, #28]	@ (8006fec <RadioSend+0x1ec>)
 8006fd0:	f002 fcec 	bl	80099ac <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000400 	.word	0x20000400
 8006fe4:	2000040e 	.word	0x2000040e
 8006fe8:	200002fc 	.word	0x200002fc
 8006fec:	2000045c 	.word	0x2000045c

08006ff0 <RadioSleep>:

static void RadioSleep( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8006ffa:	793b      	ldrb	r3, [r7, #4]
 8006ffc:	f043 0304 	orr.w	r3, r3, #4
 8007000:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007002:	7938      	ldrb	r0, [r7, #4]
 8007004:	f001 fa2e 	bl	8008464 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007008:	2002      	movs	r0, #2
 800700a:	f7f9 ffdd 	bl	8000fc8 <HAL_Delay>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <RadioStandby>:

static void RadioStandby( void )
{
 8007016:	b580      	push	{r7, lr}
 8007018:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800701a:	2000      	movs	r0, #0
 800701c:	f001 fa54 	bl	80084c8 <SUBGRF_SetStandby>
}
 8007020:	bf00      	nop
 8007022:	bd80      	pop	{r7, pc}

08007024 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800702c:	f002 fabd 	bl	80095aa <RFW_Is_Init>
 8007030:	4603      	mov	r3, r0
 8007032:	2b01      	cmp	r3, #1
 8007034:	d102      	bne.n	800703c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8007036:	f002 fae0 	bl	80095fa <RFW_ReceiveInit>
 800703a:	e007      	b.n	800704c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800703c:	2300      	movs	r3, #0
 800703e:	2200      	movs	r2, #0
 8007040:	f240 2162 	movw	r1, #610	@ 0x262
 8007044:	f240 2062 	movw	r0, #610	@ 0x262
 8007048:	f001 fc12 	bl	8008870 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d006      	beq.n	8007060 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4811      	ldr	r0, [pc, #68]	@ (800709c <RadioRx+0x78>)
 8007056:	f002 fd87 	bl	8009b68 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800705a:	4810      	ldr	r0, [pc, #64]	@ (800709c <RadioRx+0x78>)
 800705c:	f002 fca6 	bl	80099ac <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007060:	4b0f      	ldr	r3, [pc, #60]	@ (80070a0 <RadioRx+0x7c>)
 8007062:	2200      	movs	r2, #0
 8007064:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007066:	4b0e      	ldr	r3, [pc, #56]	@ (80070a0 <RadioRx+0x7c>)
 8007068:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f002 f8a2 	bl	80091b8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007074:	4b0a      	ldr	r3, [pc, #40]	@ (80070a0 <RadioRx+0x7c>)
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800707c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8007080:	f001 fa5e 	bl	8008540 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007084:	e005      	b.n	8007092 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007086:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <RadioRx+0x7c>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	019b      	lsls	r3, r3, #6
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fa57 	bl	8008540 <SUBGRF_SetRx>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000474 	.word	0x20000474
 80070a0:	20000400 	.word	0x20000400

080070a4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80070ac:	f002 fa7d 	bl	80095aa <RFW_Is_Init>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d102      	bne.n	80070bc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80070b6:	f002 faa0 	bl	80095fa <RFW_ReceiveInit>
 80070ba:	e007      	b.n	80070cc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80070bc:	2300      	movs	r3, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	f240 2162 	movw	r1, #610	@ 0x262
 80070c4:	f240 2062 	movw	r0, #610	@ 0x262
 80070c8:	f001 fbd2 	bl	8008870 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d006      	beq.n	80070e0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4811      	ldr	r0, [pc, #68]	@ (800711c <RadioRxBoosted+0x78>)
 80070d6:	f002 fd47 	bl	8009b68 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80070da:	4810      	ldr	r0, [pc, #64]	@ (800711c <RadioRxBoosted+0x78>)
 80070dc:	f002 fc66 	bl	80099ac <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80070e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <RadioRxBoosted+0x7c>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80070e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007120 <RadioRxBoosted+0x7c>)
 80070e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f002 f862 	bl	80091b8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80070f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007120 <RadioRxBoosted+0x7c>)
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80070fc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8007100:	f001 fa3e 	bl	8008580 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007104:	e005      	b.n	8007112 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007106:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <RadioRxBoosted+0x7c>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	019b      	lsls	r3, r3, #6
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fa37 	bl	8008580 <SUBGRF_SetRxBoosted>
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000474 	.word	0x20000474
 8007120:	20000400 	.word	0x20000400

08007124 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	005a      	lsls	r2, r3, #1
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	4413      	add	r3, r2
 8007136:	4a0c      	ldr	r2, [pc, #48]	@ (8007168 <RadioSetRxDutyCycle+0x44>)
 8007138:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800713a:	2300      	movs	r3, #0
 800713c:	2200      	movs	r2, #0
 800713e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007142:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007146:	f001 fb93 	bl	8008870 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800714a:	4b07      	ldr	r3, [pc, #28]	@ (8007168 <RadioSetRxDutyCycle+0x44>)
 800714c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f002 f830 	bl	80091b8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fa34 	bl	80085c8 <SUBGRF_SetRxDutyCycle>
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000400 	.word	0x20000400

0800716c <RadioStartCad>:

static void RadioStartCad( void )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007170:	4b09      	ldr	r3, [pc, #36]	@ (8007198 <RadioStartCad+0x2c>)
 8007172:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f002 f81d 	bl	80091b8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800717e:	2300      	movs	r3, #0
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007186:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800718a:	f001 fb71 	bl	8008870 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800718e:	f001 fa47 	bl	8008620 <SUBGRF_SetCad>
}
 8007192:	bf00      	nop
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000400 	.word	0x20000400

0800719c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
 80071a8:	4613      	mov	r3, r2
 80071aa:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80071ac:	883b      	ldrh	r3, [r7, #0]
 80071ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fbb5 	bl	8008928 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80071be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 f820 	bl	8009208 <SUBGRF_SetRfTxPower>
 80071c8:	4603      	mov	r3, r0
 80071ca:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80071cc:	210e      	movs	r1, #14
 80071ce:	f640 101f 	movw	r0, #2335	@ 0x91f
 80071d2:	f001 fefd 	bl	8008fd0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	2101      	movs	r1, #1
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 ffec 	bl	80091b8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80071e0:	f001 fa2c 	bl	800863c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	4805      	ldr	r0, [pc, #20]	@ (80071fc <RadioSetTxContinuousWave+0x60>)
 80071e8:	f002 fcbe 	bl	8009b68 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80071ec:	4803      	ldr	r0, [pc, #12]	@ (80071fc <RadioSetTxContinuousWave+0x60>)
 80071ee:	f002 fbdd 	bl	80099ac <UTIL_TIMER_Start>
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000045c 	.word	0x2000045c

08007200 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800720a:	f001 fe4e 	bl	8008eaa <SUBGRF_GetRssiInst>
 800720e:	4603      	mov	r3, r0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	460a      	mov	r2, r1
 8007222:	80fb      	strh	r3, [r7, #6]
 8007224:	4613      	mov	r3, r2
 8007226:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8007228:	797a      	ldrb	r2, [r7, #5]
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f001 fece 	bl	8008fd0 <SUBGRF_WriteRegister>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fed5 	bl	8008ff8 <SUBGRF_ReadRegister>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	4613      	mov	r3, r2
 8007266:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007268:	797b      	ldrb	r3, [r7, #5]
 800726a:	b29a      	uxth	r2, r3
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f001 fed5 	bl	8009020 <SUBGRF_WriteRegisters>
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	4603      	mov	r3, r0
 8007286:	6039      	str	r1, [r7, #0]
 8007288:	80fb      	strh	r3, [r7, #6]
 800728a:	4613      	mov	r3, r2
 800728c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800728e:	797b      	ldrb	r3, [r7, #5]
 8007290:	b29a      	uxth	r2, r3
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f001 fee4 	bl	8009064 <SUBGRF_ReadRegisters>
}
 800729c:	bf00      	nop
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	460a      	mov	r2, r1
 80072ae:	71fb      	strb	r3, [r7, #7]
 80072b0:	4613      	mov	r3, r2
 80072b2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10a      	bne.n	80072d0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80072ba:	4a0e      	ldr	r2, [pc, #56]	@ (80072f4 <RadioSetMaxPayloadLength+0x50>)
 80072bc:	79bb      	ldrb	r3, [r7, #6]
 80072be:	7013      	strb	r3, [r2, #0]
 80072c0:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <RadioSetMaxPayloadLength+0x50>)
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <RadioSetMaxPayloadLength+0x54>)
 80072c6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80072c8:	480c      	ldr	r0, [pc, #48]	@ (80072fc <RadioSetMaxPayloadLength+0x58>)
 80072ca:	f001 fd39 	bl	8008d40 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80072ce:	e00d      	b.n	80072ec <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80072d0:	4b09      	ldr	r3, [pc, #36]	@ (80072f8 <RadioSetMaxPayloadLength+0x54>)
 80072d2:	7d5b      	ldrb	r3, [r3, #21]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d109      	bne.n	80072ec <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80072d8:	4a06      	ldr	r2, [pc, #24]	@ (80072f4 <RadioSetMaxPayloadLength+0x50>)
 80072da:	79bb      	ldrb	r3, [r7, #6]
 80072dc:	7013      	strb	r3, [r2, #0]
 80072de:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <RadioSetMaxPayloadLength+0x50>)
 80072e0:	781a      	ldrb	r2, [r3, #0]
 80072e2:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <RadioSetMaxPayloadLength+0x54>)
 80072e4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80072e6:	4805      	ldr	r0, [pc, #20]	@ (80072fc <RadioSetMaxPayloadLength+0x58>)
 80072e8:	f001 fd2a 	bl	8008d40 <SUBGRF_SetPacketParams>
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	2000000d 	.word	0x2000000d
 80072f8:	20000400 	.word	0x20000400
 80072fc:	2000040e 	.word	0x2000040e

08007300 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800730a:	4a13      	ldr	r2, [pc, #76]	@ (8007358 <RadioSetPublicNetwork+0x58>)
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	7313      	strb	r3, [r2, #12]
 8007310:	4b11      	ldr	r3, [pc, #68]	@ (8007358 <RadioSetPublicNetwork+0x58>)
 8007312:	7b1a      	ldrb	r2, [r3, #12]
 8007314:	4b10      	ldr	r3, [pc, #64]	@ (8007358 <RadioSetPublicNetwork+0x58>)
 8007316:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007318:	2001      	movs	r0, #1
 800731a:	f7ff f81b 	bl	8006354 <RadioSetModem>
    if( enable == true )
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007324:	2134      	movs	r1, #52	@ 0x34
 8007326:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800732a:	f001 fe51 	bl	8008fd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800732e:	2144      	movs	r1, #68	@ 0x44
 8007330:	f240 7041 	movw	r0, #1857	@ 0x741
 8007334:	f001 fe4c 	bl	8008fd0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007338:	e009      	b.n	800734e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800733a:	2114      	movs	r1, #20
 800733c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8007340:	f001 fe46 	bl	8008fd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007344:	2124      	movs	r1, #36	@ 0x24
 8007346:	f240 7041 	movw	r0, #1857	@ 0x741
 800734a:	f001 fe41 	bl	8008fd0 <SUBGRF_WriteRegister>
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000400 	.word	0x20000400

0800735c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007360:	f001 ff86 	bl	8009270 <SUBGRF_GetRadioWakeUpTime>
 8007364:	4603      	mov	r3, r0
 8007366:	3303      	adds	r3, #3
}
 8007368:	4618      	mov	r0, r3
 800736a:	bd80      	pop	{r7, pc}

0800736c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007374:	f000 f80e 	bl	8007394 <RadioOnTxTimeoutProcess>
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007388:	f000 f818 	bl	80073bc <RadioOnRxTimeoutProcess>
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007398:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <RadioOnTxTimeoutProcess+0x24>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <RadioOnTxTimeoutProcess+0x1e>
 80073a0:	4b05      	ldr	r3, [pc, #20]	@ (80073b8 <RadioOnTxTimeoutProcess+0x24>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80073aa:	4b03      	ldr	r3, [pc, #12]	@ (80073b8 <RadioOnTxTimeoutProcess+0x24>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	4798      	blx	r3
    }
}
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200003fc 	.word	0x200003fc

080073bc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <RadioOnRxTimeoutProcess+0x24>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <RadioOnRxTimeoutProcess+0x1e>
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <RadioOnRxTimeoutProcess+0x24>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80073d2:	4b03      	ldr	r3, [pc, #12]	@ (80073e0 <RadioOnRxTimeoutProcess+0x24>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	4798      	blx	r3
    }
}
 80073da:	bf00      	nop
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	200003fc 	.word	0x200003fc

080073e4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80073ee:	4a05      	ldr	r2, [pc, #20]	@ (8007404 <RadioOnDioIrq+0x20>)
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80073f6:	f000 f807 	bl	8007408 <RadioIrqProcess>
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000400 	.word	0x20000400

08007408 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007408:	b5b0      	push	{r4, r5, r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8007416:	4ba5      	ldr	r3, [pc, #660]	@ (80076ac <RadioIrqProcess+0x2a4>)
 8007418:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800741c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007420:	f000 810d 	beq.w	800763e <RadioIrqProcess+0x236>
 8007424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007428:	f300 81c0 	bgt.w	80077ac <RadioIrqProcess+0x3a4>
 800742c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007430:	f000 80f1 	beq.w	8007616 <RadioIrqProcess+0x20e>
 8007434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007438:	f300 81b8 	bgt.w	80077ac <RadioIrqProcess+0x3a4>
 800743c:	2b80      	cmp	r3, #128	@ 0x80
 800743e:	f000 80d6 	beq.w	80075ee <RadioIrqProcess+0x1e6>
 8007442:	2b80      	cmp	r3, #128	@ 0x80
 8007444:	f300 81b2 	bgt.w	80077ac <RadioIrqProcess+0x3a4>
 8007448:	2b20      	cmp	r3, #32
 800744a:	dc49      	bgt.n	80074e0 <RadioIrqProcess+0xd8>
 800744c:	2b00      	cmp	r3, #0
 800744e:	f340 81ad 	ble.w	80077ac <RadioIrqProcess+0x3a4>
 8007452:	3b01      	subs	r3, #1
 8007454:	2b1f      	cmp	r3, #31
 8007456:	f200 81a9 	bhi.w	80077ac <RadioIrqProcess+0x3a4>
 800745a:	a201      	add	r2, pc, #4	@ (adr r2, 8007460 <RadioIrqProcess+0x58>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	080074e9 	.word	0x080074e9
 8007464:	08007523 	.word	0x08007523
 8007468:	080077ad 	.word	0x080077ad
 800746c:	080076c9 	.word	0x080076c9
 8007470:	080077ad 	.word	0x080077ad
 8007474:	080077ad 	.word	0x080077ad
 8007478:	080077ad 	.word	0x080077ad
 800747c:	08007737 	.word	0x08007737
 8007480:	080077ad 	.word	0x080077ad
 8007484:	080077ad 	.word	0x080077ad
 8007488:	080077ad 	.word	0x080077ad
 800748c:	080077ad 	.word	0x080077ad
 8007490:	080077ad 	.word	0x080077ad
 8007494:	080077ad 	.word	0x080077ad
 8007498:	080077ad 	.word	0x080077ad
 800749c:	080077ad 	.word	0x080077ad
 80074a0:	080077ad 	.word	0x080077ad
 80074a4:	080077ad 	.word	0x080077ad
 80074a8:	080077ad 	.word	0x080077ad
 80074ac:	080077ad 	.word	0x080077ad
 80074b0:	080077ad 	.word	0x080077ad
 80074b4:	080077ad 	.word	0x080077ad
 80074b8:	080077ad 	.word	0x080077ad
 80074bc:	080077ad 	.word	0x080077ad
 80074c0:	080077ad 	.word	0x080077ad
 80074c4:	080077ad 	.word	0x080077ad
 80074c8:	080077ad 	.word	0x080077ad
 80074cc:	080077ad 	.word	0x080077ad
 80074d0:	080077ad 	.word	0x080077ad
 80074d4:	080077ad 	.word	0x080077ad
 80074d8:	080077ad 	.word	0x080077ad
 80074dc:	08007747 	.word	0x08007747
 80074e0:	2b40      	cmp	r3, #64	@ 0x40
 80074e2:	f000 814b 	beq.w	800777c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80074e6:	e161      	b.n	80077ac <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80074e8:	4871      	ldr	r0, [pc, #452]	@ (80076b0 <RadioIrqProcess+0x2a8>)
 80074ea:	f002 facd 	bl	8009a88 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80074ee:	2000      	movs	r0, #0
 80074f0:	f000 ffea 	bl	80084c8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80074f4:	f002 f860 	bl	80095b8 <RFW_Is_LongPacketModeEnabled>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80074fe:	f002 f884 	bl	800960a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007502:	4b6c      	ldr	r3, [pc, #432]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 8152 	beq.w	80077b0 <RadioIrqProcess+0x3a8>
 800750c:	4b69      	ldr	r3, [pc, #420]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 814c 	beq.w	80077b0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007518:	4b66      	ldr	r3, [pc, #408]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4798      	blx	r3
        break;
 8007520:	e146      	b.n	80077b0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007522:	4865      	ldr	r0, [pc, #404]	@ (80076b8 <RadioIrqProcess+0x2b0>)
 8007524:	f002 fab0 	bl	8009a88 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007528:	4b60      	ldr	r3, [pc, #384]	@ (80076ac <RadioIrqProcess+0x2a4>)
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	f083 0301 	eor.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d014      	beq.n	8007560 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007536:	2000      	movs	r0, #0
 8007538:	f000 ffc6 	bl	80084c8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800753c:	2100      	movs	r1, #0
 800753e:	f640 1002 	movw	r0, #2306	@ 0x902
 8007542:	f001 fd45 	bl	8008fd0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007546:	f640 1044 	movw	r0, #2372	@ 0x944
 800754a:	f001 fd55 	bl	8008ff8 <SUBGRF_ReadRegister>
 800754e:	4603      	mov	r3, r0
 8007550:	f043 0302 	orr.w	r3, r3, #2
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	f640 1044 	movw	r0, #2372	@ 0x944
 800755c:	f001 fd38 	bl	8008fd0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8007560:	1dfb      	adds	r3, r7, #7
 8007562:	22ff      	movs	r2, #255	@ 0xff
 8007564:	4619      	mov	r1, r3
 8007566:	4855      	ldr	r0, [pc, #340]	@ (80076bc <RadioIrqProcess+0x2b4>)
 8007568:	f000 fe7e 	bl	8008268 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800756c:	4854      	ldr	r0, [pc, #336]	@ (80076c0 <RadioIrqProcess+0x2b8>)
 800756e:	f001 fcdd 	bl	8008f2c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007572:	4b50      	ldr	r3, [pc, #320]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 811c 	beq.w	80077b4 <RadioIrqProcess+0x3ac>
 800757c:	4b4d      	ldr	r3, [pc, #308]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 8116 	beq.w	80077b4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8007588:	4b48      	ldr	r3, [pc, #288]	@ (80076ac <RadioIrqProcess+0x2a4>)
 800758a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800758e:	2b01      	cmp	r3, #1
 8007590:	d10e      	bne.n	80075b0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8007592:	4b48      	ldr	r3, [pc, #288]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689c      	ldr	r4, [r3, #8]
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	4619      	mov	r1, r3
 800759c:	4b43      	ldr	r3, [pc, #268]	@ (80076ac <RadioIrqProcess+0x2a4>)
 800759e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80075a2:	461a      	mov	r2, r3
 80075a4:	4b41      	ldr	r3, [pc, #260]	@ (80076ac <RadioIrqProcess+0x2a4>)
 80075a6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80075aa:	4844      	ldr	r0, [pc, #272]	@ (80076bc <RadioIrqProcess+0x2b4>)
 80075ac:	47a0      	blx	r4
                break;
 80075ae:	e01d      	b.n	80075ec <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80075b0:	4b3e      	ldr	r3, [pc, #248]	@ (80076ac <RadioIrqProcess+0x2a4>)
 80075b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b4:	463a      	mov	r2, r7
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f001 ff4b 	bl	8009454 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80075be:	4b3d      	ldr	r3, [pc, #244]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689c      	ldr	r4, [r3, #8]
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	4619      	mov	r1, r3
 80075c8:	4b38      	ldr	r3, [pc, #224]	@ (80076ac <RadioIrqProcess+0x2a4>)
 80075ca:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 80075ce:	4618      	mov	r0, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80075d6:	4a3b      	ldr	r2, [pc, #236]	@ (80076c4 <RadioIrqProcess+0x2bc>)
 80075d8:	fb82 5203 	smull	r5, r2, r2, r3
 80075dc:	1192      	asrs	r2, r2, #6
 80075de:	17db      	asrs	r3, r3, #31
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	4602      	mov	r2, r0
 80075e6:	4835      	ldr	r0, [pc, #212]	@ (80076bc <RadioIrqProcess+0x2b4>)
 80075e8:	47a0      	blx	r4
                break;
 80075ea:	bf00      	nop
        break;
 80075ec:	e0e2      	b.n	80077b4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80075ee:	2000      	movs	r0, #0
 80075f0:	f000 ff6a 	bl	80084c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80075f4:	4b2f      	ldr	r3, [pc, #188]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80dd 	beq.w	80077b8 <RadioIrqProcess+0x3b0>
 80075fe:	4b2d      	ldr	r3, [pc, #180]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80d7 	beq.w	80077b8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800760a:	4b2a      	ldr	r3, [pc, #168]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2000      	movs	r0, #0
 8007612:	4798      	blx	r3
        break;
 8007614:	e0d0      	b.n	80077b8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007616:	2000      	movs	r0, #0
 8007618:	f000 ff56 	bl	80084c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800761c:	4b25      	ldr	r3, [pc, #148]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80cb 	beq.w	80077bc <RadioIrqProcess+0x3b4>
 8007626:	4b23      	ldr	r3, [pc, #140]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80c5 	beq.w	80077bc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007632:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2001      	movs	r0, #1
 800763a:	4798      	blx	r3
        break;
 800763c:	e0be      	b.n	80077bc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800763e:	f000 fdf9 	bl	8008234 <SUBGRF_GetOperatingMode>
 8007642:	4603      	mov	r3, r0
 8007644:	2b04      	cmp	r3, #4
 8007646:	d115      	bne.n	8007674 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007648:	4819      	ldr	r0, [pc, #100]	@ (80076b0 <RadioIrqProcess+0x2a8>)
 800764a:	f002 fa1d 	bl	8009a88 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800764e:	2000      	movs	r0, #0
 8007650:	f000 ff3a 	bl	80084c8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007654:	4b17      	ldr	r3, [pc, #92]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80b1 	beq.w	80077c0 <RadioIrqProcess+0x3b8>
 800765e:	4b15      	ldr	r3, [pc, #84]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80ab 	beq.w	80077c0 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800766a:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4798      	blx	r3
        break;
 8007672:	e0a5      	b.n	80077c0 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007674:	f000 fdde 	bl	8008234 <SUBGRF_GetOperatingMode>
 8007678:	4603      	mov	r3, r0
 800767a:	2b05      	cmp	r3, #5
 800767c:	f040 80a0 	bne.w	80077c0 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8007680:	480d      	ldr	r0, [pc, #52]	@ (80076b8 <RadioIrqProcess+0x2b0>)
 8007682:	f002 fa01 	bl	8009a88 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007686:	2000      	movs	r0, #0
 8007688:	f000 ff1e 	bl	80084c8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800768c:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8095 	beq.w	80077c0 <RadioIrqProcess+0x3b8>
 8007696:	4b07      	ldr	r3, [pc, #28]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 808f 	beq.w	80077c0 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80076a2:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <RadioIrqProcess+0x2ac>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	4798      	blx	r3
        break;
 80076aa:	e089      	b.n	80077c0 <RadioIrqProcess+0x3b8>
 80076ac:	20000400 	.word	0x20000400
 80076b0:	2000045c 	.word	0x2000045c
 80076b4:	200003fc 	.word	0x200003fc
 80076b8:	20000474 	.word	0x20000474
 80076bc:	200002fc 	.word	0x200002fc
 80076c0:	20000424 	.word	0x20000424
 80076c4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80076c8:	4b44      	ldr	r3, [pc, #272]	@ (80077dc <RadioIrqProcess+0x3d4>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d079      	beq.n	80077c4 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80076d0:	4a43      	ldr	r2, [pc, #268]	@ (80077e0 <RadioIrqProcess+0x3d8>)
 80076d2:	4b42      	ldr	r3, [pc, #264]	@ (80077dc <RadioIrqProcess+0x3d4>)
 80076d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	f640 1003 	movw	r0, #2307	@ 0x903
 80076e0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80076e2:	4a3f      	ldr	r2, [pc, #252]	@ (80077e0 <RadioIrqProcess+0x3d8>)
 80076e4:	4b3d      	ldr	r3, [pc, #244]	@ (80077dc <RadioIrqProcess+0x3d4>)
 80076e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	4619      	mov	r1, r3
 80076ee:	f640 1004 	movw	r0, #2308	@ 0x904
 80076f2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80076f4:	4a3a      	ldr	r2, [pc, #232]	@ (80077e0 <RadioIrqProcess+0x3d8>)
 80076f6:	4b39      	ldr	r3, [pc, #228]	@ (80077dc <RadioIrqProcess+0x3d4>)
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	4619      	mov	r1, r3
 80076fe:	f640 1005 	movw	r0, #2309	@ 0x905
 8007702:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007704:	4c36      	ldr	r4, [pc, #216]	@ (80077e0 <RadioIrqProcess+0x3d8>)
 8007706:	4b37      	ldr	r3, [pc, #220]	@ (80077e4 <RadioIrqProcess+0x3dc>)
 8007708:	f640 1002 	movw	r0, #2306	@ 0x902
 800770c:	4798      	blx	r3
 800770e:	4603      	mov	r3, r0
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	4619      	mov	r1, r3
 8007718:	f640 1002 	movw	r0, #2306	@ 0x902
 800771c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800771e:	4b2f      	ldr	r3, [pc, #188]	@ (80077dc <RadioIrqProcess+0x3d4>)
 8007720:	2200      	movs	r2, #0
 8007722:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007724:	2300      	movs	r3, #0
 8007726:	2200      	movs	r2, #0
 8007728:	f240 2162 	movw	r1, #610	@ 0x262
 800772c:	f240 2062 	movw	r0, #610	@ 0x262
 8007730:	f001 f89e 	bl	8008870 <SUBGRF_SetDioIrqParams>
        break;
 8007734:	e046      	b.n	80077c4 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007736:	f001 ff38 	bl	80095aa <RFW_Is_Init>
 800773a:	4603      	mov	r3, r0
 800773c:	2b01      	cmp	r3, #1
 800773e:	d143      	bne.n	80077c8 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007740:	f001 ff69 	bl	8009616 <RFW_ReceivePayload>
        break;
 8007744:	e040      	b.n	80077c8 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8007746:	4828      	ldr	r0, [pc, #160]	@ (80077e8 <RadioIrqProcess+0x3e0>)
 8007748:	f002 f99e 	bl	8009a88 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800774c:	4b23      	ldr	r3, [pc, #140]	@ (80077dc <RadioIrqProcess+0x3d4>)
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	f083 0301 	eor.w	r3, r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800775a:	2000      	movs	r0, #0
 800775c:	f000 feb4 	bl	80084c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007760:	4b22      	ldr	r3, [pc, #136]	@ (80077ec <RadioIrqProcess+0x3e4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d031      	beq.n	80077cc <RadioIrqProcess+0x3c4>
 8007768:	4b20      	ldr	r3, [pc, #128]	@ (80077ec <RadioIrqProcess+0x3e4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d02c      	beq.n	80077cc <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8007772:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <RadioIrqProcess+0x3e4>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4798      	blx	r3
        break;
 800777a:	e027      	b.n	80077cc <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800777c:	4b17      	ldr	r3, [pc, #92]	@ (80077dc <RadioIrqProcess+0x3d4>)
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	f083 0301 	eor.w	r3, r3, #1
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800778a:	2000      	movs	r0, #0
 800778c:	f000 fe9c 	bl	80084c8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007790:	4b16      	ldr	r3, [pc, #88]	@ (80077ec <RadioIrqProcess+0x3e4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01b      	beq.n	80077d0 <RadioIrqProcess+0x3c8>
 8007798:	4b14      	ldr	r3, [pc, #80]	@ (80077ec <RadioIrqProcess+0x3e4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d016      	beq.n	80077d0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80077a2:	4b12      	ldr	r3, [pc, #72]	@ (80077ec <RadioIrqProcess+0x3e4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	4798      	blx	r3
        break;
 80077aa:	e011      	b.n	80077d0 <RadioIrqProcess+0x3c8>
        break;
 80077ac:	bf00      	nop
 80077ae:	e010      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077b0:	bf00      	nop
 80077b2:	e00e      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077b4:	bf00      	nop
 80077b6:	e00c      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077b8:	bf00      	nop
 80077ba:	e00a      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077bc:	bf00      	nop
 80077be:	e008      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077c0:	bf00      	nop
 80077c2:	e006      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077c4:	bf00      	nop
 80077c6:	e004      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077c8:	bf00      	nop
 80077ca:	e002      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077cc:	bf00      	nop
 80077ce:	e000      	b.n	80077d2 <RadioIrqProcess+0x3ca>
        break;
 80077d0:	bf00      	nop
    }
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000400 	.word	0x20000400
 80077e0:	08007219 	.word	0x08007219
 80077e4:	0800723d 	.word	0x0800723d
 80077e8:	20000474 	.word	0x20000474
 80077ec:	200003fc 	.word	0x200003fc

080077f0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80077f4:	4b09      	ldr	r3, [pc, #36]	@ (800781c <RadioTxPrbs+0x2c>)
 80077f6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fcdb 	bl	80091b8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007802:	4b07      	ldr	r3, [pc, #28]	@ (8007820 <RadioTxPrbs+0x30>)
 8007804:	212d      	movs	r1, #45	@ 0x2d
 8007806:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800780a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800780c:	f000 ff1f 	bl	800864e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007810:	4804      	ldr	r0, [pc, #16]	@ (8007824 <RadioTxPrbs+0x34>)
 8007812:	f000 fe75 	bl	8008500 <SUBGRF_SetTx>
}
 8007816:	bf00      	nop
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000400 	.word	0x20000400
 8007820:	08007219 	.word	0x08007219
 8007824:	000fffff 	.word	0x000fffff

08007828 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fce6 	bl	8009208 <SUBGRF_SetRfTxPower>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007840:	210e      	movs	r1, #14
 8007842:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007846:	f001 fbc3 	bl	8008fd0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2101      	movs	r1, #1
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fcb2 	bl	80091b8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007854:	f000 fef2 	bl	800863c <SUBGRF_SetTxContinuousWave>
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8007860:	b480      	push	{r7}
 8007862:	b089      	sub	sp, #36	@ 0x24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8007876:	2300      	movs	r3, #0
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	e011      	b.n	80078a0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	440b      	add	r3, r1
 800788a:	43d2      	mvns	r2, r2
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	3301      	adds	r3, #1
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	dbe9      	blt.n	800787c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80078a8:	2300      	movs	r3, #0
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e049      	b.n	8007942 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	425a      	negs	r2, r3
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	f002 0207 	and.w	r2, r2, #7
 80078ba:	bf58      	it	pl
 80078bc:	4253      	negpl	r3, r2
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	f1c3 0307 	rsb	r3, r3, #7
 80078c4:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da00      	bge.n	80078ce <payload_integration+0x6e>
 80078cc:	3307      	adds	r3, #7
 80078ce:	10db      	asrs	r3, r3, #3
 80078d0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	3301      	adds	r3, #1
 80078d6:	425a      	negs	r2, r3
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	f002 0207 	and.w	r2, r2, #7
 80078e0:	bf58      	it	pl
 80078e2:	4253      	negpl	r3, r2
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f1c3 0307 	rsb	r3, r3, #7
 80078ea:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	3301      	adds	r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	da00      	bge.n	80078f6 <payload_integration+0x96>
 80078f4:	3307      	adds	r3, #7
 80078f6:	10db      	asrs	r3, r3, #3
 80078f8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80078fa:	7dbb      	ldrb	r3, [r7, #22]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	4413      	add	r3, r2
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	7dfb      	ldrb	r3, [r7, #23]
 8007906:	fa42 f303 	asr.w	r3, r2, r3
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007912:	7ffa      	ldrb	r2, [r7, #31]
 8007914:	7cfb      	ldrb	r3, [r7, #19]
 8007916:	4053      	eors	r3, r2
 8007918:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800791a:	7d3b      	ldrb	r3, [r7, #20]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b25a      	sxtb	r2, r3
 8007924:	7ff9      	ldrb	r1, [r7, #31]
 8007926:	7d7b      	ldrb	r3, [r7, #21]
 8007928:	fa01 f303 	lsl.w	r3, r1, r3
 800792c:	b25b      	sxtb	r3, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	b259      	sxtb	r1, r3
 8007932:	7d3b      	ldrb	r3, [r7, #20]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	b2ca      	uxtb	r2, r1
 800793a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	3301      	adds	r3, #1
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	429a      	cmp	r2, r3
 800794a:	dbb0      	blt.n	80078ae <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800794c:	7ffb      	ldrb	r3, [r7, #31]
 800794e:	01db      	lsls	r3, r3, #7
 8007950:	b25a      	sxtb	r2, r3
 8007952:	7ffb      	ldrb	r3, [r7, #31]
 8007954:	019b      	lsls	r3, r3, #6
 8007956:	b25b      	sxtb	r3, r3
 8007958:	4313      	orrs	r3, r2
 800795a:	b25b      	sxtb	r3, r3
 800795c:	7ffa      	ldrb	r2, [r7, #31]
 800795e:	2a00      	cmp	r2, #0
 8007960:	d101      	bne.n	8007966 <payload_integration+0x106>
 8007962:	2220      	movs	r2, #32
 8007964:	e000      	b.n	8007968 <payload_integration+0x108>
 8007966:	2200      	movs	r2, #0
 8007968:	4313      	orrs	r3, r2
 800796a:	b259      	sxtb	r1, r3
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4413      	add	r3, r2
 8007972:	b2ca      	uxtb	r2, r1
 8007974:	701a      	strb	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	3724      	adds	r7, #36	@ 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08c      	sub	sp, #48	@ 0x30
 8007984:	af00      	add	r7, sp, #0
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8007994:	2300      	movs	r3, #0
 8007996:	623b      	str	r3, [r7, #32]
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800799c:	f001 fdff 	bl	800959e <RFW_DeInit>

    if( rxContinuous != 0 )
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	4ba3      	ldr	r3, [pc, #652]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 80079b8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <RadioSetRxGenericConfig+0x48>
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f000 80dc 	beq.w	8007b7e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80079c6:	e194      	b.n	8007cf2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <RadioSetRxGenericConfig+0x58>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <RadioSetRxGenericConfig+0x5e>
            return -1;
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295
 80079dc:	e18a      	b.n	8007cf4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	7f9b      	ldrb	r3, [r3, #30]
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d902      	bls.n	80079ec <RadioSetRxGenericConfig+0x6c>
            return -1;
 80079e6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ea:	e183      	b.n	8007cf4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6919      	ldr	r1, [r3, #16]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	7f9b      	ldrb	r3, [r3, #30]
 80079f4:	461a      	mov	r2, r3
 80079f6:	f107 0320 	add.w	r3, r7, #32
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 ff66 	bl	80098cc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	bf14      	ite	ne
 8007a08:	2301      	movne	r3, #1
 8007a0a:	2300      	moveq	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fe26 	bl	8008660 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007a14:	4b8b      	ldr	r3, [pc, #556]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a88      	ldr	r2, [pc, #544]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a22:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007a2a:	4b86      	ldr	r3, [pc, #536]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 fce5 	bl	8009404 <SUBGRF_GetFskBandwidthRegValue>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4b81      	ldr	r3, [pc, #516]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007a44:	4b7f      	ldr	r3, [pc, #508]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	4b7b      	ldr	r3, [pc, #492]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a56:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	7fda      	ldrb	r2, [r3, #31]
 8007a5c:	4b79      	ldr	r3, [pc, #484]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a5e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	7f9b      	ldrb	r3, [r3, #30]
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	4b76      	ldr	r3, [pc, #472]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a6a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8007a72:	4b74      	ldr	r3, [pc, #464]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a74:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d105      	bne.n	8007a8c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4b6f      	ldr	r3, [pc, #444]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a88:	759a      	strb	r2, [r3, #22]
 8007a8a:	e00b      	b.n	8007aa4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d103      	bne.n	8007a9e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007a96:	4b6b      	ldr	r3, [pc, #428]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007a98:	22ff      	movs	r2, #255	@ 0xff
 8007a9a:	759a      	strb	r2, [r3, #22]
 8007a9c:	e002      	b.n	8007aa4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8007a9e:	4b69      	ldr	r3, [pc, #420]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007aa0:	22ff      	movs	r2, #255	@ 0xff
 8007aa2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d004      	beq.n	8007ab8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d12d      	bne.n	8007b14 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007abe:	2bf1      	cmp	r3, #241	@ 0xf1
 8007ac0:	d00c      	beq.n	8007adc <RadioSetRxGenericConfig+0x15c>
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007ac8:	2bf2      	cmp	r3, #242	@ 0xf2
 8007aca:	d007      	beq.n	8007adc <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d002      	beq.n	8007adc <RadioSetRxGenericConfig+0x15c>
                return -1;
 8007ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8007ada:	e10b      	b.n	8007cf4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8007adc:	2300      	movs	r3, #0
 8007ade:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8007ae4:	4b58      	ldr	r3, [pc, #352]	@ (8007c48 <RadioSetRxGenericConfig+0x2c8>)
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	f107 0314 	add.w	r3, r7, #20
 8007aec:	4a57      	ldr	r2, [pc, #348]	@ (8007c4c <RadioSetRxGenericConfig+0x2cc>)
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fd48 	bl	8009584 <RFW_Init>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <RadioSetRxGenericConfig+0x180>
                return -1;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	e0f9      	b.n	8007cf4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007b00:	4b50      	ldr	r3, [pc, #320]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007b06:	4b4f      	ldr	r3, [pc, #316]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	755a      	strb	r2, [r3, #21]
        {
 8007b12:	e00e      	b.n	8007b32 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8007b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b1c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8007b24:	4b47      	ldr	r3, [pc, #284]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b26:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8007b2e:	4b45      	ldr	r3, [pc, #276]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b30:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007b32:	f7ff fa70 	bl	8007016 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007b36:	2000      	movs	r0, #0
 8007b38:	f7fe fc0c 	bl	8006354 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b3c:	4844      	ldr	r0, [pc, #272]	@ (8007c50 <RadioSetRxGenericConfig+0x2d0>)
 8007b3e:	f001 f82d 	bl	8008b9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b42:	4844      	ldr	r0, [pc, #272]	@ (8007c54 <RadioSetRxGenericConfig+0x2d4>)
 8007b44:	f001 f8fc 	bl	8008d40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007b48:	f107 0320 	add.w	r3, r7, #32
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fbc0 	bl	80082d2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	8b9b      	ldrh	r3, [r3, #28]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fc0a 	bl	8008370 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	8b1b      	ldrh	r3, [r3, #24]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fbe5 	bl	8008330 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007b6c:	fb03 f202 	mul.w	r2, r3, r2
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b78:	4a32      	ldr	r2, [pc, #200]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007b7a:	6093      	str	r3, [r2, #8]
        break;
 8007b7c:	e0b9      	b.n	8007cf2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d102      	bne.n	8007b8c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8a:	e0b3      	b.n	8007cf4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d104      	bne.n	8007ba0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007b9e:	e002      	b.n	8007ba6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8007ba0:	23ff      	movs	r3, #255	@ 0xff
 8007ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	2300      	moveq	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fd53 	bl	8008660 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fd5d 	bl	800867e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8007bde:	4b19      	ldr	r3, [pc, #100]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8007bea:	4b16      	ldr	r3, [pc, #88]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007bec:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d010      	beq.n	8007c1c <RadioSetRxGenericConfig+0x29c>
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	dc2c      	bgt.n	8007c58 <RadioSetRxGenericConfig+0x2d8>
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <RadioSetRxGenericConfig+0x288>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d005      	beq.n	8007c12 <RadioSetRxGenericConfig+0x292>
            break;
 8007c06:	e027      	b.n	8007c58 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007c08:	4b0e      	ldr	r3, [pc, #56]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007c10:	e023      	b.n	8007c5a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007c12:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007c1a:	e01e      	b.n	8007c5a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007c22:	2b0b      	cmp	r3, #11
 8007c24:	d004      	beq.n	8007c30 <RadioSetRxGenericConfig+0x2b0>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d104      	bne.n	8007c3a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007c30:	4b04      	ldr	r3, [pc, #16]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007c38:	e00f      	b.n	8007c5a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007c3a:	4b02      	ldr	r3, [pc, #8]	@ (8007c44 <RadioSetRxGenericConfig+0x2c4>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007c42:	e00a      	b.n	8007c5a <RadioSetRxGenericConfig+0x2da>
 8007c44:	20000400 	.word	0x20000400
 8007c48:	200003fc 	.word	0x200003fc
 8007c4c:	20000474 	.word	0x20000474
 8007c50:	20000438 	.word	0x20000438
 8007c54:	2000040e 	.word	0x2000040e
            break;
 8007c58:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007c5a:	4b28      	ldr	r3, [pc, #160]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8007c64:	4b25      	ldr	r3, [pc, #148]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007c66:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8007c6e:	4b23      	ldr	r3, [pc, #140]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007c70:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007c72:	4a22      	ldr	r2, [pc, #136]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007c74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c78:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007c80:	4b1e      	ldr	r3, [pc, #120]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007c82:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007c8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8007c92:	f7ff f9c0 	bl	8007016 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007c96:	2001      	movs	r0, #1
 8007c98:	f7fe fb5c 	bl	8006354 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c9c:	4818      	ldr	r0, [pc, #96]	@ (8007d00 <RadioSetRxGenericConfig+0x380>)
 8007c9e:	f000 ff7d 	bl	8008b9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ca2:	4818      	ldr	r0, [pc, #96]	@ (8007d04 <RadioSetRxGenericConfig+0x384>)
 8007ca4:	f001 f84c 	bl	8008d40 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007ca8:	4b14      	ldr	r3, [pc, #80]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007caa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d10d      	bne.n	8007cce <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007cb2:	f240 7036 	movw	r0, #1846	@ 0x736
 8007cb6:	f001 f99f 	bl	8008ff8 <SUBGRF_ReadRegister>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f023 0304 	bic.w	r3, r3, #4
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f240 7036 	movw	r0, #1846	@ 0x736
 8007cc8:	f001 f982 	bl	8008fd0 <SUBGRF_WriteRegister>
 8007ccc:	e00c      	b.n	8007ce8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007cce:	f240 7036 	movw	r0, #1846	@ 0x736
 8007cd2:	f001 f991 	bl	8008ff8 <SUBGRF_ReadRegister>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f043 0304 	orr.w	r3, r3, #4
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	4619      	mov	r1, r3
 8007ce0:	f240 7036 	movw	r0, #1846	@ 0x736
 8007ce4:	f001 f974 	bl	8008fd0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8007ce8:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <RadioSetRxGenericConfig+0x37c>)
 8007cea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007cee:	609a      	str	r2, [r3, #8]
        break;
 8007cf0:	bf00      	nop
    }
    return status;
 8007cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3730      	adds	r7, #48	@ 0x30
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000400 	.word	0x20000400
 8007d00:	20000438 	.word	0x20000438
 8007d04:	2000040e 	.word	0x2000040e

08007d08 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08e      	sub	sp, #56	@ 0x38
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607b      	str	r3, [r7, #4]
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	4613      	mov	r3, r2
 8007d18:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d1e:	2300      	movs	r3, #0
 8007d20:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007d22:	f001 fc3c 	bl	800959e <RFW_DeInit>
    switch( modem )
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	f200 8204 	bhi.w	8008136 <RadioSetTxGenericConfig+0x42e>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <RadioSetTxGenericConfig+0x2c>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007eb9 	.word	0x08007eb9
 8007d38:	08008001 	.word	0x08008001
 8007d3c:	080080f9 	.word	0x080080f9
 8007d40:	08007d45 	.word	0x08007d45
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	7c9b      	ldrb	r3, [r3, #18]
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d902      	bls.n	8007d52 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8007d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d50:	e206      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6899      	ldr	r1, [r3, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	7c9b      	ldrb	r3, [r3, #18]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fdb3 	bl	80098cc <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	e1f5      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d813      	bhi.n	8007da8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8007d80:	2302      	movs	r3, #2
 8007d82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8007d86:	4b99      	ldr	r3, [pc, #612]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007d88:	2203      	movs	r2, #3
 8007d8a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8007d8c:	4b97      	ldr	r3, [pc, #604]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007d8e:	2203      	movs	r2, #3
 8007d90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a94      	ldr	r2, [pc, #592]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007d9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	7cda      	ldrb	r2, [r3, #19]
 8007da0:	4b92      	ldr	r3, [pc, #584]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da6:	e017      	b.n	8007dd8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007dae:	4b8f      	ldr	r3, [pc, #572]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007db4:	4b8d      	ldr	r3, [pc, #564]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007dc2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	7cda      	ldrb	r2, [r3, #19]
 8007dc8:	4b88      	ldr	r3, [pc, #544]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	089b      	lsrs	r3, r3, #2
 8007dd4:	4a85      	ldr	r2, [pc, #532]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007dd6:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	4b82      	ldr	r3, [pc, #520]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007de4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007de6:	4b81      	ldr	r3, [pc, #516]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007de8:	2204      	movs	r2, #4
 8007dea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	7c9b      	ldrb	r3, [r3, #18]
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	4b7d      	ldr	r3, [pc, #500]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007df6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007df8:	4b7c      	ldr	r3, [pc, #496]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	7d9b      	ldrb	r3, [r3, #22]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d003      	beq.n	8007e0e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	7d1b      	ldrb	r3, [r3, #20]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d12b      	bne.n	8007e66 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	7d5b      	ldrb	r3, [r3, #21]
 8007e12:	2bf1      	cmp	r3, #241	@ 0xf1
 8007e14:	d00a      	beq.n	8007e2c <RadioSetTxGenericConfig+0x124>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	7d5b      	ldrb	r3, [r3, #21]
 8007e1a:	2bf2      	cmp	r3, #242	@ 0xf2
 8007e1c:	d006      	beq.n	8007e2c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	7d5b      	ldrb	r3, [r3, #21]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d002      	beq.n	8007e2c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	e199      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007e36:	4b6e      	ldr	r3, [pc, #440]	@ (8007ff0 <RadioSetTxGenericConfig+0x2e8>)
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	f107 0320 	add.w	r3, r7, #32
 8007e3e:	4a6d      	ldr	r2, [pc, #436]	@ (8007ff4 <RadioSetTxGenericConfig+0x2ec>)
 8007e40:	4618      	mov	r0, r3
 8007e42:	f001 fb9f 	bl	8009584 <RFW_Init>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8007e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e50:	e186      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007e52:	4b66      	ldr	r3, [pc, #408]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007e58:	4b64      	ldr	r3, [pc, #400]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007e5e:	4b63      	ldr	r3, [pc, #396]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	755a      	strb	r2, [r3, #21]
        {
 8007e64:	e00b      	b.n	8007e7e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	7d5a      	ldrb	r2, [r3, #21]
 8007e6a:	4b60      	ldr	r3, [pc, #384]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007e6c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	7d9a      	ldrb	r2, [r3, #22]
 8007e72:	4b5e      	ldr	r3, [pc, #376]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007e74:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	7d1a      	ldrb	r2, [r3, #20]
 8007e7a:	4b5c      	ldr	r3, [pc, #368]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007e7c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8007e7e:	f7ff f8ca 	bl	8007016 <RadioStandby>
        RadioSetModem( radio_modem );
 8007e82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fa64 	bl	8006354 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007e8c:	485a      	ldr	r0, [pc, #360]	@ (8007ff8 <RadioSetTxGenericConfig+0x2f0>)
 8007e8e:	f000 fe85 	bl	8008b9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007e92:	485a      	ldr	r0, [pc, #360]	@ (8007ffc <RadioSetTxGenericConfig+0x2f4>)
 8007e94:	f000 ff54 	bl	8008d40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fa18 	bl	80082d2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	8a1b      	ldrh	r3, [r3, #16]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fa62 	bl	8008370 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	899b      	ldrh	r3, [r3, #12]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fa3d 	bl	8008330 <SUBGRF_SetCrcPolynomial>
        break;
 8007eb6:	e13f      	b.n	8008138 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8007ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec4:	e14c      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	7c9b      	ldrb	r3, [r3, #18]
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d902      	bls.n	8007ed4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	e145      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6899      	ldr	r1, [r3, #8]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	7c9b      	ldrb	r3, [r3, #18]
 8007edc:	461a      	mov	r2, r3
 8007ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fcf2 	bl	80098cc <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007ee8:	4b40      	ldr	r3, [pc, #256]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a3d      	ldr	r2, [pc, #244]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	7cda      	ldrb	r2, [r3, #19]
 8007efc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	4a39      	ldr	r2, [pc, #228]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f08:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007f0a:	4b38      	ldr	r3, [pc, #224]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	4b34      	ldr	r3, [pc, #208]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f1c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007f1e:	4b33      	ldr	r3, [pc, #204]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f20:	2204      	movs	r2, #4
 8007f22:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	7c9b      	ldrb	r3, [r3, #18]
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f2e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007f30:	4b2e      	ldr	r3, [pc, #184]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	7d9b      	ldrb	r3, [r3, #22]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d003      	beq.n	8007f46 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	7d1b      	ldrb	r3, [r3, #20]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d12a      	bne.n	8007f9c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7d5b      	ldrb	r3, [r3, #21]
 8007f4a:	2bf1      	cmp	r3, #241	@ 0xf1
 8007f4c:	d00a      	beq.n	8007f64 <RadioSetTxGenericConfig+0x25c>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	7d5b      	ldrb	r3, [r3, #21]
 8007f52:	2bf2      	cmp	r3, #242	@ 0xf2
 8007f54:	d006      	beq.n	8007f64 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	7d5b      	ldrb	r3, [r3, #21]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d002      	beq.n	8007f64 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8007f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f62:	e0fd      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8007f64:	2301      	movs	r3, #1
 8007f66:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007f6c:	4b20      	ldr	r3, [pc, #128]	@ (8007ff0 <RadioSetTxGenericConfig+0x2e8>)
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	f107 0314 	add.w	r3, r7, #20
 8007f74:	4a1f      	ldr	r2, [pc, #124]	@ (8007ff4 <RadioSetTxGenericConfig+0x2ec>)
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 fb04 	bl	8009584 <RFW_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8007f82:	f04f 33ff 	mov.w	r3, #4294967295
 8007f86:	e0eb      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007f88:	4b18      	ldr	r3, [pc, #96]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007f8e:	4b17      	ldr	r3, [pc, #92]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f90:	2201      	movs	r2, #1
 8007f92:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007f94:	4b15      	ldr	r3, [pc, #84]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	755a      	strb	r2, [r3, #21]
        {
 8007f9a:	e00b      	b.n	8007fb4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	7d5a      	ldrb	r2, [r3, #21]
 8007fa0:	4b12      	ldr	r3, [pc, #72]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007fa2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	7d9a      	ldrb	r2, [r3, #22]
 8007fa8:	4b10      	ldr	r3, [pc, #64]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007faa:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	7d1a      	ldrb	r2, [r3, #20]
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fec <RadioSetTxGenericConfig+0x2e4>)
 8007fb2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8007fb4:	f7ff f82f 	bl	8007016 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007fb8:	2000      	movs	r0, #0
 8007fba:	f7fe f9cb 	bl	8006354 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007fbe:	480e      	ldr	r0, [pc, #56]	@ (8007ff8 <RadioSetTxGenericConfig+0x2f0>)
 8007fc0:	f000 fdec 	bl	8008b9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007fc4:	480d      	ldr	r0, [pc, #52]	@ (8007ffc <RadioSetTxGenericConfig+0x2f4>)
 8007fc6:	f000 febb 	bl	8008d40 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f97f 	bl	80082d2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	8a1b      	ldrh	r3, [r3, #16]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f9c9 	bl	8008370 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	899b      	ldrh	r3, [r3, #12]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f9a4 	bl	8008330 <SUBGRF_SetCrcPolynomial>
        break;
 8007fe8:	e0a6      	b.n	8008138 <RadioSetTxGenericConfig+0x430>
 8007fea:	bf00      	nop
 8007fec:	20000400 	.word	0x20000400
 8007ff0:	200003fc 	.word	0x200003fc
 8007ff4:	2000045c 	.word	0x2000045c
 8007ff8:	20000438 	.word	0x20000438
 8007ffc:	2000040e 	.word	0x2000040e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008000:	4b59      	ldr	r3, [pc, #356]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	4b56      	ldr	r3, [pc, #344]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800800e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	785a      	ldrb	r2, [r3, #1]
 8008016:	4b54      	ldr	r3, [pc, #336]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	789a      	ldrb	r2, [r3, #2]
 8008020:	4b51      	ldr	r3, [pc, #324]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008022:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	78db      	ldrb	r3, [r3, #3]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d010      	beq.n	8008050 <RadioSetTxGenericConfig+0x348>
 800802e:	2b02      	cmp	r3, #2
 8008030:	dc20      	bgt.n	8008074 <RadioSetTxGenericConfig+0x36c>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <RadioSetTxGenericConfig+0x334>
 8008036:	2b01      	cmp	r3, #1
 8008038:	d005      	beq.n	8008046 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800803a:	e01b      	b.n	8008074 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800803c:	4b4a      	ldr	r3, [pc, #296]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008044:	e017      	b.n	8008076 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008046:	4b48      	ldr	r3, [pc, #288]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800804e:	e012      	b.n	8008076 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b0b      	cmp	r3, #11
 8008056:	d003      	beq.n	8008060 <RadioSetTxGenericConfig+0x358>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b0c      	cmp	r3, #12
 800805e:	d104      	bne.n	800806a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008060:	4b41      	ldr	r3, [pc, #260]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008068:	e005      	b.n	8008076 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800806a:	4b3f      	ldr	r3, [pc, #252]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008072:	e000      	b.n	8008076 <RadioSetTxGenericConfig+0x36e>
            break;
 8008074:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008076:	4b3c      	ldr	r3, [pc, #240]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008078:	2201      	movs	r2, #1
 800807a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	889a      	ldrh	r2, [r3, #4]
 8008080:	4b39      	ldr	r3, [pc, #228]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008082:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	799a      	ldrb	r2, [r3, #6]
 8008088:	4b37      	ldr	r3, [pc, #220]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800808a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	79da      	ldrb	r2, [r3, #7]
 8008090:	4b35      	ldr	r3, [pc, #212]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008092:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	7a1a      	ldrb	r2, [r3, #8]
 800809a:	4b33      	ldr	r3, [pc, #204]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800809c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80080a0:	f7fe ffb9 	bl	8007016 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80080a4:	2001      	movs	r0, #1
 80080a6:	f7fe f955 	bl	8006354 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80080aa:	4830      	ldr	r0, [pc, #192]	@ (800816c <RadioSetTxGenericConfig+0x464>)
 80080ac:	f000 fd76 	bl	8008b9c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80080b0:	482f      	ldr	r0, [pc, #188]	@ (8008170 <RadioSetTxGenericConfig+0x468>)
 80080b2:	f000 fe45 	bl	8008d40 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80080b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 80080b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080bc:	2b06      	cmp	r3, #6
 80080be:	d10d      	bne.n	80080dc <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80080c0:	f640 0089 	movw	r0, #2185	@ 0x889
 80080c4:	f000 ff98 	bl	8008ff8 <SUBGRF_ReadRegister>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f023 0304 	bic.w	r3, r3, #4
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	4619      	mov	r1, r3
 80080d2:	f640 0089 	movw	r0, #2185	@ 0x889
 80080d6:	f000 ff7b 	bl	8008fd0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80080da:	e02d      	b.n	8008138 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80080dc:	f640 0089 	movw	r0, #2185	@ 0x889
 80080e0:	f000 ff8a 	bl	8008ff8 <SUBGRF_ReadRegister>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f043 0304 	orr.w	r3, r3, #4
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	f640 0089 	movw	r0, #2185	@ 0x889
 80080f2:	f000 ff6d 	bl	8008fd0 <SUBGRF_WriteRegister>
        break;
 80080f6:	e01f      	b.n	8008138 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <RadioSetTxGenericConfig+0x402>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008108:	d902      	bls.n	8008110 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800810a:	f04f 33ff 	mov.w	r3, #4294967295
 800810e:	e027      	b.n	8008160 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008110:	2003      	movs	r0, #3
 8008112:	f7fe f91f 	bl	8006354 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008116:	4b14      	ldr	r3, [pc, #80]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008118:	2202      	movs	r2, #2
 800811a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a11      	ldr	r2, [pc, #68]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008124:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008126:	4b10      	ldr	r3, [pc, #64]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008128:	2216      	movs	r2, #22
 800812a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800812e:	480f      	ldr	r0, [pc, #60]	@ (800816c <RadioSetTxGenericConfig+0x464>)
 8008130:	f000 fd34 	bl	8008b9c <SUBGRF_SetModulationParams>
        break;
 8008134:	e000      	b.n	8008138 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008136:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800813c:	4618      	mov	r0, r3
 800813e:	f001 f863 	bl	8009208 <SUBGRF_SetRfTxPower>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
 8008146:	4b08      	ldr	r3, [pc, #32]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 8008148:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800814e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fa37 	bl	80095c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008158:	4a03      	ldr	r2, [pc, #12]	@ (8008168 <RadioSetTxGenericConfig+0x460>)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6053      	str	r3, [r2, #4]
    return 0;
 800815e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008160:	4618      	mov	r0, r3
 8008162:	3738      	adds	r7, #56	@ 0x38
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20000400 	.word	0x20000400
 800816c:	20000438 	.word	0x20000438
 8008170:	2000040e 	.word	0x2000040e

08008174 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	bc80      	pop	{r7}
 800818a:	4770      	bx	lr

0800818c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8008196:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr
	...

080081a4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80081b2:	4a1d      	ldr	r2, [pc, #116]	@ (8008228 <SUBGRF_Init+0x84>)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80081b8:	f7f8 fb50 	bl	800085c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80081bc:	2002      	movs	r0, #2
 80081be:	f001 f8ff 	bl	80093c0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80081c2:	4b1a      	ldr	r3, [pc, #104]	@ (800822c <SUBGRF_Init+0x88>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80081c8:	2000      	movs	r0, #0
 80081ca:	f000 f97d 	bl	80084c8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80081ce:	f001 fb52 	bl	8009876 <RBI_IsTCXO>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d10e      	bne.n	80081f6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80081d8:	2140      	movs	r1, #64	@ 0x40
 80081da:	2001      	movs	r0, #1
 80081dc:	f000 fb82 	bl	80088e4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80081e0:	2100      	movs	r1, #0
 80081e2:	f640 1011 	movw	r0, #2321	@ 0x911
 80081e6:	f000 fef3 	bl	8008fd0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80081ea:	237f      	movs	r3, #127	@ 0x7f
 80081ec:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80081ee:	7b38      	ldrb	r0, [r7, #12]
 80081f0:	f000 fa8b 	bl	800870a <SUBGRF_Calibrate>
 80081f4:	e009      	b.n	800820a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80081f6:	2120      	movs	r1, #32
 80081f8:	f640 1011 	movw	r0, #2321	@ 0x911
 80081fc:	f000 fee8 	bl	8008fd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008200:	2120      	movs	r1, #32
 8008202:	f640 1012 	movw	r0, #2322	@ 0x912
 8008206:	f000 fee3 	bl	8008fd0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800820a:	210e      	movs	r1, #14
 800820c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008210:	f000 fede 	bl	8008fd0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8008214:	f001 fa86 	bl	8009724 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <SUBGRF_Init+0x8c>)
 800821a:	2201      	movs	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000498 	.word	0x20000498
 800822c:	20000494 	.word	0x20000494
 8008230:	2000048c 	.word	0x2000048c

08008234 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008238:	4b02      	ldr	r3, [pc, #8]	@ (8008244 <SUBGRF_GetOperatingMode+0x10>)
 800823a:	781b      	ldrb	r3, [r3, #0]
}
 800823c:	4618      	mov	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr
 8008244:	2000048c 	.word	0x2000048c

08008248 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	461a      	mov	r2, r3
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	2000      	movs	r0, #0
 800825c:	f000 ff24 	bl	80090a8 <SUBGRF_WriteBuffer>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800827a:	f107 0317 	add.w	r3, r7, #23
 800827e:	4619      	mov	r1, r3
 8008280:	68b8      	ldr	r0, [r7, #8]
 8008282:	f000 fe27 	bl	8008ed4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	79fa      	ldrb	r2, [r7, #7]
 800828c:	429a      	cmp	r2, r3
 800828e:	d201      	bcs.n	8008294 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008290:	2301      	movs	r3, #1
 8008292:	e007      	b.n	80082a4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008294:	7df8      	ldrb	r0, [r7, #23]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	68f9      	ldr	r1, [r7, #12]
 800829e:	f000 ff25 	bl	80090ec <SUBGRF_ReadBuffer>

    return 0;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	460b      	mov	r3, r1
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	4619      	mov	r1, r3
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff ffc2 	bl	8008248 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f91b 	bl	8008500 <SUBGRF_SetTx>
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80082da:	2208      	movs	r2, #8
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80082e2:	f000 fe9d 	bl	8009020 <SUBGRF_WriteRegisters>
    return 0;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	0a1b      	lsrs	r3, r3, #8
 80082fe:	b29b      	uxth	r3, r3
 8008300:	b2db      	uxtb	r3, r3
 8008302:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800830a:	f000 fb6f 	bl	80089ec <SUBGRF_GetPacketType>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	2202      	movs	r2, #2
 800831a:	4619      	mov	r1, r3
 800831c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8008320:	f000 fe7e 	bl	8009020 <SUBGRF_WriteRegisters>
            break;
 8008324:	e000      	b.n	8008328 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008326:	bf00      	nop
    }
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	0a1b      	lsrs	r3, r3, #8
 800833e:	b29b      	uxth	r3, r3
 8008340:	b2db      	uxtb	r3, r3
 8008342:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800834a:	f000 fb4f 	bl	80089ec <SUBGRF_GetPacketType>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	2202      	movs	r2, #2
 800835a:	4619      	mov	r1, r3
 800835c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8008360:	f000 fe5e 	bl	8009020 <SUBGRF_WriteRegisters>
            break;
 8008364:	e000      	b.n	8008368 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008366:	bf00      	nop
    }
}
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800837e:	f000 fb35 	bl	80089ec <SUBGRF_GetPacketType>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d121      	bne.n	80083cc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008388:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800838c:	f000 fe34 	bl	8008ff8 <SUBGRF_ReadRegister>
 8008390:	4603      	mov	r3, r0
 8008392:	f023 0301 	bic.w	r3, r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	b29b      	uxth	r3, r3
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	b25a      	sxtb	r2, r3
 80083a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	b25b      	sxtb	r3, r3
 80083ae:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	4619      	mov	r1, r3
 80083b4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80083b8:	f000 fe0a 	bl	8008fd0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80083c6:	f000 fe03 	bl	8008fd0 <SUBGRF_WriteRegister>
            break;
 80083ca:	e000      	b.n	80083ce <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80083cc:	bf00      	nop
    }
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80083e8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80083ec:	f000 fe04 	bl	8008ff8 <SUBGRF_ReadRegister>
 80083f0:	4603      	mov	r3, r0
 80083f2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	f023 0301 	bic.w	r3, r3, #1
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	4619      	mov	r1, r3
 80083fe:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008402:	f000 fde5 	bl	8008fd0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008406:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800840a:	f000 fdf5 	bl	8008ff8 <SUBGRF_ReadRegister>
 800840e:	4603      	mov	r3, r0
 8008410:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008412:	79bb      	ldrb	r3, [r7, #6]
 8008414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008418:	b2db      	uxtb	r3, r3
 800841a:	4619      	mov	r1, r3
 800841c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008420:	f000 fdd6 	bl	8008fd0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008424:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008428:	f000 f88a 	bl	8008540 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800842c:	463b      	mov	r3, r7
 800842e:	2204      	movs	r2, #4
 8008430:	4619      	mov	r1, r3
 8008432:	f640 0019 	movw	r0, #2073	@ 0x819
 8008436:	f000 fe15 	bl	8009064 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800843a:	2000      	movs	r0, #0
 800843c:	f000 f844 	bl	80084c8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	4619      	mov	r1, r3
 8008444:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008448:	f000 fdc2 	bl	8008fd0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800844c:	79bb      	ldrb	r3, [r7, #6]
 800844e:	4619      	mov	r1, r3
 8008450:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008454:	f000 fdbc 	bl	8008fd0 <SUBGRF_WriteRegister>

    return number;
 8008458:	683b      	ldr	r3, [r7, #0]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800846c:	2000      	movs	r0, #0
 800846e:	f001 f999 	bl	80097a4 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008472:	2002      	movs	r0, #2
 8008474:	f000 ffa4 	bl	80093c0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008478:	793b      	ldrb	r3, [r7, #4]
 800847a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800847e:	b2db      	uxtb	r3, r3
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008484:	793b      	ldrb	r3, [r7, #4]
 8008486:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800848a:	b2db      	uxtb	r3, r3
 800848c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800848e:	b25b      	sxtb	r3, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008494:	793b      	ldrb	r3, [r7, #4]
 8008496:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800849e:	4313      	orrs	r3, r2
 80084a0:	b25b      	sxtb	r3, r3
 80084a2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80084a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80084a6:	f107 030f 	add.w	r3, r7, #15
 80084aa:	2201      	movs	r2, #1
 80084ac:	4619      	mov	r1, r3
 80084ae:	2084      	movs	r0, #132	@ 0x84
 80084b0:	f000 fe3e 	bl	8009130 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80084b4:	4b03      	ldr	r3, [pc, #12]	@ (80084c4 <SUBGRF_SetSleep+0x60>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	701a      	strb	r2, [r3, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	2000048c 	.word	0x2000048c

080084c8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80084d2:	1dfb      	adds	r3, r7, #7
 80084d4:	2201      	movs	r2, #1
 80084d6:	4619      	mov	r1, r3
 80084d8:	2080      	movs	r0, #128	@ 0x80
 80084da:	f000 fe29 	bl	8009130 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d103      	bne.n	80084ec <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80084e4:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <SUBGRF_SetStandby+0x34>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80084ea:	e002      	b.n	80084f2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80084ec:	4b03      	ldr	r3, [pc, #12]	@ (80084fc <SUBGRF_SetStandby+0x34>)
 80084ee:	2202      	movs	r2, #2
 80084f0:	701a      	strb	r2, [r3, #0]
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000048c 	.word	0x2000048c

08008500 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008508:	4b0c      	ldr	r3, [pc, #48]	@ (800853c <SUBGRF_SetTx+0x3c>)
 800850a:	2204      	movs	r2, #4
 800850c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	0c1b      	lsrs	r3, r3, #16
 8008512:	b2db      	uxtb	r3, r3
 8008514:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0a1b      	lsrs	r3, r3, #8
 800851a:	b2db      	uxtb	r3, r3
 800851c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	2203      	movs	r2, #3
 800852a:	4619      	mov	r1, r3
 800852c:	2083      	movs	r0, #131	@ 0x83
 800852e:	f000 fdff 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	2000048c 	.word	0x2000048c

08008540 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008548:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <SUBGRF_SetRx+0x3c>)
 800854a:	2205      	movs	r2, #5
 800854c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	b2db      	uxtb	r3, r3
 8008554:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	b2db      	uxtb	r3, r3
 800855c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	2203      	movs	r2, #3
 800856a:	4619      	mov	r1, r3
 800856c:	2082      	movs	r0, #130	@ 0x82
 800856e:	f000 fddf 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	2000048c 	.word	0x2000048c

08008580 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008588:	4b0e      	ldr	r3, [pc, #56]	@ (80085c4 <SUBGRF_SetRxBoosted+0x44>)
 800858a:	2205      	movs	r2, #5
 800858c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800858e:	2197      	movs	r1, #151	@ 0x97
 8008590:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8008594:	f000 fd1c 	bl	8008fd0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	0c1b      	lsrs	r3, r3, #16
 800859c:	b2db      	uxtb	r3, r3
 800859e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80085ae:	f107 030c 	add.w	r3, r7, #12
 80085b2:	2203      	movs	r2, #3
 80085b4:	4619      	mov	r1, r3
 80085b6:	2082      	movs	r0, #130	@ 0x82
 80085b8:	f000 fdba 	bl	8009130 <SUBGRF_WriteCommand>
}
 80085bc:	bf00      	nop
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	2000048c 	.word	0x2000048c

080085c8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	0a1b      	lsrs	r3, r3, #8
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	0c1b      	lsrs	r3, r3, #16
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	2206      	movs	r2, #6
 8008604:	4619      	mov	r1, r3
 8008606:	2094      	movs	r0, #148	@ 0x94
 8008608:	f000 fd92 	bl	8009130 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800860c:	4b03      	ldr	r3, [pc, #12]	@ (800861c <SUBGRF_SetRxDutyCycle+0x54>)
 800860e:	2206      	movs	r2, #6
 8008610:	701a      	strb	r2, [r3, #0]
}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	2000048c 	.word	0x2000048c

08008620 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008624:	2200      	movs	r2, #0
 8008626:	2100      	movs	r1, #0
 8008628:	20c5      	movs	r0, #197	@ 0xc5
 800862a:	f000 fd81 	bl	8009130 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800862e:	4b02      	ldr	r3, [pc, #8]	@ (8008638 <SUBGRF_SetCad+0x18>)
 8008630:	2207      	movs	r2, #7
 8008632:	701a      	strb	r2, [r3, #0]
}
 8008634:	bf00      	nop
 8008636:	bd80      	pop	{r7, pc}
 8008638:	2000048c 	.word	0x2000048c

0800863c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008640:	2200      	movs	r2, #0
 8008642:	2100      	movs	r1, #0
 8008644:	20d1      	movs	r0, #209	@ 0xd1
 8008646:	f000 fd73 	bl	8009130 <SUBGRF_WriteCommand>
}
 800864a:	bf00      	nop
 800864c:	bd80      	pop	{r7, pc}

0800864e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800864e:	b580      	push	{r7, lr}
 8008650:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008652:	2200      	movs	r2, #0
 8008654:	2100      	movs	r1, #0
 8008656:	20d2      	movs	r0, #210	@ 0xd2
 8008658:	f000 fd6a 	bl	8009130 <SUBGRF_WriteCommand>
}
 800865c:	bf00      	nop
 800865e:	bd80      	pop	{r7, pc}

08008660 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800866a:	1dfb      	adds	r3, r7, #7
 800866c:	2201      	movs	r2, #1
 800866e:	4619      	mov	r1, r3
 8008670:	209f      	movs	r0, #159	@ 0x9f
 8008672:	f000 fd5d 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	4603      	mov	r3, r0
 8008686:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	2201      	movs	r2, #1
 800868c:	4619      	mov	r1, r3
 800868e:	20a0      	movs	r0, #160	@ 0xa0
 8008690:	f000 fd4e 	bl	8009130 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008694:	79fb      	ldrb	r3, [r7, #7]
 8008696:	2b3f      	cmp	r3, #63	@ 0x3f
 8008698:	d91c      	bls.n	80086d4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80086a8:	e005      	b.n	80086b6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	089b      	lsrs	r3, r3, #2
 80086ae:	73fb      	strb	r3, [r7, #15]
            exp++;
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	3301      	adds	r3, #1
 80086b4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b1f      	cmp	r3, #31
 80086ba:	d8f6      	bhi.n	80086aa <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	4413      	add	r3, r2
 80086c6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80086c8:	7b7b      	ldrb	r3, [r7, #13]
 80086ca:	4619      	mov	r1, r3
 80086cc:	f240 7006 	movw	r0, #1798	@ 0x706
 80086d0:	f000 fc7e 	bl	8008fd0 <SUBGRF_WriteRegister>
    }
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80086e2:	f001 f8d3 	bl	800988c <RBI_IsDCDC>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80086ec:	2301      	movs	r3, #1
 80086ee:	71fb      	strb	r3, [r7, #7]
 80086f0:	e001      	b.n	80086f6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80086f2:	2300      	movs	r3, #0
 80086f4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80086f6:	1dfb      	adds	r3, r7, #7
 80086f8:	2201      	movs	r2, #1
 80086fa:	4619      	mov	r1, r3
 80086fc:	2096      	movs	r0, #150	@ 0x96
 80086fe:	f000 fd17 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008712:	793b      	ldrb	r3, [r7, #4]
 8008714:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008718:	b2db      	uxtb	r3, r3
 800871a:	019b      	lsls	r3, r3, #6
 800871c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800871e:	793b      	ldrb	r3, [r7, #4]
 8008720:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008728:	b25b      	sxtb	r3, r3
 800872a:	4313      	orrs	r3, r2
 800872c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800872e:	793b      	ldrb	r3, [r7, #4]
 8008730:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008734:	b2db      	uxtb	r3, r3
 8008736:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008738:	b25b      	sxtb	r3, r3
 800873a:	4313      	orrs	r3, r2
 800873c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800873e:	793b      	ldrb	r3, [r7, #4]
 8008740:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008744:	b2db      	uxtb	r3, r3
 8008746:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008748:	b25b      	sxtb	r3, r3
 800874a:	4313      	orrs	r3, r2
 800874c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800874e:	793b      	ldrb	r3, [r7, #4]
 8008750:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008758:	b25b      	sxtb	r3, r3
 800875a:	4313      	orrs	r3, r2
 800875c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800875e:	793b      	ldrb	r3, [r7, #4]
 8008760:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008768:	b25b      	sxtb	r3, r3
 800876a:	4313      	orrs	r3, r2
 800876c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800876e:	793b      	ldrb	r3, [r7, #4]
 8008770:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008778:	4313      	orrs	r3, r2
 800877a:	b25b      	sxtb	r3, r3
 800877c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800877e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008780:	f107 030f 	add.w	r3, r7, #15
 8008784:	2201      	movs	r2, #1
 8008786:	4619      	mov	r1, r3
 8008788:	2089      	movs	r0, #137	@ 0x89
 800878a:	f000 fcd1 	bl	8009130 <SUBGRF_WriteCommand>
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008818 <SUBGRF_CalibrateImage+0x80>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d904      	bls.n	80087b2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80087a8:	23e1      	movs	r3, #225	@ 0xe1
 80087aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80087ac:	23e9      	movs	r3, #233	@ 0xe9
 80087ae:	737b      	strb	r3, [r7, #13]
 80087b0:	e027      	b.n	8008802 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a19      	ldr	r2, [pc, #100]	@ (800881c <SUBGRF_CalibrateImage+0x84>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d904      	bls.n	80087c4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80087ba:	23d7      	movs	r3, #215	@ 0xd7
 80087bc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80087be:	23db      	movs	r3, #219	@ 0xdb
 80087c0:	737b      	strb	r3, [r7, #13]
 80087c2:	e01e      	b.n	8008802 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a16      	ldr	r2, [pc, #88]	@ (8008820 <SUBGRF_CalibrateImage+0x88>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d904      	bls.n	80087d6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80087cc:	23c1      	movs	r3, #193	@ 0xc1
 80087ce:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80087d0:	23c5      	movs	r3, #197	@ 0xc5
 80087d2:	737b      	strb	r3, [r7, #13]
 80087d4:	e015      	b.n	8008802 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a12      	ldr	r2, [pc, #72]	@ (8008824 <SUBGRF_CalibrateImage+0x8c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d904      	bls.n	80087e8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80087de:	2375      	movs	r3, #117	@ 0x75
 80087e0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80087e2:	2381      	movs	r3, #129	@ 0x81
 80087e4:	737b      	strb	r3, [r7, #13]
 80087e6:	e00c      	b.n	8008802 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a0f      	ldr	r2, [pc, #60]	@ (8008828 <SUBGRF_CalibrateImage+0x90>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d904      	bls.n	80087fa <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80087f0:	236b      	movs	r3, #107	@ 0x6b
 80087f2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80087f4:	236f      	movs	r3, #111	@ 0x6f
 80087f6:	737b      	strb	r3, [r7, #13]
 80087f8:	e003      	b.n	8008802 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80087fa:	2329      	movs	r3, #41	@ 0x29
 80087fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80087fe:	232b      	movs	r3, #43	@ 0x2b
 8008800:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008802:	f107 030c 	add.w	r3, r7, #12
 8008806:	2202      	movs	r2, #2
 8008808:	4619      	mov	r1, r3
 800880a:	2098      	movs	r0, #152	@ 0x98
 800880c:	f000 fc90 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	35a4e900 	.word	0x35a4e900
 800881c:	32a9f880 	.word	0x32a9f880
 8008820:	2de54480 	.word	0x2de54480
 8008824:	1b6b0b00 	.word	0x1b6b0b00
 8008828:	1954fc40 	.word	0x1954fc40

0800882c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800882c:	b590      	push	{r4, r7, lr}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	461a      	mov	r2, r3
 800883a:	4623      	mov	r3, r4
 800883c:	71fb      	strb	r3, [r7, #7]
 800883e:	4603      	mov	r3, r0
 8008840:	71bb      	strb	r3, [r7, #6]
 8008842:	460b      	mov	r3, r1
 8008844:	717b      	strb	r3, [r7, #5]
 8008846:	4613      	mov	r3, r2
 8008848:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800884e:	79bb      	ldrb	r3, [r7, #6]
 8008850:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008852:	797b      	ldrb	r3, [r7, #5]
 8008854:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8008856:	793b      	ldrb	r3, [r7, #4]
 8008858:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800885a:	f107 030c 	add.w	r3, r7, #12
 800885e:	2204      	movs	r2, #4
 8008860:	4619      	mov	r1, r3
 8008862:	2095      	movs	r0, #149	@ 0x95
 8008864:	f000 fc64 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	bd90      	pop	{r4, r7, pc}

08008870 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	461a      	mov	r2, r3
 800887e:	4623      	mov	r3, r4
 8008880:	80fb      	strh	r3, [r7, #6]
 8008882:	4603      	mov	r3, r0
 8008884:	80bb      	strh	r3, [r7, #4]
 8008886:	460b      	mov	r3, r1
 8008888:	807b      	strh	r3, [r7, #2]
 800888a:	4613      	mov	r3, r2
 800888c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	b29b      	uxth	r3, r3
 8008894:	b2db      	uxtb	r3, r3
 8008896:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800889e:	88bb      	ldrh	r3, [r7, #4]
 80088a0:	0a1b      	lsrs	r3, r3, #8
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80088a8:	88bb      	ldrh	r3, [r7, #4]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80088ae:	887b      	ldrh	r3, [r7, #2]
 80088b0:	0a1b      	lsrs	r3, r3, #8
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80088b8:	887b      	ldrh	r3, [r7, #2]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80088be:	883b      	ldrh	r3, [r7, #0]
 80088c0:	0a1b      	lsrs	r3, r3, #8
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80088c8:	883b      	ldrh	r3, [r7, #0]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80088ce:	f107 0308 	add.w	r3, r7, #8
 80088d2:	2208      	movs	r2, #8
 80088d4:	4619      	mov	r1, r3
 80088d6:	2008      	movs	r0, #8
 80088d8:	f000 fc2a 	bl	8009130 <SUBGRF_WriteCommand>
}
 80088dc:	bf00      	nop
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd90      	pop	{r4, r7, pc}

080088e4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	6039      	str	r1, [r7, #0]
 80088ee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	b2db      	uxtb	r3, r3
 8008908:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008910:	f107 030c 	add.w	r3, r7, #12
 8008914:	2204      	movs	r2, #4
 8008916:	4619      	mov	r1, r3
 8008918:	2097      	movs	r0, #151	@ 0x97
 800891a:	f000 fc09 	bl	8009130 <SUBGRF_WriteCommand>
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8008936:	4b1d      	ldr	r3, [pc, #116]	@ (80089ac <SUBGRF_SetRfFrequency+0x84>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f083 0301 	eor.w	r3, r3, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d005      	beq.n	8008950 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ff27 	bl	8008798 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800894a:	4b18      	ldr	r3, [pc, #96]	@ (80089ac <SUBGRF_SetRfFrequency+0x84>)
 800894c:	2201      	movs	r2, #1
 800894e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	461c      	mov	r4, r3
 8008956:	4615      	mov	r5, r2
 8008958:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800895c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008960:	4a13      	ldr	r2, [pc, #76]	@ (80089b0 <SUBGRF_SetRfFrequency+0x88>)
 8008962:	f04f 0300 	mov.w	r3, #0
 8008966:	4640      	mov	r0, r8
 8008968:	4649      	mov	r1, r9
 800896a:	f7f7 fc59 	bl	8000220 <__aeabi_uldivmod>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4613      	mov	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	0e1b      	lsrs	r3, r3, #24
 800897a:	b2db      	uxtb	r3, r3
 800897c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	0c1b      	lsrs	r3, r3, #16
 8008982:	b2db      	uxtb	r3, r3
 8008984:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	b2db      	uxtb	r3, r3
 800898c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8008994:	f107 0308 	add.w	r3, r7, #8
 8008998:	2204      	movs	r2, #4
 800899a:	4619      	mov	r1, r3
 800899c:	2086      	movs	r0, #134	@ 0x86
 800899e:	f000 fbc7 	bl	8009130 <SUBGRF_WriteCommand>
}
 80089a2:	bf00      	nop
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80089ac:	20000494 	.word	0x20000494
 80089b0:	01e84800 	.word	0x01e84800

080089b4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80089be:	79fa      	ldrb	r2, [r7, #7]
 80089c0:	4b09      	ldr	r3, [pc, #36]	@ (80089e8 <SUBGRF_SetPacketType+0x34>)
 80089c2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80089ca:	2100      	movs	r1, #0
 80089cc:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80089d0:	f000 fafe 	bl	8008fd0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80089d4:	1dfb      	adds	r3, r7, #7
 80089d6:	2201      	movs	r2, #1
 80089d8:	4619      	mov	r1, r3
 80089da:	208a      	movs	r0, #138	@ 0x8a
 80089dc:	f000 fba8 	bl	8009130 <SUBGRF_WriteCommand>
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	2000048d 	.word	0x2000048d

080089ec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
    return PacketType;
 80089f0:	4b02      	ldr	r3, [pc, #8]	@ (80089fc <SUBGRF_GetPacketType+0x10>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr
 80089fc:	2000048d 	.word	0x2000048d

08008a00 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	71fb      	strb	r3, [r7, #7]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	71bb      	strb	r3, [r7, #6]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8008a12:	79fb      	ldrb	r3, [r7, #7]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d149      	bne.n	8008aac <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f000 ff42 	bl	80098a2 <RBI_GetRFOMaxPowerConfig>
 8008a1e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8008a20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	da01      	bge.n	8008a2e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b0e      	cmp	r3, #14
 8008a32:	d10e      	bne.n	8008a52 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8008a34:	2301      	movs	r3, #1
 8008a36:	2201      	movs	r2, #1
 8008a38:	2100      	movs	r1, #0
 8008a3a:	2004      	movs	r0, #4
 8008a3c:	f7ff fef6 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008a40:	79ba      	ldrb	r2, [r7, #6]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	330e      	adds	r3, #14
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	71bb      	strb	r3, [r7, #6]
 8008a50:	e01f      	b.n	8008a92 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b0a      	cmp	r3, #10
 8008a56:	d10e      	bne.n	8008a76 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8008a58:	2301      	movs	r3, #1
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f7ff fee4 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8008a64:	79ba      	ldrb	r2, [r7, #6]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	330d      	adds	r3, #13
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	71bb      	strb	r3, [r7, #6]
 8008a74:	e00d      	b.n	8008a92 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8008a76:	2301      	movs	r3, #1
 8008a78:	2201      	movs	r2, #1
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	2007      	movs	r0, #7
 8008a7e:	f7ff fed5 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008a82:	79ba      	ldrb	r2, [r7, #6]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	330e      	adds	r3, #14
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8008a92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008a96:	f113 0f11 	cmn.w	r3, #17
 8008a9a:	da01      	bge.n	8008aa0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8008a9c:	23ef      	movs	r3, #239	@ 0xef
 8008a9e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8008aa0:	2118      	movs	r1, #24
 8008aa2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8008aa6:	f000 fa93 	bl	8008fd0 <SUBGRF_WriteRegister>
 8008aaa:	e067      	b.n	8008b7c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8008aac:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8008ab0:	f000 faa2 	bl	8008ff8 <SUBGRF_ReadRegister>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f043 031e 	orr.w	r3, r3, #30
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	4619      	mov	r1, r3
 8008abe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8008ac2:	f000 fa85 	bl	8008fd0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8008ac6:	2001      	movs	r0, #1
 8008ac8:	f000 feeb 	bl	80098a2 <RBI_GetRFOMaxPowerConfig>
 8008acc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8008ace:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	da01      	bge.n	8008adc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b14      	cmp	r3, #20
 8008ae0:	d10e      	bne.n	8008b00 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2105      	movs	r1, #5
 8008ae8:	2003      	movs	r0, #3
 8008aea:	f7ff fe9f 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008aee:	79ba      	ldrb	r2, [r7, #6]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	3316      	adds	r3, #22
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	71bb      	strb	r3, [r7, #6]
 8008afe:	e031      	b.n	8008b64 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b11      	cmp	r3, #17
 8008b04:	d10e      	bne.n	8008b24 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8008b06:	2301      	movs	r3, #1
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2103      	movs	r1, #3
 8008b0c:	2002      	movs	r0, #2
 8008b0e:	f7ff fe8d 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008b12:	79ba      	ldrb	r2, [r7, #6]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	3316      	adds	r3, #22
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	71bb      	strb	r3, [r7, #6]
 8008b22:	e01f      	b.n	8008b64 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b0e      	cmp	r3, #14
 8008b28:	d10e      	bne.n	8008b48 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2102      	movs	r1, #2
 8008b30:	2002      	movs	r0, #2
 8008b32:	f7ff fe7b 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008b36:	79ba      	ldrb	r2, [r7, #6]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	330e      	adds	r3, #14
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	71bb      	strb	r3, [r7, #6]
 8008b46:	e00d      	b.n	8008b64 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8008b48:	2301      	movs	r3, #1
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2107      	movs	r1, #7
 8008b4e:	2004      	movs	r0, #4
 8008b50:	f7ff fe6c 	bl	800882c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008b54:	79ba      	ldrb	r2, [r7, #6]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	3316      	adds	r3, #22
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8008b64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008b68:	f113 0f09 	cmn.w	r3, #9
 8008b6c:	da01      	bge.n	8008b72 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8008b6e:	23f7      	movs	r3, #247	@ 0xf7
 8008b70:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8008b72:	2138      	movs	r1, #56	@ 0x38
 8008b74:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8008b78:	f000 fa2a 	bl	8008fd0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8008b7c:	79bb      	ldrb	r3, [r7, #6]
 8008b7e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8008b80:	797b      	ldrb	r3, [r7, #5]
 8008b82:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8008b84:	f107 0308 	add.w	r3, r7, #8
 8008b88:	2202      	movs	r2, #2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	208e      	movs	r0, #142	@ 0x8e
 8008b8e:	f000 facf 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8008b9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ba0:	b086      	sub	sp, #24
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008baa:	4a61      	ldr	r2, [pc, #388]	@ (8008d30 <SUBGRF_SetModulationParams+0x194>)
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008bb4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	781a      	ldrb	r2, [r3, #0]
 8008bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8008d34 <SUBGRF_SetModulationParams+0x198>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d004      	beq.n	8008bce <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fef3 	bl	80089b4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	f200 80a5 	bhi.w	8008d22 <SUBGRF_SetModulationParams+0x186>
 8008bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <SUBGRF_SetModulationParams+0x44>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008bf1 	.word	0x08008bf1
 8008be4:	08008cb1 	.word	0x08008cb1
 8008be8:	08008c73 	.word	0x08008c73
 8008bec:	08008cdf 	.word	0x08008cdf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8008d38 <SUBGRF_SetModulationParams+0x19c>)
 8008bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	0c1b      	lsrs	r3, r3, #16
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	7b1b      	ldrb	r3, [r3, #12]
 8008c1a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7b5b      	ldrb	r3, [r3, #13]
 8008c20:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	2200      	movs	r2, #0
 8008c28:	461c      	mov	r4, r3
 8008c2a:	4615      	mov	r5, r2
 8008c2c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008c30:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008c34:	4a41      	ldr	r2, [pc, #260]	@ (8008d3c <SUBGRF_SetModulationParams+0x1a0>)
 8008c36:	f04f 0300 	mov.w	r3, #0
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7f7 faef 	bl	8000220 <__aeabi_uldivmod>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4613      	mov	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	0c1b      	lsrs	r3, r3, #16
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008c60:	7cfb      	ldrb	r3, [r7, #19]
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	4619      	mov	r1, r3
 8008c6a:	208b      	movs	r0, #139	@ 0x8b
 8008c6c:	f000 fa60 	bl	8009130 <SUBGRF_WriteCommand>
        break;
 8008c70:	e058      	b.n	8008d24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8008c72:	2304      	movs	r3, #4
 8008c74:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8008d38 <SUBGRF_SetModulationParams+0x19c>)
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	0c1b      	lsrs	r3, r3, #16
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7d1b      	ldrb	r3, [r3, #20]
 8008c9c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008c9e:	7cfb      	ldrb	r3, [r7, #19]
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	f107 0308 	add.w	r3, r7, #8
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	208b      	movs	r0, #139	@ 0x8b
 8008caa:	f000 fa41 	bl	8009130 <SUBGRF_WriteCommand>
        break;
 8008cae:	e039      	b.n	8008d24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	7e1b      	ldrb	r3, [r3, #24]
 8008cb8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7e5b      	ldrb	r3, [r3, #25]
 8008cbe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7e9b      	ldrb	r3, [r3, #26]
 8008cc4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	7edb      	ldrb	r3, [r3, #27]
 8008cca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008ccc:	7cfb      	ldrb	r3, [r7, #19]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	f107 0308 	add.w	r3, r7, #8
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	208b      	movs	r0, #139	@ 0x8b
 8008cd8:	f000 fa2a 	bl	8009130 <SUBGRF_WriteCommand>

        break;
 8008cdc:	e022      	b.n	8008d24 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8008cde:	2305      	movs	r3, #5
 8008ce0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4a14      	ldr	r2, [pc, #80]	@ (8008d38 <SUBGRF_SetModulationParams+0x19c>)
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	0c1b      	lsrs	r3, r3, #16
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	0a1b      	lsrs	r3, r3, #8
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7b1b      	ldrb	r3, [r3, #12]
 8008d08:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	7b5b      	ldrb	r3, [r3, #13]
 8008d0e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008d10:	7cfb      	ldrb	r3, [r7, #19]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	f107 0308 	add.w	r3, r7, #8
 8008d18:	4619      	mov	r1, r3
 8008d1a:	208b      	movs	r0, #139	@ 0x8b
 8008d1c:	f000 fa08 	bl	8009130 <SUBGRF_WriteCommand>
        break;
 8008d20:	e000      	b.n	8008d24 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8008d22:	bf00      	nop
    }
}
 8008d24:	bf00      	nop
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008d2e:	bf00      	nop
 8008d30:	0800a750 	.word	0x0800a750
 8008d34:	2000048d 	.word	0x2000048d
 8008d38:	3d090000 	.word	0x3d090000
 8008d3c:	01e84800 	.word	0x01e84800

08008d40 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008d4c:	4a48      	ldr	r2, [pc, #288]	@ (8008e70 <SUBGRF_SetPacketParams+0x130>)
 8008d4e:	f107 030c 	add.w	r3, r7, #12
 8008d52:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d54:	c303      	stmia	r3!, {r0, r1}
 8008d56:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	4b45      	ldr	r3, [pc, #276]	@ (8008e74 <SUBGRF_SetPacketParams+0x134>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d004      	beq.n	8008d6e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff fe23 	bl	80089b4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d878      	bhi.n	8008e68 <SUBGRF_SetPacketParams+0x128>
 8008d76:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <SUBGRF_SetPacketParams+0x3c>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d8d 	.word	0x08008d8d
 8008d80:	08008e1d 	.word	0x08008e1d
 8008d84:	08008e11 	.word	0x08008e11
 8008d88:	08008d8d 	.word	0x08008d8d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7a5b      	ldrb	r3, [r3, #9]
 8008d90:	2bf1      	cmp	r3, #241	@ 0xf1
 8008d92:	d10a      	bne.n	8008daa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8008d94:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008d98:	f7ff faaa 	bl	80082f0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8008d9c:	f248 0005 	movw	r0, #32773	@ 0x8005
 8008da0:	f7ff fac6 	bl	8008330 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8008da4:	2302      	movs	r3, #2
 8008da6:	75bb      	strb	r3, [r7, #22]
 8008da8:	e011      	b.n	8008dce <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7a5b      	ldrb	r3, [r3, #9]
 8008dae:	2bf2      	cmp	r3, #242	@ 0xf2
 8008db0:	d10a      	bne.n	8008dc8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8008db2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8008db6:	f7ff fa9b 	bl	80082f0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8008dba:	f241 0021 	movw	r0, #4129	@ 0x1021
 8008dbe:	f7ff fab7 	bl	8008330 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8008dc2:	2306      	movs	r3, #6
 8008dc4:	75bb      	strb	r3, [r7, #22]
 8008dc6:	e002      	b.n	8008dce <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	7a5b      	ldrb	r3, [r3, #9]
 8008dcc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8008dce:	2309      	movs	r3, #9
 8008dd0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	791b      	ldrb	r3, [r3, #4]
 8008dea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	795b      	ldrb	r3, [r3, #5]
 8008df0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	79db      	ldrb	r3, [r3, #7]
 8008dfc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7a1b      	ldrb	r3, [r3, #8]
 8008e02:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8008e04:	7dbb      	ldrb	r3, [r7, #22]
 8008e06:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	7a9b      	ldrb	r3, [r3, #10]
 8008e0c:	753b      	strb	r3, [r7, #20]
        break;
 8008e0e:	e022      	b.n	8008e56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7b1b      	ldrb	r3, [r3, #12]
 8008e18:	733b      	strb	r3, [r7, #12]
        break;
 8008e1a:	e01c      	b.n	8008e56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8008e1c:	2306      	movs	r3, #6
 8008e1e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	89db      	ldrh	r3, [r3, #14]
 8008e24:	0a1b      	lsrs	r3, r3, #8
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	89db      	ldrh	r3, [r3, #14]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	7c1a      	ldrb	r2, [r3, #16]
 8008e38:	4b0f      	ldr	r3, [pc, #60]	@ (8008e78 <SUBGRF_SetPacketParams+0x138>)
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	7019      	strb	r1, [r3, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7c5b      	ldrb	r3, [r3, #17]
 8008e46:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7c9b      	ldrb	r3, [r3, #18]
 8008e4c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7cdb      	ldrb	r3, [r3, #19]
 8008e52:	747b      	strb	r3, [r7, #17]
        break;
 8008e54:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	f107 030c 	add.w	r3, r7, #12
 8008e5e:	4619      	mov	r1, r3
 8008e60:	208c      	movs	r0, #140	@ 0x8c
 8008e62:	f000 f965 	bl	8009130 <SUBGRF_WriteCommand>
 8008e66:	e000      	b.n	8008e6a <SUBGRF_SetPacketParams+0x12a>
        return;
 8008e68:	bf00      	nop
}
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	0800a758 	.word	0x0800a758
 8008e74:	2000048d 	.word	0x2000048d
 8008e78:	2000048e 	.word	0x2000048e

08008e7c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	460a      	mov	r2, r1
 8008e86:	71fb      	strb	r3, [r7, #7]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8008e90:	79bb      	ldrb	r3, [r7, #6]
 8008e92:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8008e94:	f107 030c 	add.w	r3, r7, #12
 8008e98:	2202      	movs	r2, #2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	208f      	movs	r0, #143	@ 0x8f
 8008e9e:	f000 f947 	bl	8009130 <SUBGRF_WriteCommand>
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8008eb4:	1d3b      	adds	r3, r7, #4
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4619      	mov	r1, r3
 8008eba:	2015      	movs	r0, #21
 8008ebc:	f000 f95a 	bl	8009174 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8008ec0:	793b      	ldrb	r3, [r7, #4]
 8008ec2:	425b      	negs	r3, r3
 8008ec4:	105b      	asrs	r3, r3, #1
 8008ec6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8008ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	2013      	movs	r0, #19
 8008ee8:	f000 f944 	bl	8009174 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008eec:	f7ff fd7e 	bl	80089ec <SUBGRF_GetPacketType>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d10d      	bne.n	8008f12 <SUBGRF_GetRxBufferStatus+0x3e>
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <SUBGRF_GetRxBufferStatus+0x54>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d108      	bne.n	8008f12 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8008f00:	f240 7002 	movw	r0, #1794	@ 0x702
 8008f04:	f000 f878 	bl	8008ff8 <SUBGRF_ReadRegister>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	e002      	b.n	8008f18 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8008f12:	7b3a      	ldrb	r2, [r7, #12]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8008f18:	7b7a      	ldrb	r2, [r7, #13]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	701a      	strb	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	2000048e 	.word	0x2000048e

08008f2c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	2203      	movs	r2, #3
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	2014      	movs	r0, #20
 8008f3e:	f000 f919 	bl	8009174 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8008f42:	f7ff fd53 	bl	80089ec <SUBGRF_GetPacketType>
 8008f46:	4603      	mov	r3, r0
 8008f48:	461a      	mov	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <SUBGRF_GetPacketStatus+0x30>
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d013      	beq.n	8008f82 <SUBGRF_GetPacketStatus+0x56>
 8008f5a:	e02a      	b.n	8008fb2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008f5c:	7b3a      	ldrb	r2, [r7, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8008f62:	7b7b      	ldrb	r3, [r7, #13]
 8008f64:	425b      	negs	r3, r3
 8008f66:	105b      	asrs	r3, r3, #1
 8008f68:	b25a      	sxtb	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	425b      	negs	r3, r3
 8008f72:	105b      	asrs	r3, r3, #1
 8008f74:	b25a      	sxtb	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	609a      	str	r2, [r3, #8]
            break;
 8008f80:	e020      	b.n	8008fc4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8008f82:	7b3b      	ldrb	r3, [r7, #12]
 8008f84:	425b      	negs	r3, r3
 8008f86:	105b      	asrs	r3, r3, #1
 8008f88:	b25a      	sxtb	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8008f8e:	7b7b      	ldrb	r3, [r7, #13]
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	3302      	adds	r3, #2
 8008f94:	109b      	asrs	r3, r3, #2
 8008f96:	b25a      	sxtb	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	425b      	negs	r3, r3
 8008fa0:	105b      	asrs	r3, r3, #1
 8008fa2:	b25a      	sxtb	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008fa8:	4b08      	ldr	r3, [pc, #32]	@ (8008fcc <SUBGRF_GetPacketStatus+0xa0>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	611a      	str	r2, [r3, #16]
            break;
 8008fb0:	e008      	b.n	8008fc4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8008fb2:	2214      	movs	r2, #20
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fca7 	bl	800990a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	220f      	movs	r2, #15
 8008fc0:	701a      	strb	r2, [r3, #0]
            break;
 8008fc2:	bf00      	nop
    }
}
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000490 	.word	0x20000490

08008fd0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	460a      	mov	r2, r1
 8008fda:	80fb      	strh	r3, [r7, #6]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008fe0:	1d7a      	adds	r2, r7, #5
 8008fe2:	88f9      	ldrh	r1, [r7, #6]
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	4803      	ldr	r0, [pc, #12]	@ (8008ff4 <SUBGRF_WriteRegister+0x24>)
 8008fe8:	f7fa f8b0 	bl	800314c <HAL_SUBGHZ_WriteRegisters>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20000110 	.word	0x20000110

08008ff8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009002:	f107 020f 	add.w	r2, r7, #15
 8009006:	88f9      	ldrh	r1, [r7, #6]
 8009008:	2301      	movs	r3, #1
 800900a:	4804      	ldr	r0, [pc, #16]	@ (800901c <SUBGRF_ReadRegister+0x24>)
 800900c:	f7fa f8fd 	bl	800320a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000110 	.word	0x20000110

08009020 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	80fb      	strh	r3, [r7, #6]
 800902c:	4613      	mov	r3, r2
 800902e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009030:	f3ef 8310 	mrs	r3, PRIMASK
 8009034:	60fb      	str	r3, [r7, #12]
  return(result);
 8009036:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009038:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800903a:	b672      	cpsid	i
}
 800903c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800903e:	88bb      	ldrh	r3, [r7, #4]
 8009040:	88f9      	ldrh	r1, [r7, #6]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	4806      	ldr	r0, [pc, #24]	@ (8009060 <SUBGRF_WriteRegisters+0x40>)
 8009046:	f7fa f881 	bl	800314c <HAL_SUBGHZ_WriteRegisters>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f383 8810 	msr	PRIMASK, r3
}
 8009054:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009056:	bf00      	nop
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000110 	.word	0x20000110

08009064 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	80fb      	strh	r3, [r7, #6]
 8009070:	4613      	mov	r3, r2
 8009072:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009074:	f3ef 8310 	mrs	r3, PRIMASK
 8009078:	60fb      	str	r3, [r7, #12]
  return(result);
 800907a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800907c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800907e:	b672      	cpsid	i
}
 8009080:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009082:	88bb      	ldrh	r3, [r7, #4]
 8009084:	88f9      	ldrh	r1, [r7, #6]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4806      	ldr	r0, [pc, #24]	@ (80090a4 <SUBGRF_ReadRegisters+0x40>)
 800908a:	f7fa f8be 	bl	800320a <HAL_SUBGHZ_ReadRegisters>
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f383 8810 	msr	PRIMASK, r3
}
 8009098:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800909a:	bf00      	nop
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000110 	.word	0x20000110

080090a8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	6039      	str	r1, [r7, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
 80090b4:	4613      	mov	r3, r2
 80090b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b8:	f3ef 8310 	mrs	r3, PRIMASK
 80090bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80090be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80090c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090c2:	b672      	cpsid	i
}
 80090c4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80090c6:	79bb      	ldrb	r3, [r7, #6]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	79f9      	ldrb	r1, [r7, #7]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	4806      	ldr	r0, [pc, #24]	@ (80090e8 <SUBGRF_WriteBuffer+0x40>)
 80090d0:	f7fa f9af 	bl	8003432 <HAL_SUBGHZ_WriteBuffer>
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f383 8810 	msr	PRIMASK, r3
}
 80090de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80090e0:	bf00      	nop
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000110 	.word	0x20000110

080090ec <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
 80090f8:	4613      	mov	r3, r2
 80090fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009100:	60fb      	str	r3, [r7, #12]
  return(result);
 8009102:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009106:	b672      	cpsid	i
}
 8009108:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800910a:	79bb      	ldrb	r3, [r7, #6]
 800910c:	b29b      	uxth	r3, r3
 800910e:	79f9      	ldrb	r1, [r7, #7]
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	4806      	ldr	r0, [pc, #24]	@ (800912c <SUBGRF_ReadBuffer+0x40>)
 8009114:	f7fa f9e0 	bl	80034d8 <HAL_SUBGHZ_ReadBuffer>
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f383 8810 	msr	PRIMASK, r3
}
 8009122:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009124:	bf00      	nop
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000110 	.word	0x20000110

08009130 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
 800913c:	4613      	mov	r3, r2
 800913e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009140:	f3ef 8310 	mrs	r3, PRIMASK
 8009144:	60fb      	str	r3, [r7, #12]
  return(result);
 8009146:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009148:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800914a:	b672      	cpsid	i
}
 800914c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800914e:	88bb      	ldrh	r3, [r7, #4]
 8009150:	79f9      	ldrb	r1, [r7, #7]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	4806      	ldr	r0, [pc, #24]	@ (8009170 <SUBGRF_WriteCommand+0x40>)
 8009156:	f7fa f8b9 	bl	80032cc <HAL_SUBGHZ_ExecSetCmd>
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f383 8810 	msr	PRIMASK, r3
}
 8009164:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009166:	bf00      	nop
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000110 	.word	0x20000110

08009174 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
 8009180:	4613      	mov	r3, r2
 8009182:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	60fb      	str	r3, [r7, #12]
  return(result);
 800918a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800918c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800918e:	b672      	cpsid	i
}
 8009190:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009192:	88bb      	ldrh	r3, [r7, #4]
 8009194:	79f9      	ldrb	r1, [r7, #7]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4806      	ldr	r0, [pc, #24]	@ (80091b4 <SUBGRF_ReadCommand+0x40>)
 800919a:	f7fa f8f6 	bl	800338a <HAL_SUBGHZ_ExecGetCmd>
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f383 8810 	msr	PRIMASK, r3
}
 80091a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80091aa:	bf00      	nop
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000110 	.word	0x20000110

080091b8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	460a      	mov	r2, r1
 80091c2:	71fb      	strb	r3, [r7, #7]
 80091c4:	4613      	mov	r3, r2
 80091c6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80091c8:	2301      	movs	r3, #1
 80091ca:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80091cc:	79bb      	ldrb	r3, [r7, #6]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d10d      	bne.n	80091ee <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d104      	bne.n	80091e2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80091d8:	2302      	movs	r3, #2
 80091da:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80091dc:	2004      	movs	r0, #4
 80091de:	f000 f8ef 	bl	80093c0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80091e2:	79fb      	ldrb	r3, [r7, #7]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d107      	bne.n	80091f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80091e8:	2303      	movs	r3, #3
 80091ea:	73fb      	strb	r3, [r7, #15]
 80091ec:	e004      	b.n	80091f8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80091ee:	79bb      	ldrb	r3, [r7, #6]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fad2 	bl	80097a4 <RBI_ConfigRFSwitch>
}
 8009200:	bf00      	nop
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009212:	2301      	movs	r3, #1
 8009214:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009216:	f000 fb23 	bl	8009860 <RBI_GetTxConfig>
 800921a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d016      	beq.n	8009250 <SUBGRF_SetRfTxPower+0x48>
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b02      	cmp	r3, #2
 8009226:	dc16      	bgt.n	8009256 <SUBGRF_SetRfTxPower+0x4e>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <SUBGRF_SetRfTxPower+0x2e>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d00a      	beq.n	800924a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009234:	e00f      	b.n	8009256 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800923a:	2b0f      	cmp	r3, #15
 800923c:	dd02      	ble.n	8009244 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800923e:	2302      	movs	r3, #2
 8009240:	73fb      	strb	r3, [r7, #15]
            break;
 8009242:	e009      	b.n	8009258 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
            break;
 8009248:	e006      	b.n	8009258 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800924a:	2301      	movs	r3, #1
 800924c:	73fb      	strb	r3, [r7, #15]
            break;
 800924e:	e003      	b.n	8009258 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009250:	2302      	movs	r3, #2
 8009252:	73fb      	strb	r3, [r7, #15]
            break;
 8009254:	e000      	b.n	8009258 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009256:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009258:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2202      	movs	r2, #2
 8009260:	4618      	mov	r0, r3
 8009262:	f7ff fbcd 	bl	8008a00 <SUBGRF_SetTxParams>

    return paSelect;
 8009266:	7bfb      	ldrb	r3, [r7, #15]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009274:	2301      	movs	r3, #1
}
 8009276:	4618      	mov	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	bc80      	pop	{r7}
 800927c:	4770      	bx	lr
	...

08009280 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009288:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2001      	movs	r0, #1
 800928e:	4798      	blx	r3
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000498 	.word	0x20000498

0800929c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80092a4:	4b03      	ldr	r3, [pc, #12]	@ (80092b4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2002      	movs	r0, #2
 80092aa:	4798      	blx	r3
}
 80092ac:	bf00      	nop
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20000498 	.word	0x20000498

080092b8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80092c0:	4b03      	ldr	r3, [pc, #12]	@ (80092d0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2040      	movs	r0, #64	@ 0x40
 80092c6:	4798      	blx	r3
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000498 	.word	0x20000498

080092d4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <HAL_SUBGHZ_CADStatusCallback+0x18>
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d005      	beq.n	80092f6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80092ea:	e00a      	b.n	8009302 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80092ec:	4b07      	ldr	r3, [pc, #28]	@ (800930c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2080      	movs	r0, #128	@ 0x80
 80092f2:	4798      	blx	r3
            break;
 80092f4:	e005      	b.n	8009302 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80092f6:	4b05      	ldr	r3, [pc, #20]	@ (800930c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80092fe:	4798      	blx	r3
            break;
 8009300:	bf00      	nop
    }
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000498 	.word	0x20000498

08009310 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009318:	4b04      	ldr	r3, [pc, #16]	@ (800932c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009320:	4798      	blx	r3
}
 8009322:	bf00      	nop
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000498 	.word	0x20000498

08009330 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009338:	4b03      	ldr	r3, [pc, #12]	@ (8009348 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2020      	movs	r0, #32
 800933e:	4798      	blx	r3
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000498 	.word	0x20000498

0800934c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009354:	4b03      	ldr	r3, [pc, #12]	@ (8009364 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2004      	movs	r0, #4
 800935a:	4798      	blx	r3
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000498 	.word	0x20000498

08009368 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009370:	4b03      	ldr	r3, [pc, #12]	@ (8009380 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2008      	movs	r0, #8
 8009376:	4798      	blx	r3
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20000498 	.word	0x20000498

08009384 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800938c:	4b03      	ldr	r3, [pc, #12]	@ (800939c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2010      	movs	r0, #16
 8009392:	4798      	blx	r3
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	20000498 	.word	0x20000498

080093a0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80093a8:	4b04      	ldr	r3, [pc, #16]	@ (80093bc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80093b0:	4798      	blx	r3
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000498 	.word	0x20000498

080093c0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80093ca:	f000 fa5f 	bl	800988c <RBI_IsDCDC>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d112      	bne.n	80093fa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80093d4:	f640 1023 	movw	r0, #2339	@ 0x923
 80093d8:	f7ff fe0e 	bl	8008ff8 <SUBGRF_ReadRegister>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
 80093e2:	f023 0306 	bic.w	r3, r3, #6
 80093e6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80093e8:	7bfa      	ldrb	r2, [r7, #15]
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	4619      	mov	r1, r3
 80093f2:	f640 1023 	movw	r0, #2339	@ 0x923
 80093f6:	f7ff fdeb 	bl	8008fd0 <SUBGRF_WriteRegister>
  }
}
 80093fa:	bf00      	nop
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009412:	231f      	movs	r3, #31
 8009414:	e017      	b.n	8009446 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
 800941a:	e00f      	b.n	800943c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4a0c      	ldr	r2, [pc, #48]	@ (8009450 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	429a      	cmp	r2, r3
 8009428:	d205      	bcs.n	8009436 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	4a08      	ldr	r2, [pc, #32]	@ (8009450 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4413      	add	r3, r2
 8009432:	791b      	ldrb	r3, [r3, #4]
 8009434:	e007      	b.n	8009446 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	3301      	adds	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	2b15      	cmp	r3, #21
 8009440:	d9ec      	bls.n	800941c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	bc80      	pop	{r7}
 800944e:	4770      	bx	lr
 8009450:	0800a8e8 	.word	0x0800a8e8

08009454 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	@ 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800945e:	4b35      	ldr	r3, [pc, #212]	@ (8009534 <SUBGRF_GetCFO+0xe0>)
 8009460:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8009462:	f640 0007 	movw	r0, #2055	@ 0x807
 8009466:	f7ff fdc7 	bl	8008ff8 <SUBGRF_ReadRegister>
 800946a:	4603      	mov	r3, r0
 800946c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800946e:	7ffb      	ldrb	r3, [r7, #31]
 8009470:	08db      	lsrs	r3, r3, #3
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0303 	and.w	r3, r3, #3
 8009478:	3328      	adds	r3, #40	@ 0x28
 800947a:	443b      	add	r3, r7
 800947c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009480:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009482:	7ffb      	ldrb	r3, [r7, #31]
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800948a:	7fba      	ldrb	r2, [r7, #30]
 800948c:	7f7b      	ldrb	r3, [r7, #29]
 800948e:	3301      	adds	r3, #1
 8009490:	fa02 f303 	lsl.w	r3, r2, r3
 8009494:	461a      	mov	r2, r3
 8009496:	4b28      	ldr	r3, [pc, #160]	@ (8009538 <SUBGRF_GetCFO+0xe4>)
 8009498:	fbb3 f3f2 	udiv	r3, r3, r2
 800949c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80094a8:	2301      	movs	r3, #1
 80094aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80094ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	fb02 f303 	mul.w	r3, r2, r3
 80094b8:	2b07      	cmp	r3, #7
 80094ba:	d802      	bhi.n	80094c2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 80094bc:	2302      	movs	r3, #2
 80094be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 80094c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	fb02 f303 	mul.w	r3, r2, r3
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d802      	bhi.n	80094d6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 80094d0:	2304      	movs	r3, #4
 80094d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80094d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	fb02 f303 	mul.w	r3, r2, r3
 80094e0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80094e2:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 80094e6:	f7ff fd87 	bl	8008ff8 <SUBGRF_ReadRegister>
 80094ea:	4603      	mov	r3, r0
 80094ec:	021b      	lsls	r3, r3, #8
 80094ee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80094f2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80094f4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 80094f8:	f7ff fd7e 	bl	8008ff8 <SUBGRF_ReadRegister>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	4313      	orrs	r3, r2
 8009504:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009516:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800951a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	095b      	lsrs	r3, r3, #5
 8009520:	6a3a      	ldr	r2, [r7, #32]
 8009522:	fb02 f303 	mul.w	r3, r2, r3
 8009526:	11da      	asrs	r2, r3, #7
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	601a      	str	r2, [r3, #0]
}
 800952c:	bf00      	nop
 800952e:	3728      	adds	r7, #40	@ 0x28
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	0c0a0804 	.word	0x0c0a0804
 8009538:	01e84800 	.word	0x01e84800

0800953c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
 8009548:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800954e:	f04f 33ff 	mov.w	r3, #4294967295
 8009552:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009554:	697b      	ldr	r3, [r7, #20]
}
 8009556:	4618      	mov	r0, r3
 8009558:	371c      	adds	r7, #28
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr

08009560 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	4603      	mov	r3, r0
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800956e:	2300      	movs	r3, #0
 8009570:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8009572:	f04f 33ff 	mov.w	r3, #4294967295
 8009576:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009578:	697b      	ldr	r3, [r7, #20]
}
 800957a:	4618      	mov	r0, r3
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8009590:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	bc80      	pop	{r7}
 800959c:	4770      	bx	lr

0800959e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800959e:	b480      	push	{r7}
 80095a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80095a2:	bf00      	nop
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr

080095aa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 80095aa:	b480      	push	{r7}
 80095ac:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 80095ae:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bc80      	pop	{r7}
 80095b6:	4770      	bx	lr

080095b8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 80095bc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80095be:	4618      	mov	r0, r3
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	4603      	mov	r3, r0
 80095ce:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr

080095da <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 80095da:	b480      	push	{r7}
 80095dc:	b087      	sub	sp, #28
 80095de:	af00      	add	r7, sp, #0
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	460b      	mov	r3, r1
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ec:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 80095ee:	697b      	ldr	r3, [r7, #20]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	371c      	adds	r7, #28
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr

080095fa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80095fa:	b480      	push	{r7}
 80095fc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 80095fe:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8009602:	4618      	mov	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	bc80      	pop	{r7}
 8009608:	4770      	bx	lr

0800960a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800960a:	b480      	push	{r7}
 800960c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800960e:	bf00      	nop
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr

08009616 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009616:	b480      	push	{r7}
 8009618:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800961a:	bf00      	nop
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr

08009622 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	4603      	mov	r3, r0
 800962a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800963a:	f7f7 fcab 	bl	8000f94 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800963e:	f000 f809 	bl	8009654 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009642:	bf00      	nop
 8009644:	bd80      	pop	{r7, pc}

08009646 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009646:	b480      	push	{r7}
 8009648:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800964a:	bf00      	nop
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr
	...

08009654 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009658:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <SubghzApp_Init+0x30>)
 800965a:	4a0b      	ldr	r2, [pc, #44]	@ (8009688 <SubghzApp_Init+0x34>)
 800965c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800965e:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <SubghzApp_Init+0x30>)
 8009660:	4a0a      	ldr	r2, [pc, #40]	@ (800968c <SubghzApp_Init+0x38>)
 8009662:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009664:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <SubghzApp_Init+0x30>)
 8009666:	4a0a      	ldr	r2, [pc, #40]	@ (8009690 <SubghzApp_Init+0x3c>)
 8009668:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800966a:	4b06      	ldr	r3, [pc, #24]	@ (8009684 <SubghzApp_Init+0x30>)
 800966c:	4a09      	ldr	r2, [pc, #36]	@ (8009694 <SubghzApp_Init+0x40>)
 800966e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009670:	4b04      	ldr	r3, [pc, #16]	@ (8009684 <SubghzApp_Init+0x30>)
 8009672:	4a09      	ldr	r2, [pc, #36]	@ (8009698 <SubghzApp_Init+0x44>)
 8009674:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009676:	4b09      	ldr	r3, [pc, #36]	@ (800969c <SubghzApp_Init+0x48>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4802      	ldr	r0, [pc, #8]	@ (8009684 <SubghzApp_Init+0x30>)
 800967c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	2000049c 	.word	0x2000049c
 8009688:	080096a1 	.word	0x080096a1
 800968c:	080096ad 	.word	0x080096ad
 8009690:	080096d1 	.word	0x080096d1
 8009694:	080096dd 	.word	0x080096dd
 8009698:	080096e9 	.word	0x080096e9
 800969c:	0800a858 	.word	0x0800a858

080096a0 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr

080096ac <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	4608      	mov	r0, r1
 80096b6:	4611      	mov	r1, r2
 80096b8:	461a      	mov	r2, r3
 80096ba:	4603      	mov	r3, r0
 80096bc:	817b      	strh	r3, [r7, #10]
 80096be:	460b      	mov	r3, r1
 80096c0:	813b      	strh	r3, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr

080096d0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 80096d4:	bf00      	nop
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr

080096dc <OnRxTimeout>:

static void OnRxTimeout(void)
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 80096e0:	bf00      	nop
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <OnRxError>:

static void OnRxError(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <LL_AHB2_GRP1_EnableClock>:
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80096fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009700:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4313      	orrs	r3, r2
 800970a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800970c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009710:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4013      	ands	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009718:	68fb      	ldr	r3, [r7, #12]
}
 800971a:	bf00      	nop
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	bc80      	pop	{r7}
 8009722:	4770      	bx	lr

08009724 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800972e:	463b      	mov	r3, r7
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800973c:	2004      	movs	r0, #4
 800973e:	f7ff ffd9 	bl	80096f4 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009742:	2310      	movs	r3, #16
 8009744:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8009746:	2301      	movs	r3, #1
 8009748:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800974e:	2303      	movs	r3, #3
 8009750:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009752:	463b      	mov	r3, r7
 8009754:	4619      	mov	r1, r3
 8009756:	4812      	ldr	r0, [pc, #72]	@ (80097a0 <RBI_Init+0x7c>)
 8009758:	f7f7 ff54 	bl	8001604 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800975c:	2320      	movs	r3, #32
 800975e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8009760:	463b      	mov	r3, r7
 8009762:	4619      	mov	r1, r3
 8009764:	480e      	ldr	r0, [pc, #56]	@ (80097a0 <RBI_Init+0x7c>)
 8009766:	f7f7 ff4d 	bl	8001604 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800976a:	2308      	movs	r3, #8
 800976c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800976e:	463b      	mov	r3, r7
 8009770:	4619      	mov	r1, r3
 8009772:	480b      	ldr	r0, [pc, #44]	@ (80097a0 <RBI_Init+0x7c>)
 8009774:	f7f7 ff46 	bl	8001604 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8009778:	2200      	movs	r2, #0
 800977a:	2120      	movs	r1, #32
 800977c:	4808      	ldr	r0, [pc, #32]	@ (80097a0 <RBI_Init+0x7c>)
 800977e:	f7f8 f8a1 	bl	80018c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8009782:	2200      	movs	r2, #0
 8009784:	2110      	movs	r1, #16
 8009786:	4806      	ldr	r0, [pc, #24]	@ (80097a0 <RBI_Init+0x7c>)
 8009788:	f7f8 f89c 	bl	80018c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800978c:	2200      	movs	r2, #0
 800978e:	2108      	movs	r1, #8
 8009790:	4803      	ldr	r0, [pc, #12]	@ (80097a0 <RBI_Init+0x7c>)
 8009792:	f7f8 f897 	bl	80018c4 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009796:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	48000800 	.word	0x48000800

080097a4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d84b      	bhi.n	8009850 <RBI_ConfigRFSwitch+0xac>
 80097b8:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <RBI_ConfigRFSwitch+0x1c>)
 80097ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097be:	bf00      	nop
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	080097f1 	.word	0x080097f1
 80097c8:	08009811 	.word	0x08009811
 80097cc:	08009831 	.word	0x08009831
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 80097d0:	2200      	movs	r2, #0
 80097d2:	2108      	movs	r1, #8
 80097d4:	4821      	ldr	r0, [pc, #132]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 80097d6:	f7f8 f875 	bl	80018c4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 80097da:	2200      	movs	r2, #0
 80097dc:	2110      	movs	r1, #16
 80097de:	481f      	ldr	r0, [pc, #124]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 80097e0:	f7f8 f870 	bl	80018c4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 80097e4:	2200      	movs	r2, #0
 80097e6:	2120      	movs	r1, #32
 80097e8:	481c      	ldr	r0, [pc, #112]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 80097ea:	f7f8 f86b 	bl	80018c4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 80097ee:	e030      	b.n	8009852 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80097f0:	2201      	movs	r2, #1
 80097f2:	2108      	movs	r1, #8
 80097f4:	4819      	ldr	r0, [pc, #100]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 80097f6:	f7f8 f865 	bl	80018c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 80097fa:	2201      	movs	r2, #1
 80097fc:	2110      	movs	r1, #16
 80097fe:	4817      	ldr	r0, [pc, #92]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 8009800:	f7f8 f860 	bl	80018c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009804:	2200      	movs	r2, #0
 8009806:	2120      	movs	r1, #32
 8009808:	4814      	ldr	r0, [pc, #80]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 800980a:	f7f8 f85b 	bl	80018c4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800980e:	e020      	b.n	8009852 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009810:	2201      	movs	r2, #1
 8009812:	2108      	movs	r1, #8
 8009814:	4811      	ldr	r0, [pc, #68]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 8009816:	f7f8 f855 	bl	80018c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800981a:	2201      	movs	r2, #1
 800981c:	2110      	movs	r1, #16
 800981e:	480f      	ldr	r0, [pc, #60]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 8009820:	f7f8 f850 	bl	80018c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009824:	2201      	movs	r2, #1
 8009826:	2120      	movs	r1, #32
 8009828:	480c      	ldr	r0, [pc, #48]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 800982a:	f7f8 f84b 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800982e:	e010      	b.n	8009852 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009830:	2201      	movs	r2, #1
 8009832:	2108      	movs	r1, #8
 8009834:	4809      	ldr	r0, [pc, #36]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 8009836:	f7f8 f845 	bl	80018c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800983a:	2200      	movs	r2, #0
 800983c:	2110      	movs	r1, #16
 800983e:	4807      	ldr	r0, [pc, #28]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 8009840:	f7f8 f840 	bl	80018c4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009844:	2201      	movs	r2, #1
 8009846:	2120      	movs	r1, #32
 8009848:	4804      	ldr	r0, [pc, #16]	@ (800985c <RBI_ConfigRFSwitch+0xb8>)
 800984a:	f7f8 f83b 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800984e:	e000      	b.n	8009852 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8009850:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009852:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	48000800 	.word	0x48000800

08009860 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009866:	2300      	movs	r3, #0
 8009868:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800986a:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr

08009876 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800987c:	2301      	movs	r3, #1
 800987e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 8009880:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	bc80      	pop	{r7}
 800988a:	4770      	bx	lr

0800988c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009892:	2301      	movs	r3, #1
 8009894:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8009896:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr

080098a2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b085      	sub	sp, #20
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	4603      	mov	r3, r0
 80098aa:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 80098b6:	230f      	movs	r3, #15
 80098b8:	60fb      	str	r3, [r7, #12]
 80098ba:	e001      	b.n	80098c0 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 80098bc:	2316      	movs	r3, #22
 80098be:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 80098c0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr

080098cc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4613      	mov	r3, r2
 80098d8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	613b      	str	r3, [r7, #16]

  while( size-- )
 80098e2:	e007      	b.n	80098f4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	1c53      	adds	r3, r2, #1
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	1c59      	adds	r1, r3, #1
 80098ee:	6179      	str	r1, [r7, #20]
 80098f0:	7812      	ldrb	r2, [r2, #0]
 80098f2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	1e5a      	subs	r2, r3, #1
 80098f8:	80fa      	strh	r2, [r7, #6]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f2      	bne.n	80098e4 <UTIL_MEM_cpy_8+0x18>
    }
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	bc80      	pop	{r7}
 8009908:	4770      	bx	lr

0800990a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	70fb      	strb	r3, [r7, #3]
 8009916:	4613      	mov	r3, r2
 8009918:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800991e:	e004      	b.n	800992a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	60fa      	str	r2, [r7, #12]
 8009926:	78fa      	ldrb	r2, [r7, #3]
 8009928:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800992a:	883b      	ldrh	r3, [r7, #0]
 800992c:	1e5a      	subs	r2, r3, #1
 800992e:	803a      	strh	r2, [r7, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1f5      	bne.n	8009920 <UTIL_MEM_set_8+0x16>
  }
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	4613      	mov	r3, r2
 800994e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d023      	beq.n	800999e <UTIL_TIMER_Create+0x5e>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d020      	beq.n	800999e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8009962:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <UTIL_TIMER_Create+0x68>)
 8009964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009966:	68b8      	ldr	r0, [r7, #8]
 8009968:	4798      	blx	r3
 800996a:	4602      	mov	r2, r0
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	79fa      	ldrb	r2, [r7, #7]
 8009992:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	e000      	b.n	80099a0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800999e:	2301      	movs	r3, #1
  }
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	0800a804 	.word	0x0800a804

080099ac <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	@ 0x28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d056      	beq.n	8009a6e <UTIL_TIMER_Start+0xc2>
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f929 	bl	8009c18 <TimerExists>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f083 0301 	eor.w	r3, r3, #1
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d04d      	beq.n	8009a6e <UTIL_TIMER_Start+0xc2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	7a5b      	ldrb	r3, [r3, #9]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d149      	bne.n	8009a6e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099da:	f3ef 8310 	mrs	r3, PRIMASK
 80099de:	613b      	str	r3, [r7, #16]
  return(result);
 80099e0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80099e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80099e4:	b672      	cpsid	i
}
 80099e6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80099ee:	4b24      	ldr	r3, [pc, #144]	@ (8009a80 <UTIL_TIMER_Start+0xd4>)
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	4798      	blx	r3
 80099f4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80099f6:	6a3a      	ldr	r2, [r7, #32]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d201      	bcs.n	8009a02 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a3a      	ldr	r2, [r7, #32]
 8009a06:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8009a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009a84 <UTIL_TIMER_Start+0xd8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8009a22:	4b17      	ldr	r3, [pc, #92]	@ (8009a80 <UTIL_TIMER_Start+0xd4>)
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f96b 	bl	8009d04 <TimerInsertNewHeadTimer>
 8009a2e:	e017      	b.n	8009a60 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8009a30:	4b13      	ldr	r3, [pc, #76]	@ (8009a80 <UTIL_TIMER_Start+0xd4>)
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	4798      	blx	r3
 8009a36:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	441a      	add	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4b0e      	ldr	r3, [pc, #56]	@ (8009a84 <UTIL_TIMER_Start+0xd8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d203      	bcs.n	8009a5a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f956 	bl	8009d04 <TimerInsertNewHeadTimer>
 8009a58:	e002      	b.n	8009a60 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f922 	bl	8009ca4 <TimerInsertTimer>
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f383 8810 	msr	PRIMASK, r3
}
 8009a6a:	bf00      	nop
  {
 8009a6c:	e002      	b.n	8009a74 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8009a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3728      	adds	r7, #40	@ 0x28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	0800a804 	.word	0x0800a804
 8009a84:	200004b8 	.word	0x200004b8

08009a88 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d05b      	beq.n	8009b52 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aa4:	b672      	cpsid	i
}
 8009aa6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8009aae:	4b2c      	ldr	r3, [pc, #176]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8009aba:	4b29      	ldr	r3, [pc, #164]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d041      	beq.n	8009b46 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8009ac8:	4b25      	ldr	r3, [pc, #148]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d134      	bne.n	8009b3c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8009ad2:	4b23      	ldr	r3, [pc, #140]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8009ada:	4b21      	ldr	r3, [pc, #132]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8009ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	4a1d      	ldr	r2, [pc, #116]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009aec:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8009aee:	4b1c      	ldr	r3, [pc, #112]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f8ac 	bl	8009c50 <TimerSetTimeout>
 8009af8:	e023      	b.n	8009b42 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8009afa:	4b1a      	ldr	r3, [pc, #104]	@ (8009b64 <UTIL_TIMER_Stop+0xdc>)
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	4798      	blx	r3
            TimerListHead = NULL;
 8009b00:	4b17      	ldr	r3, [pc, #92]	@ (8009b60 <UTIL_TIMER_Stop+0xd8>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e01c      	b.n	8009b42 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d110      	bne.n	8009b32 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8009b24:	e00d      	b.n	8009b42 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	615a      	str	r2, [r3, #20]
            break;
 8009b30:	e007      	b.n	8009b42 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e2      	bne.n	8009b08 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	77fb      	strb	r3, [r7, #31]
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f383 8810 	msr	PRIMASK, r3
}
 8009b50:	e001      	b.n	8009b56 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8009b52:	2301      	movs	r3, #1
 8009b54:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8009b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	200004b8 	.word	0x200004b8
 8009b64:	0800a804 	.word	0x0800a804

08009b68 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	73fb      	strb	r3, [r7, #15]
 8009b80:	e014      	b.n	8009bac <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8009b82:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb8 <UTIL_TIMER_SetPeriod+0x50>)
 8009b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b86:	6838      	ldr	r0, [r7, #0]
 8009b88:	4798      	blx	r3
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f841 	bl	8009c18 <TimerExists>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff ff73 	bl	8009a88 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff ff02 	bl	80099ac <UTIL_TIMER_Start>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	0800a804 	.word	0x0800a804

08009bbc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8009bc2:	4b06      	ldr	r3, [pc, #24]	@ (8009bdc <UTIL_TIMER_GetCurrentTime+0x20>)
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	4798      	blx	r3
 8009bc8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8009bca:	4b04      	ldr	r3, [pc, #16]	@ (8009bdc <UTIL_TIMER_GetCurrentTime+0x20>)
 8009bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
 8009bd2:	4603      	mov	r3, r0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	0800a804 	.word	0x0800a804

08009be0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8009be8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	4798      	blx	r3
 8009bee:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8009bf0:	4b08      	ldr	r3, [pc, #32]	@ (8009c14 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
 8009bf8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8009bfa:	4b06      	ldr	r3, [pc, #24]	@ (8009c14 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfe:	68f9      	ldr	r1, [r7, #12]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	1a8a      	subs	r2, r1, r2
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	4603      	mov	r3, r0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	0800a804 	.word	0x0800a804

08009c18 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009c20:	4b0a      	ldr	r3, [pc, #40]	@ (8009c4c <TimerExists+0x34>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8009c26:	e008      	b.n	8009c3a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d101      	bne.n	8009c34 <TimerExists+0x1c>
    {
      return true;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e006      	b.n	8009c42 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f3      	bne.n	8009c28 <TimerExists+0x10>
  }
  return false;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bc80      	pop	{r7}
 8009c4a:	4770      	bx	lr
 8009c4c:	200004b8 	.word	0x200004b8

08009c50 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <TimerSetTimeout+0x50>)
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	4798      	blx	r3
 8009c5e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681c      	ldr	r4, [r3, #0]
 8009c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ca0 <TimerSetTimeout+0x50>)
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	4798      	blx	r3
 8009c70:	4602      	mov	r2, r0
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4413      	add	r3, r2
 8009c76:	429c      	cmp	r4, r3
 8009c78:	d207      	bcs.n	8009c8a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8009c7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <TimerSetTimeout+0x50>)
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	4798      	blx	r3
 8009c80:	4602      	mov	r2, r0
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	441a      	add	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8009c8a:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <TimerSetTimeout+0x50>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6812      	ldr	r2, [r2, #0]
 8009c92:	4610      	mov	r0, r2
 8009c94:	4798      	blx	r3
}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd90      	pop	{r4, r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0800a804 	.word	0x0800a804

08009ca4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009cac:	4b14      	ldr	r3, [pc, #80]	@ (8009d00 <TimerInsertTimer+0x5c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8009cb2:	4b13      	ldr	r3, [pc, #76]	@ (8009d00 <TimerInsertTimer+0x5c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8009cba:	e012      	b.n	8009ce2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d905      	bls.n	8009cd4 <TimerInsertTimer+0x30>
    {
        cur = next;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	60bb      	str	r3, [r7, #8]
 8009cd2:	e006      	b.n	8009ce2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	615a      	str	r2, [r3, #20]
        return;
 8009ce0:	e009      	b.n	8009cf6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e8      	bne.n	8009cbc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	615a      	str	r2, [r3, #20]
}
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bc80      	pop	{r7}
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	200004b8 	.word	0x200004b8

08009d04 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d3c <TimerInsertNewHeadTimer+0x38>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8009d24:	4a05      	ldr	r2, [pc, #20]	@ (8009d3c <TimerInsertNewHeadTimer+0x38>)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8009d2a:	4b04      	ldr	r3, [pc, #16]	@ (8009d3c <TimerInsertNewHeadTimer+0x38>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff ff8e 	bl	8009c50 <TimerSetTimeout>
}
 8009d34:	bf00      	nop
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	200004b8 	.word	0x200004b8

08009d40 <_vsniprintf_r>:
 8009d40:	b530      	push	{r4, r5, lr}
 8009d42:	4614      	mov	r4, r2
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	b09b      	sub	sp, #108	@ 0x6c
 8009d48:	4605      	mov	r5, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	da05      	bge.n	8009d5a <_vsniprintf_r+0x1a>
 8009d4e:	238b      	movs	r3, #139	@ 0x8b
 8009d50:	6003      	str	r3, [r0, #0]
 8009d52:	f04f 30ff 	mov.w	r0, #4294967295
 8009d56:	b01b      	add	sp, #108	@ 0x6c
 8009d58:	bd30      	pop	{r4, r5, pc}
 8009d5a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009d5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009d62:	bf14      	ite	ne
 8009d64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d68:	4623      	moveq	r3, r4
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d72:	9100      	str	r1, [sp, #0]
 8009d74:	9104      	str	r1, [sp, #16]
 8009d76:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009d7a:	4669      	mov	r1, sp
 8009d7c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009d7e:	f000 f9af 	bl	800a0e0 <_svfiprintf_r>
 8009d82:	1c43      	adds	r3, r0, #1
 8009d84:	bfbc      	itt	lt
 8009d86:	238b      	movlt	r3, #139	@ 0x8b
 8009d88:	602b      	strlt	r3, [r5, #0]
 8009d8a:	2c00      	cmp	r4, #0
 8009d8c:	d0e3      	beq.n	8009d56 <_vsniprintf_r+0x16>
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
 8009d94:	e7df      	b.n	8009d56 <_vsniprintf_r+0x16>
	...

08009d98 <vsniprintf>:
 8009d98:	b507      	push	{r0, r1, r2, lr}
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	460a      	mov	r2, r1
 8009da0:	4601      	mov	r1, r0
 8009da2:	4803      	ldr	r0, [pc, #12]	@ (8009db0 <vsniprintf+0x18>)
 8009da4:	6800      	ldr	r0, [r0, #0]
 8009da6:	f7ff ffcb 	bl	8009d40 <_vsniprintf_r>
 8009daa:	b003      	add	sp, #12
 8009dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8009db0:	20000010 	.word	0x20000010

08009db4 <memset>:
 8009db4:	4402      	add	r2, r0
 8009db6:	4603      	mov	r3, r0
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d100      	bne.n	8009dbe <memset+0xa>
 8009dbc:	4770      	bx	lr
 8009dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009dc2:	e7f9      	b.n	8009db8 <memset+0x4>

08009dc4 <__errno>:
 8009dc4:	4b01      	ldr	r3, [pc, #4]	@ (8009dcc <__errno+0x8>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	20000010 	.word	0x20000010

08009dd0 <__libc_init_array>:
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8009e08 <__libc_init_array+0x38>)
 8009dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8009e0c <__libc_init_array+0x3c>)
 8009dd6:	1b64      	subs	r4, r4, r5
 8009dd8:	10a4      	asrs	r4, r4, #2
 8009dda:	2600      	movs	r6, #0
 8009ddc:	42a6      	cmp	r6, r4
 8009dde:	d109      	bne.n	8009df4 <__libc_init_array+0x24>
 8009de0:	4d0b      	ldr	r5, [pc, #44]	@ (8009e10 <__libc_init_array+0x40>)
 8009de2:	4c0c      	ldr	r4, [pc, #48]	@ (8009e14 <__libc_init_array+0x44>)
 8009de4:	f000 fc66 	bl	800a6b4 <_init>
 8009de8:	1b64      	subs	r4, r4, r5
 8009dea:	10a4      	asrs	r4, r4, #2
 8009dec:	2600      	movs	r6, #0
 8009dee:	42a6      	cmp	r6, r4
 8009df0:	d105      	bne.n	8009dfe <__libc_init_array+0x2e>
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
 8009df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df8:	4798      	blx	r3
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	e7ee      	b.n	8009ddc <__libc_init_array+0xc>
 8009dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e02:	4798      	blx	r3
 8009e04:	3601      	adds	r6, #1
 8009e06:	e7f2      	b.n	8009dee <__libc_init_array+0x1e>
 8009e08:	0800a9d4 	.word	0x0800a9d4
 8009e0c:	0800a9d4 	.word	0x0800a9d4
 8009e10:	0800a9d4 	.word	0x0800a9d4
 8009e14:	0800a9d8 	.word	0x0800a9d8

08009e18 <__retarget_lock_acquire_recursive>:
 8009e18:	4770      	bx	lr

08009e1a <__retarget_lock_release_recursive>:
 8009e1a:	4770      	bx	lr

08009e1c <memcpy>:
 8009e1c:	440a      	add	r2, r1
 8009e1e:	4291      	cmp	r1, r2
 8009e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e24:	d100      	bne.n	8009e28 <memcpy+0xc>
 8009e26:	4770      	bx	lr
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e32:	4291      	cmp	r1, r2
 8009e34:	d1f9      	bne.n	8009e2a <memcpy+0xe>
 8009e36:	bd10      	pop	{r4, pc}

08009e38 <_free_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d041      	beq.n	8009ec4 <_free_r+0x8c>
 8009e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e44:	1f0c      	subs	r4, r1, #4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfb8      	it	lt
 8009e4a:	18e4      	addlt	r4, r4, r3
 8009e4c:	f000 f8e0 	bl	800a010 <__malloc_lock>
 8009e50:	4a1d      	ldr	r2, [pc, #116]	@ (8009ec8 <_free_r+0x90>)
 8009e52:	6813      	ldr	r3, [r2, #0]
 8009e54:	b933      	cbnz	r3, 8009e64 <_free_r+0x2c>
 8009e56:	6063      	str	r3, [r4, #4]
 8009e58:	6014      	str	r4, [r2, #0]
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e60:	f000 b8dc 	b.w	800a01c <__malloc_unlock>
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	d908      	bls.n	8009e7a <_free_r+0x42>
 8009e68:	6820      	ldr	r0, [r4, #0]
 8009e6a:	1821      	adds	r1, r4, r0
 8009e6c:	428b      	cmp	r3, r1
 8009e6e:	bf01      	itttt	eq
 8009e70:	6819      	ldreq	r1, [r3, #0]
 8009e72:	685b      	ldreq	r3, [r3, #4]
 8009e74:	1809      	addeq	r1, r1, r0
 8009e76:	6021      	streq	r1, [r4, #0]
 8009e78:	e7ed      	b.n	8009e56 <_free_r+0x1e>
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	b10b      	cbz	r3, 8009e84 <_free_r+0x4c>
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	d9fa      	bls.n	8009e7a <_free_r+0x42>
 8009e84:	6811      	ldr	r1, [r2, #0]
 8009e86:	1850      	adds	r0, r2, r1
 8009e88:	42a0      	cmp	r0, r4
 8009e8a:	d10b      	bne.n	8009ea4 <_free_r+0x6c>
 8009e8c:	6820      	ldr	r0, [r4, #0]
 8009e8e:	4401      	add	r1, r0
 8009e90:	1850      	adds	r0, r2, r1
 8009e92:	4283      	cmp	r3, r0
 8009e94:	6011      	str	r1, [r2, #0]
 8009e96:	d1e0      	bne.n	8009e5a <_free_r+0x22>
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	6053      	str	r3, [r2, #4]
 8009e9e:	4408      	add	r0, r1
 8009ea0:	6010      	str	r0, [r2, #0]
 8009ea2:	e7da      	b.n	8009e5a <_free_r+0x22>
 8009ea4:	d902      	bls.n	8009eac <_free_r+0x74>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	e7d6      	b.n	8009e5a <_free_r+0x22>
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	1821      	adds	r1, r4, r0
 8009eb0:	428b      	cmp	r3, r1
 8009eb2:	bf04      	itt	eq
 8009eb4:	6819      	ldreq	r1, [r3, #0]
 8009eb6:	685b      	ldreq	r3, [r3, #4]
 8009eb8:	6063      	str	r3, [r4, #4]
 8009eba:	bf04      	itt	eq
 8009ebc:	1809      	addeq	r1, r1, r0
 8009ebe:	6021      	streq	r1, [r4, #0]
 8009ec0:	6054      	str	r4, [r2, #4]
 8009ec2:	e7ca      	b.n	8009e5a <_free_r+0x22>
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000600 	.word	0x20000600

08009ecc <sbrk_aligned>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	4e0f      	ldr	r6, [pc, #60]	@ (8009f0c <sbrk_aligned+0x40>)
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	6831      	ldr	r1, [r6, #0]
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	b911      	cbnz	r1, 8009ede <sbrk_aligned+0x12>
 8009ed8:	f000 fba6 	bl	800a628 <_sbrk_r>
 8009edc:	6030      	str	r0, [r6, #0]
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 fba1 	bl	800a628 <_sbrk_r>
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	d103      	bne.n	8009ef2 <sbrk_aligned+0x26>
 8009eea:	f04f 34ff 	mov.w	r4, #4294967295
 8009eee:	4620      	mov	r0, r4
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	1cc4      	adds	r4, r0, #3
 8009ef4:	f024 0403 	bic.w	r4, r4, #3
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d0f8      	beq.n	8009eee <sbrk_aligned+0x22>
 8009efc:	1a21      	subs	r1, r4, r0
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 fb92 	bl	800a628 <_sbrk_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d1f2      	bne.n	8009eee <sbrk_aligned+0x22>
 8009f08:	e7ef      	b.n	8009eea <sbrk_aligned+0x1e>
 8009f0a:	bf00      	nop
 8009f0c:	200005fc 	.word	0x200005fc

08009f10 <_malloc_r>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	1ccd      	adds	r5, r1, #3
 8009f16:	f025 0503 	bic.w	r5, r5, #3
 8009f1a:	3508      	adds	r5, #8
 8009f1c:	2d0c      	cmp	r5, #12
 8009f1e:	bf38      	it	cc
 8009f20:	250c      	movcc	r5, #12
 8009f22:	2d00      	cmp	r5, #0
 8009f24:	4606      	mov	r6, r0
 8009f26:	db01      	blt.n	8009f2c <_malloc_r+0x1c>
 8009f28:	42a9      	cmp	r1, r5
 8009f2a:	d904      	bls.n	8009f36 <_malloc_r+0x26>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	6033      	str	r3, [r6, #0]
 8009f30:	2000      	movs	r0, #0
 8009f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a00c <_malloc_r+0xfc>
 8009f3a:	f000 f869 	bl	800a010 <__malloc_lock>
 8009f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f42:	461c      	mov	r4, r3
 8009f44:	bb44      	cbnz	r4, 8009f98 <_malloc_r+0x88>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7ff ffbf 	bl	8009ecc <sbrk_aligned>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	4604      	mov	r4, r0
 8009f52:	d158      	bne.n	800a006 <_malloc_r+0xf6>
 8009f54:	f8d8 4000 	ldr.w	r4, [r8]
 8009f58:	4627      	mov	r7, r4
 8009f5a:	2f00      	cmp	r7, #0
 8009f5c:	d143      	bne.n	8009fe6 <_malloc_r+0xd6>
 8009f5e:	2c00      	cmp	r4, #0
 8009f60:	d04b      	beq.n	8009ffa <_malloc_r+0xea>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	4639      	mov	r1, r7
 8009f66:	4630      	mov	r0, r6
 8009f68:	eb04 0903 	add.w	r9, r4, r3
 8009f6c:	f000 fb5c 	bl	800a628 <_sbrk_r>
 8009f70:	4581      	cmp	r9, r0
 8009f72:	d142      	bne.n	8009ffa <_malloc_r+0xea>
 8009f74:	6821      	ldr	r1, [r4, #0]
 8009f76:	1a6d      	subs	r5, r5, r1
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f7ff ffa6 	bl	8009ecc <sbrk_aligned>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d03a      	beq.n	8009ffa <_malloc_r+0xea>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	442b      	add	r3, r5
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	bb62      	cbnz	r2, 8009fec <_malloc_r+0xdc>
 8009f92:	f8c8 7000 	str.w	r7, [r8]
 8009f96:	e00f      	b.n	8009fb8 <_malloc_r+0xa8>
 8009f98:	6822      	ldr	r2, [r4, #0]
 8009f9a:	1b52      	subs	r2, r2, r5
 8009f9c:	d420      	bmi.n	8009fe0 <_malloc_r+0xd0>
 8009f9e:	2a0b      	cmp	r2, #11
 8009fa0:	d917      	bls.n	8009fd2 <_malloc_r+0xc2>
 8009fa2:	1961      	adds	r1, r4, r5
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	6025      	str	r5, [r4, #0]
 8009fa8:	bf18      	it	ne
 8009faa:	6059      	strne	r1, [r3, #4]
 8009fac:	6863      	ldr	r3, [r4, #4]
 8009fae:	bf08      	it	eq
 8009fb0:	f8c8 1000 	streq.w	r1, [r8]
 8009fb4:	5162      	str	r2, [r4, r5]
 8009fb6:	604b      	str	r3, [r1, #4]
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 f82f 	bl	800a01c <__malloc_unlock>
 8009fbe:	f104 000b 	add.w	r0, r4, #11
 8009fc2:	1d23      	adds	r3, r4, #4
 8009fc4:	f020 0007 	bic.w	r0, r0, #7
 8009fc8:	1ac2      	subs	r2, r0, r3
 8009fca:	bf1c      	itt	ne
 8009fcc:	1a1b      	subne	r3, r3, r0
 8009fce:	50a3      	strne	r3, [r4, r2]
 8009fd0:	e7af      	b.n	8009f32 <_malloc_r+0x22>
 8009fd2:	6862      	ldr	r2, [r4, #4]
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	bf0c      	ite	eq
 8009fd8:	f8c8 2000 	streq.w	r2, [r8]
 8009fdc:	605a      	strne	r2, [r3, #4]
 8009fde:	e7eb      	b.n	8009fb8 <_malloc_r+0xa8>
 8009fe0:	4623      	mov	r3, r4
 8009fe2:	6864      	ldr	r4, [r4, #4]
 8009fe4:	e7ae      	b.n	8009f44 <_malloc_r+0x34>
 8009fe6:	463c      	mov	r4, r7
 8009fe8:	687f      	ldr	r7, [r7, #4]
 8009fea:	e7b6      	b.n	8009f5a <_malloc_r+0x4a>
 8009fec:	461a      	mov	r2, r3
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d1fb      	bne.n	8009fec <_malloc_r+0xdc>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6053      	str	r3, [r2, #4]
 8009ff8:	e7de      	b.n	8009fb8 <_malloc_r+0xa8>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	6033      	str	r3, [r6, #0]
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f80c 	bl	800a01c <__malloc_unlock>
 800a004:	e794      	b.n	8009f30 <_malloc_r+0x20>
 800a006:	6005      	str	r5, [r0, #0]
 800a008:	e7d6      	b.n	8009fb8 <_malloc_r+0xa8>
 800a00a:	bf00      	nop
 800a00c:	20000600 	.word	0x20000600

0800a010 <__malloc_lock>:
 800a010:	4801      	ldr	r0, [pc, #4]	@ (800a018 <__malloc_lock+0x8>)
 800a012:	f7ff bf01 	b.w	8009e18 <__retarget_lock_acquire_recursive>
 800a016:	bf00      	nop
 800a018:	200005f8 	.word	0x200005f8

0800a01c <__malloc_unlock>:
 800a01c:	4801      	ldr	r0, [pc, #4]	@ (800a024 <__malloc_unlock+0x8>)
 800a01e:	f7ff befc 	b.w	8009e1a <__retarget_lock_release_recursive>
 800a022:	bf00      	nop
 800a024:	200005f8 	.word	0x200005f8

0800a028 <__ssputs_r>:
 800a028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a02c:	688e      	ldr	r6, [r1, #8]
 800a02e:	461f      	mov	r7, r3
 800a030:	42be      	cmp	r6, r7
 800a032:	680b      	ldr	r3, [r1, #0]
 800a034:	4682      	mov	sl, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4690      	mov	r8, r2
 800a03a:	d82d      	bhi.n	800a098 <__ssputs_r+0x70>
 800a03c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a040:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a044:	d026      	beq.n	800a094 <__ssputs_r+0x6c>
 800a046:	6965      	ldr	r5, [r4, #20]
 800a048:	6909      	ldr	r1, [r1, #16]
 800a04a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a04e:	eba3 0901 	sub.w	r9, r3, r1
 800a052:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a056:	1c7b      	adds	r3, r7, #1
 800a058:	444b      	add	r3, r9
 800a05a:	106d      	asrs	r5, r5, #1
 800a05c:	429d      	cmp	r5, r3
 800a05e:	bf38      	it	cc
 800a060:	461d      	movcc	r5, r3
 800a062:	0553      	lsls	r3, r2, #21
 800a064:	d527      	bpl.n	800a0b6 <__ssputs_r+0x8e>
 800a066:	4629      	mov	r1, r5
 800a068:	f7ff ff52 	bl	8009f10 <_malloc_r>
 800a06c:	4606      	mov	r6, r0
 800a06e:	b360      	cbz	r0, 800a0ca <__ssputs_r+0xa2>
 800a070:	6921      	ldr	r1, [r4, #16]
 800a072:	464a      	mov	r2, r9
 800a074:	f7ff fed2 	bl	8009e1c <memcpy>
 800a078:	89a3      	ldrh	r3, [r4, #12]
 800a07a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	6126      	str	r6, [r4, #16]
 800a086:	6165      	str	r5, [r4, #20]
 800a088:	444e      	add	r6, r9
 800a08a:	eba5 0509 	sub.w	r5, r5, r9
 800a08e:	6026      	str	r6, [r4, #0]
 800a090:	60a5      	str	r5, [r4, #8]
 800a092:	463e      	mov	r6, r7
 800a094:	42be      	cmp	r6, r7
 800a096:	d900      	bls.n	800a09a <__ssputs_r+0x72>
 800a098:	463e      	mov	r6, r7
 800a09a:	6820      	ldr	r0, [r4, #0]
 800a09c:	4632      	mov	r2, r6
 800a09e:	4641      	mov	r1, r8
 800a0a0:	f000 faa8 	bl	800a5f4 <memmove>
 800a0a4:	68a3      	ldr	r3, [r4, #8]
 800a0a6:	1b9b      	subs	r3, r3, r6
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	4433      	add	r3, r6
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	f000 fac6 	bl	800a648 <_realloc_r>
 800a0bc:	4606      	mov	r6, r0
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d1e0      	bne.n	800a084 <__ssputs_r+0x5c>
 800a0c2:	6921      	ldr	r1, [r4, #16]
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	f7ff feb7 	bl	8009e38 <_free_r>
 800a0ca:	230c      	movs	r3, #12
 800a0cc:	f8ca 3000 	str.w	r3, [sl]
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	e7e9      	b.n	800a0b2 <__ssputs_r+0x8a>
	...

0800a0e0 <_svfiprintf_r>:
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	4698      	mov	r8, r3
 800a0e6:	898b      	ldrh	r3, [r1, #12]
 800a0e8:	061b      	lsls	r3, r3, #24
 800a0ea:	b09d      	sub	sp, #116	@ 0x74
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	4614      	mov	r4, r2
 800a0f2:	d510      	bpl.n	800a116 <_svfiprintf_r+0x36>
 800a0f4:	690b      	ldr	r3, [r1, #16]
 800a0f6:	b973      	cbnz	r3, 800a116 <_svfiprintf_r+0x36>
 800a0f8:	2140      	movs	r1, #64	@ 0x40
 800a0fa:	f7ff ff09 	bl	8009f10 <_malloc_r>
 800a0fe:	6028      	str	r0, [r5, #0]
 800a100:	6128      	str	r0, [r5, #16]
 800a102:	b930      	cbnz	r0, 800a112 <_svfiprintf_r+0x32>
 800a104:	230c      	movs	r3, #12
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b01d      	add	sp, #116	@ 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	2340      	movs	r3, #64	@ 0x40
 800a114:	616b      	str	r3, [r5, #20]
 800a116:	2300      	movs	r3, #0
 800a118:	9309      	str	r3, [sp, #36]	@ 0x24
 800a11a:	2320      	movs	r3, #32
 800a11c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a120:	f8cd 800c 	str.w	r8, [sp, #12]
 800a124:	2330      	movs	r3, #48	@ 0x30
 800a126:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2c4 <_svfiprintf_r+0x1e4>
 800a12a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a12e:	f04f 0901 	mov.w	r9, #1
 800a132:	4623      	mov	r3, r4
 800a134:	469a      	mov	sl, r3
 800a136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a13a:	b10a      	cbz	r2, 800a140 <_svfiprintf_r+0x60>
 800a13c:	2a25      	cmp	r2, #37	@ 0x25
 800a13e:	d1f9      	bne.n	800a134 <_svfiprintf_r+0x54>
 800a140:	ebba 0b04 	subs.w	fp, sl, r4
 800a144:	d00b      	beq.n	800a15e <_svfiprintf_r+0x7e>
 800a146:	465b      	mov	r3, fp
 800a148:	4622      	mov	r2, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	4638      	mov	r0, r7
 800a14e:	f7ff ff6b 	bl	800a028 <__ssputs_r>
 800a152:	3001      	adds	r0, #1
 800a154:	f000 80a7 	beq.w	800a2a6 <_svfiprintf_r+0x1c6>
 800a158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a15a:	445a      	add	r2, fp
 800a15c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a15e:	f89a 3000 	ldrb.w	r3, [sl]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 809f 	beq.w	800a2a6 <_svfiprintf_r+0x1c6>
 800a168:	2300      	movs	r3, #0
 800a16a:	f04f 32ff 	mov.w	r2, #4294967295
 800a16e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a172:	f10a 0a01 	add.w	sl, sl, #1
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	9307      	str	r3, [sp, #28]
 800a17a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a17e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a180:	4654      	mov	r4, sl
 800a182:	2205      	movs	r2, #5
 800a184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a188:	484e      	ldr	r0, [pc, #312]	@ (800a2c4 <_svfiprintf_r+0x1e4>)
 800a18a:	f7f5 fff9 	bl	8000180 <memchr>
 800a18e:	9a04      	ldr	r2, [sp, #16]
 800a190:	b9d8      	cbnz	r0, 800a1ca <_svfiprintf_r+0xea>
 800a192:	06d0      	lsls	r0, r2, #27
 800a194:	bf44      	itt	mi
 800a196:	2320      	movmi	r3, #32
 800a198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a19c:	0711      	lsls	r1, r2, #28
 800a19e:	bf44      	itt	mi
 800a1a0:	232b      	movmi	r3, #43	@ 0x2b
 800a1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ac:	d015      	beq.n	800a1da <_svfiprintf_r+0xfa>
 800a1ae:	9a07      	ldr	r2, [sp, #28]
 800a1b0:	4654      	mov	r4, sl
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	f04f 0c0a 	mov.w	ip, #10
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1be:	3b30      	subs	r3, #48	@ 0x30
 800a1c0:	2b09      	cmp	r3, #9
 800a1c2:	d94b      	bls.n	800a25c <_svfiprintf_r+0x17c>
 800a1c4:	b1b0      	cbz	r0, 800a1f4 <_svfiprintf_r+0x114>
 800a1c6:	9207      	str	r2, [sp, #28]
 800a1c8:	e014      	b.n	800a1f4 <_svfiprintf_r+0x114>
 800a1ca:	eba0 0308 	sub.w	r3, r0, r8
 800a1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	46a2      	mov	sl, r4
 800a1d8:	e7d2      	b.n	800a180 <_svfiprintf_r+0xa0>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	1d19      	adds	r1, r3, #4
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	9103      	str	r1, [sp, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfbb      	ittet	lt
 800a1e6:	425b      	neglt	r3, r3
 800a1e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ec:	9307      	strge	r3, [sp, #28]
 800a1ee:	9307      	strlt	r3, [sp, #28]
 800a1f0:	bfb8      	it	lt
 800a1f2:	9204      	strlt	r2, [sp, #16]
 800a1f4:	7823      	ldrb	r3, [r4, #0]
 800a1f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1f8:	d10a      	bne.n	800a210 <_svfiprintf_r+0x130>
 800a1fa:	7863      	ldrb	r3, [r4, #1]
 800a1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1fe:	d132      	bne.n	800a266 <_svfiprintf_r+0x186>
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	1d1a      	adds	r2, r3, #4
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	9203      	str	r2, [sp, #12]
 800a208:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a20c:	3402      	adds	r4, #2
 800a20e:	9305      	str	r3, [sp, #20]
 800a210:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a2c8 <_svfiprintf_r+0x1e8>
 800a214:	7821      	ldrb	r1, [r4, #0]
 800a216:	2203      	movs	r2, #3
 800a218:	4650      	mov	r0, sl
 800a21a:	f7f5 ffb1 	bl	8000180 <memchr>
 800a21e:	b138      	cbz	r0, 800a230 <_svfiprintf_r+0x150>
 800a220:	9b04      	ldr	r3, [sp, #16]
 800a222:	eba0 000a 	sub.w	r0, r0, sl
 800a226:	2240      	movs	r2, #64	@ 0x40
 800a228:	4082      	lsls	r2, r0
 800a22a:	4313      	orrs	r3, r2
 800a22c:	3401      	adds	r4, #1
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a234:	4825      	ldr	r0, [pc, #148]	@ (800a2cc <_svfiprintf_r+0x1ec>)
 800a236:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a23a:	2206      	movs	r2, #6
 800a23c:	f7f5 ffa0 	bl	8000180 <memchr>
 800a240:	2800      	cmp	r0, #0
 800a242:	d036      	beq.n	800a2b2 <_svfiprintf_r+0x1d2>
 800a244:	4b22      	ldr	r3, [pc, #136]	@ (800a2d0 <_svfiprintf_r+0x1f0>)
 800a246:	bb1b      	cbnz	r3, 800a290 <_svfiprintf_r+0x1b0>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	3307      	adds	r3, #7
 800a24c:	f023 0307 	bic.w	r3, r3, #7
 800a250:	3308      	adds	r3, #8
 800a252:	9303      	str	r3, [sp, #12]
 800a254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a256:	4433      	add	r3, r6
 800a258:	9309      	str	r3, [sp, #36]	@ 0x24
 800a25a:	e76a      	b.n	800a132 <_svfiprintf_r+0x52>
 800a25c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a260:	460c      	mov	r4, r1
 800a262:	2001      	movs	r0, #1
 800a264:	e7a8      	b.n	800a1b8 <_svfiprintf_r+0xd8>
 800a266:	2300      	movs	r3, #0
 800a268:	3401      	adds	r4, #1
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	4619      	mov	r1, r3
 800a26e:	f04f 0c0a 	mov.w	ip, #10
 800a272:	4620      	mov	r0, r4
 800a274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a278:	3a30      	subs	r2, #48	@ 0x30
 800a27a:	2a09      	cmp	r2, #9
 800a27c:	d903      	bls.n	800a286 <_svfiprintf_r+0x1a6>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0c6      	beq.n	800a210 <_svfiprintf_r+0x130>
 800a282:	9105      	str	r1, [sp, #20]
 800a284:	e7c4      	b.n	800a210 <_svfiprintf_r+0x130>
 800a286:	fb0c 2101 	mla	r1, ip, r1, r2
 800a28a:	4604      	mov	r4, r0
 800a28c:	2301      	movs	r3, #1
 800a28e:	e7f0      	b.n	800a272 <_svfiprintf_r+0x192>
 800a290:	ab03      	add	r3, sp, #12
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	462a      	mov	r2, r5
 800a296:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <_svfiprintf_r+0x1f4>)
 800a298:	a904      	add	r1, sp, #16
 800a29a:	4638      	mov	r0, r7
 800a29c:	f3af 8000 	nop.w
 800a2a0:	1c42      	adds	r2, r0, #1
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	d1d6      	bne.n	800a254 <_svfiprintf_r+0x174>
 800a2a6:	89ab      	ldrh	r3, [r5, #12]
 800a2a8:	065b      	lsls	r3, r3, #25
 800a2aa:	f53f af2d 	bmi.w	800a108 <_svfiprintf_r+0x28>
 800a2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2b0:	e72c      	b.n	800a10c <_svfiprintf_r+0x2c>
 800a2b2:	ab03      	add	r3, sp, #12
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	462a      	mov	r2, r5
 800a2b8:	4b06      	ldr	r3, [pc, #24]	@ (800a2d4 <_svfiprintf_r+0x1f4>)
 800a2ba:	a904      	add	r1, sp, #16
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f000 f879 	bl	800a3b4 <_printf_i>
 800a2c2:	e7ed      	b.n	800a2a0 <_svfiprintf_r+0x1c0>
 800a2c4:	0800a998 	.word	0x0800a998
 800a2c8:	0800a99e 	.word	0x0800a99e
 800a2cc:	0800a9a2 	.word	0x0800a9a2
 800a2d0:	00000000 	.word	0x00000000
 800a2d4:	0800a029 	.word	0x0800a029

0800a2d8 <_printf_common>:
 800a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	4616      	mov	r6, r2
 800a2de:	4698      	mov	r8, r3
 800a2e0:	688a      	ldr	r2, [r1, #8]
 800a2e2:	690b      	ldr	r3, [r1, #16]
 800a2e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	bfb8      	it	lt
 800a2ec:	4613      	movlt	r3, r2
 800a2ee:	6033      	str	r3, [r6, #0]
 800a2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	b10a      	cbz	r2, 800a2fe <_printf_common+0x26>
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	6033      	str	r3, [r6, #0]
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	0699      	lsls	r1, r3, #26
 800a302:	bf42      	ittt	mi
 800a304:	6833      	ldrmi	r3, [r6, #0]
 800a306:	3302      	addmi	r3, #2
 800a308:	6033      	strmi	r3, [r6, #0]
 800a30a:	6825      	ldr	r5, [r4, #0]
 800a30c:	f015 0506 	ands.w	r5, r5, #6
 800a310:	d106      	bne.n	800a320 <_printf_common+0x48>
 800a312:	f104 0a19 	add.w	sl, r4, #25
 800a316:	68e3      	ldr	r3, [r4, #12]
 800a318:	6832      	ldr	r2, [r6, #0]
 800a31a:	1a9b      	subs	r3, r3, r2
 800a31c:	42ab      	cmp	r3, r5
 800a31e:	dc26      	bgt.n	800a36e <_printf_common+0x96>
 800a320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	3b00      	subs	r3, #0
 800a328:	bf18      	it	ne
 800a32a:	2301      	movne	r3, #1
 800a32c:	0692      	lsls	r2, r2, #26
 800a32e:	d42b      	bmi.n	800a388 <_printf_common+0xb0>
 800a330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a334:	4641      	mov	r1, r8
 800a336:	4638      	mov	r0, r7
 800a338:	47c8      	blx	r9
 800a33a:	3001      	adds	r0, #1
 800a33c:	d01e      	beq.n	800a37c <_printf_common+0xa4>
 800a33e:	6823      	ldr	r3, [r4, #0]
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	f003 0306 	and.w	r3, r3, #6
 800a346:	2b04      	cmp	r3, #4
 800a348:	bf02      	ittt	eq
 800a34a:	68e5      	ldreq	r5, [r4, #12]
 800a34c:	6833      	ldreq	r3, [r6, #0]
 800a34e:	1aed      	subeq	r5, r5, r3
 800a350:	68a3      	ldr	r3, [r4, #8]
 800a352:	bf0c      	ite	eq
 800a354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a358:	2500      	movne	r5, #0
 800a35a:	4293      	cmp	r3, r2
 800a35c:	bfc4      	itt	gt
 800a35e:	1a9b      	subgt	r3, r3, r2
 800a360:	18ed      	addgt	r5, r5, r3
 800a362:	2600      	movs	r6, #0
 800a364:	341a      	adds	r4, #26
 800a366:	42b5      	cmp	r5, r6
 800a368:	d11a      	bne.n	800a3a0 <_printf_common+0xc8>
 800a36a:	2000      	movs	r0, #0
 800a36c:	e008      	b.n	800a380 <_printf_common+0xa8>
 800a36e:	2301      	movs	r3, #1
 800a370:	4652      	mov	r2, sl
 800a372:	4641      	mov	r1, r8
 800a374:	4638      	mov	r0, r7
 800a376:	47c8      	blx	r9
 800a378:	3001      	adds	r0, #1
 800a37a:	d103      	bne.n	800a384 <_printf_common+0xac>
 800a37c:	f04f 30ff 	mov.w	r0, #4294967295
 800a380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a384:	3501      	adds	r5, #1
 800a386:	e7c6      	b.n	800a316 <_printf_common+0x3e>
 800a388:	18e1      	adds	r1, r4, r3
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	2030      	movs	r0, #48	@ 0x30
 800a38e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a392:	4422      	add	r2, r4
 800a394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a39c:	3302      	adds	r3, #2
 800a39e:	e7c7      	b.n	800a330 <_printf_common+0x58>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	4622      	mov	r2, r4
 800a3a4:	4641      	mov	r1, r8
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	47c8      	blx	r9
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d0e6      	beq.n	800a37c <_printf_common+0xa4>
 800a3ae:	3601      	adds	r6, #1
 800a3b0:	e7d9      	b.n	800a366 <_printf_common+0x8e>
	...

0800a3b4 <_printf_i>:
 800a3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b8:	7e0f      	ldrb	r7, [r1, #24]
 800a3ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3bc:	2f78      	cmp	r7, #120	@ 0x78
 800a3be:	4691      	mov	r9, r2
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	469a      	mov	sl, r3
 800a3c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3ca:	d807      	bhi.n	800a3dc <_printf_i+0x28>
 800a3cc:	2f62      	cmp	r7, #98	@ 0x62
 800a3ce:	d80a      	bhi.n	800a3e6 <_printf_i+0x32>
 800a3d0:	2f00      	cmp	r7, #0
 800a3d2:	f000 80d2 	beq.w	800a57a <_printf_i+0x1c6>
 800a3d6:	2f58      	cmp	r7, #88	@ 0x58
 800a3d8:	f000 80b9 	beq.w	800a54e <_printf_i+0x19a>
 800a3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3e4:	e03a      	b.n	800a45c <_printf_i+0xa8>
 800a3e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3ea:	2b15      	cmp	r3, #21
 800a3ec:	d8f6      	bhi.n	800a3dc <_printf_i+0x28>
 800a3ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a3f4 <_printf_i+0x40>)
 800a3f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3f4:	0800a44d 	.word	0x0800a44d
 800a3f8:	0800a461 	.word	0x0800a461
 800a3fc:	0800a3dd 	.word	0x0800a3dd
 800a400:	0800a3dd 	.word	0x0800a3dd
 800a404:	0800a3dd 	.word	0x0800a3dd
 800a408:	0800a3dd 	.word	0x0800a3dd
 800a40c:	0800a461 	.word	0x0800a461
 800a410:	0800a3dd 	.word	0x0800a3dd
 800a414:	0800a3dd 	.word	0x0800a3dd
 800a418:	0800a3dd 	.word	0x0800a3dd
 800a41c:	0800a3dd 	.word	0x0800a3dd
 800a420:	0800a561 	.word	0x0800a561
 800a424:	0800a48b 	.word	0x0800a48b
 800a428:	0800a51b 	.word	0x0800a51b
 800a42c:	0800a3dd 	.word	0x0800a3dd
 800a430:	0800a3dd 	.word	0x0800a3dd
 800a434:	0800a583 	.word	0x0800a583
 800a438:	0800a3dd 	.word	0x0800a3dd
 800a43c:	0800a48b 	.word	0x0800a48b
 800a440:	0800a3dd 	.word	0x0800a3dd
 800a444:	0800a3dd 	.word	0x0800a3dd
 800a448:	0800a523 	.word	0x0800a523
 800a44c:	6833      	ldr	r3, [r6, #0]
 800a44e:	1d1a      	adds	r2, r3, #4
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6032      	str	r2, [r6, #0]
 800a454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a45c:	2301      	movs	r3, #1
 800a45e:	e09d      	b.n	800a59c <_printf_i+0x1e8>
 800a460:	6833      	ldr	r3, [r6, #0]
 800a462:	6820      	ldr	r0, [r4, #0]
 800a464:	1d19      	adds	r1, r3, #4
 800a466:	6031      	str	r1, [r6, #0]
 800a468:	0606      	lsls	r6, r0, #24
 800a46a:	d501      	bpl.n	800a470 <_printf_i+0xbc>
 800a46c:	681d      	ldr	r5, [r3, #0]
 800a46e:	e003      	b.n	800a478 <_printf_i+0xc4>
 800a470:	0645      	lsls	r5, r0, #25
 800a472:	d5fb      	bpl.n	800a46c <_printf_i+0xb8>
 800a474:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a478:	2d00      	cmp	r5, #0
 800a47a:	da03      	bge.n	800a484 <_printf_i+0xd0>
 800a47c:	232d      	movs	r3, #45	@ 0x2d
 800a47e:	426d      	negs	r5, r5
 800a480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a484:	4859      	ldr	r0, [pc, #356]	@ (800a5ec <_printf_i+0x238>)
 800a486:	230a      	movs	r3, #10
 800a488:	e011      	b.n	800a4ae <_printf_i+0xfa>
 800a48a:	6821      	ldr	r1, [r4, #0]
 800a48c:	6833      	ldr	r3, [r6, #0]
 800a48e:	0608      	lsls	r0, r1, #24
 800a490:	f853 5b04 	ldr.w	r5, [r3], #4
 800a494:	d402      	bmi.n	800a49c <_printf_i+0xe8>
 800a496:	0649      	lsls	r1, r1, #25
 800a498:	bf48      	it	mi
 800a49a:	b2ad      	uxthmi	r5, r5
 800a49c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a49e:	4853      	ldr	r0, [pc, #332]	@ (800a5ec <_printf_i+0x238>)
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	bf14      	ite	ne
 800a4a4:	230a      	movne	r3, #10
 800a4a6:	2308      	moveq	r3, #8
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a4ae:	6866      	ldr	r6, [r4, #4]
 800a4b0:	60a6      	str	r6, [r4, #8]
 800a4b2:	2e00      	cmp	r6, #0
 800a4b4:	bfa2      	ittt	ge
 800a4b6:	6821      	ldrge	r1, [r4, #0]
 800a4b8:	f021 0104 	bicge.w	r1, r1, #4
 800a4bc:	6021      	strge	r1, [r4, #0]
 800a4be:	b90d      	cbnz	r5, 800a4c4 <_printf_i+0x110>
 800a4c0:	2e00      	cmp	r6, #0
 800a4c2:	d04b      	beq.n	800a55c <_printf_i+0x1a8>
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a4ce:	5dc7      	ldrb	r7, [r0, r7]
 800a4d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4d4:	462f      	mov	r7, r5
 800a4d6:	42bb      	cmp	r3, r7
 800a4d8:	460d      	mov	r5, r1
 800a4da:	d9f4      	bls.n	800a4c6 <_printf_i+0x112>
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d10b      	bne.n	800a4f8 <_printf_i+0x144>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	07df      	lsls	r7, r3, #31
 800a4e4:	d508      	bpl.n	800a4f8 <_printf_i+0x144>
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	6861      	ldr	r1, [r4, #4]
 800a4ea:	4299      	cmp	r1, r3
 800a4ec:	bfde      	ittt	le
 800a4ee:	2330      	movle	r3, #48	@ 0x30
 800a4f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4f8:	1b92      	subs	r2, r2, r6
 800a4fa:	6122      	str	r2, [r4, #16]
 800a4fc:	f8cd a000 	str.w	sl, [sp]
 800a500:	464b      	mov	r3, r9
 800a502:	aa03      	add	r2, sp, #12
 800a504:	4621      	mov	r1, r4
 800a506:	4640      	mov	r0, r8
 800a508:	f7ff fee6 	bl	800a2d8 <_printf_common>
 800a50c:	3001      	adds	r0, #1
 800a50e:	d14a      	bne.n	800a5a6 <_printf_i+0x1f2>
 800a510:	f04f 30ff 	mov.w	r0, #4294967295
 800a514:	b004      	add	sp, #16
 800a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	f043 0320 	orr.w	r3, r3, #32
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	4833      	ldr	r0, [pc, #204]	@ (800a5f0 <_printf_i+0x23c>)
 800a524:	2778      	movs	r7, #120	@ 0x78
 800a526:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	6831      	ldr	r1, [r6, #0]
 800a52e:	061f      	lsls	r7, r3, #24
 800a530:	f851 5b04 	ldr.w	r5, [r1], #4
 800a534:	d402      	bmi.n	800a53c <_printf_i+0x188>
 800a536:	065f      	lsls	r7, r3, #25
 800a538:	bf48      	it	mi
 800a53a:	b2ad      	uxthmi	r5, r5
 800a53c:	6031      	str	r1, [r6, #0]
 800a53e:	07d9      	lsls	r1, r3, #31
 800a540:	bf44      	itt	mi
 800a542:	f043 0320 	orrmi.w	r3, r3, #32
 800a546:	6023      	strmi	r3, [r4, #0]
 800a548:	b11d      	cbz	r5, 800a552 <_printf_i+0x19e>
 800a54a:	2310      	movs	r3, #16
 800a54c:	e7ac      	b.n	800a4a8 <_printf_i+0xf4>
 800a54e:	4827      	ldr	r0, [pc, #156]	@ (800a5ec <_printf_i+0x238>)
 800a550:	e7e9      	b.n	800a526 <_printf_i+0x172>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	f023 0320 	bic.w	r3, r3, #32
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	e7f6      	b.n	800a54a <_printf_i+0x196>
 800a55c:	4616      	mov	r6, r2
 800a55e:	e7bd      	b.n	800a4dc <_printf_i+0x128>
 800a560:	6833      	ldr	r3, [r6, #0]
 800a562:	6825      	ldr	r5, [r4, #0]
 800a564:	6961      	ldr	r1, [r4, #20]
 800a566:	1d18      	adds	r0, r3, #4
 800a568:	6030      	str	r0, [r6, #0]
 800a56a:	062e      	lsls	r6, r5, #24
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	d501      	bpl.n	800a574 <_printf_i+0x1c0>
 800a570:	6019      	str	r1, [r3, #0]
 800a572:	e002      	b.n	800a57a <_printf_i+0x1c6>
 800a574:	0668      	lsls	r0, r5, #25
 800a576:	d5fb      	bpl.n	800a570 <_printf_i+0x1bc>
 800a578:	8019      	strh	r1, [r3, #0]
 800a57a:	2300      	movs	r3, #0
 800a57c:	6123      	str	r3, [r4, #16]
 800a57e:	4616      	mov	r6, r2
 800a580:	e7bc      	b.n	800a4fc <_printf_i+0x148>
 800a582:	6833      	ldr	r3, [r6, #0]
 800a584:	1d1a      	adds	r2, r3, #4
 800a586:	6032      	str	r2, [r6, #0]
 800a588:	681e      	ldr	r6, [r3, #0]
 800a58a:	6862      	ldr	r2, [r4, #4]
 800a58c:	2100      	movs	r1, #0
 800a58e:	4630      	mov	r0, r6
 800a590:	f7f5 fdf6 	bl	8000180 <memchr>
 800a594:	b108      	cbz	r0, 800a59a <_printf_i+0x1e6>
 800a596:	1b80      	subs	r0, r0, r6
 800a598:	6060      	str	r0, [r4, #4]
 800a59a:	6863      	ldr	r3, [r4, #4]
 800a59c:	6123      	str	r3, [r4, #16]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5a4:	e7aa      	b.n	800a4fc <_printf_i+0x148>
 800a5a6:	6923      	ldr	r3, [r4, #16]
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	47d0      	blx	sl
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d0ad      	beq.n	800a510 <_printf_i+0x15c>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	079b      	lsls	r3, r3, #30
 800a5b8:	d413      	bmi.n	800a5e2 <_printf_i+0x22e>
 800a5ba:	68e0      	ldr	r0, [r4, #12]
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	4298      	cmp	r0, r3
 800a5c0:	bfb8      	it	lt
 800a5c2:	4618      	movlt	r0, r3
 800a5c4:	e7a6      	b.n	800a514 <_printf_i+0x160>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	47d0      	blx	sl
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	d09d      	beq.n	800a510 <_printf_i+0x15c>
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	68e3      	ldr	r3, [r4, #12]
 800a5d8:	9903      	ldr	r1, [sp, #12]
 800a5da:	1a5b      	subs	r3, r3, r1
 800a5dc:	42ab      	cmp	r3, r5
 800a5de:	dcf2      	bgt.n	800a5c6 <_printf_i+0x212>
 800a5e0:	e7eb      	b.n	800a5ba <_printf_i+0x206>
 800a5e2:	2500      	movs	r5, #0
 800a5e4:	f104 0619 	add.w	r6, r4, #25
 800a5e8:	e7f5      	b.n	800a5d6 <_printf_i+0x222>
 800a5ea:	bf00      	nop
 800a5ec:	0800a9a9 	.word	0x0800a9a9
 800a5f0:	0800a9ba 	.word	0x0800a9ba

0800a5f4 <memmove>:
 800a5f4:	4288      	cmp	r0, r1
 800a5f6:	b510      	push	{r4, lr}
 800a5f8:	eb01 0402 	add.w	r4, r1, r2
 800a5fc:	d902      	bls.n	800a604 <memmove+0x10>
 800a5fe:	4284      	cmp	r4, r0
 800a600:	4623      	mov	r3, r4
 800a602:	d807      	bhi.n	800a614 <memmove+0x20>
 800a604:	1e43      	subs	r3, r0, #1
 800a606:	42a1      	cmp	r1, r4
 800a608:	d008      	beq.n	800a61c <memmove+0x28>
 800a60a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a60e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a612:	e7f8      	b.n	800a606 <memmove+0x12>
 800a614:	4402      	add	r2, r0
 800a616:	4601      	mov	r1, r0
 800a618:	428a      	cmp	r2, r1
 800a61a:	d100      	bne.n	800a61e <memmove+0x2a>
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a626:	e7f7      	b.n	800a618 <memmove+0x24>

0800a628 <_sbrk_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d06      	ldr	r5, [pc, #24]	@ (800a644 <_sbrk_r+0x1c>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	f7f6 fcd4 	bl	8000fe0 <_sbrk>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_sbrk_r+0x1a>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_sbrk_r+0x1a>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	200005f4 	.word	0x200005f4

0800a648 <_realloc_r>:
 800a648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a64c:	4680      	mov	r8, r0
 800a64e:	4615      	mov	r5, r2
 800a650:	460c      	mov	r4, r1
 800a652:	b921      	cbnz	r1, 800a65e <_realloc_r+0x16>
 800a654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a658:	4611      	mov	r1, r2
 800a65a:	f7ff bc59 	b.w	8009f10 <_malloc_r>
 800a65e:	b92a      	cbnz	r2, 800a66c <_realloc_r+0x24>
 800a660:	f7ff fbea 	bl	8009e38 <_free_r>
 800a664:	2400      	movs	r4, #0
 800a666:	4620      	mov	r0, r4
 800a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a66c:	f000 f81a 	bl	800a6a4 <_malloc_usable_size_r>
 800a670:	4285      	cmp	r5, r0
 800a672:	4606      	mov	r6, r0
 800a674:	d802      	bhi.n	800a67c <_realloc_r+0x34>
 800a676:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a67a:	d8f4      	bhi.n	800a666 <_realloc_r+0x1e>
 800a67c:	4629      	mov	r1, r5
 800a67e:	4640      	mov	r0, r8
 800a680:	f7ff fc46 	bl	8009f10 <_malloc_r>
 800a684:	4607      	mov	r7, r0
 800a686:	2800      	cmp	r0, #0
 800a688:	d0ec      	beq.n	800a664 <_realloc_r+0x1c>
 800a68a:	42b5      	cmp	r5, r6
 800a68c:	462a      	mov	r2, r5
 800a68e:	4621      	mov	r1, r4
 800a690:	bf28      	it	cs
 800a692:	4632      	movcs	r2, r6
 800a694:	f7ff fbc2 	bl	8009e1c <memcpy>
 800a698:	4621      	mov	r1, r4
 800a69a:	4640      	mov	r0, r8
 800a69c:	f7ff fbcc 	bl	8009e38 <_free_r>
 800a6a0:	463c      	mov	r4, r7
 800a6a2:	e7e0      	b.n	800a666 <_realloc_r+0x1e>

0800a6a4 <_malloc_usable_size_r>:
 800a6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6a8:	1f18      	subs	r0, r3, #4
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	bfbc      	itt	lt
 800a6ae:	580b      	ldrlt	r3, [r1, r0]
 800a6b0:	18c0      	addlt	r0, r0, r3
 800a6b2:	4770      	bx	lr

0800a6b4 <_init>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	bf00      	nop
 800a6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ba:	bc08      	pop	{r3}
 800a6bc:	469e      	mov	lr, r3
 800a6be:	4770      	bx	lr

0800a6c0 <_fini>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr
